---

name: Ansible package docs build
on:
  workflow_dispatch:
    inputs:
      repository-owner:
        description: GitHub account or org that owns the repository
        required: true
        default: ansible
      repository-name:
        description: Name of the GitHub repository
        required: true
        default: ansible-documentation
      repository-branch:
        description: Branch, tag, or commit SHA
        required: true
        default: devel
      language:
        type: choice
        description: Language
        required: true
        default: english
        options:
        - english
        - japanese
      ansible-package-version:
        type: choice
        description: Version of the Ansible community package to build
        required: true
        default: devel
        options:
        - devel
        - '10'
        - '9'
        - '8'
        - '7'
      latest-symlink:
        type: boolean
        description: Add latest symlink
        required: true
      production:
        type: boolean
        description: Deploy build to production
        required: true


env:
  PACKAGE_VERSION: ${{ github.event.inputs.ansible-package-version }}
  LANGUAGE: ${{ github.event.inputs.language }}

jobs:
  build-package-docs:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout Ansible documentation
      uses: actions/checkout@v4
      with:
        repository: >-
          ${{
            github.event.inputs.repository-owner
          }}/${{
            github.event.inputs.repository-name
          }}
        ref: ${{ github.event.inputs.repository-branch }}
        path: build-directory

    - name: Setup nox
      uses: wntrblm/nox@2024.04.15

    - name: Output Python info
      run: python --version --version && which python

    - name: Graft ansible-core
      run: nox -s clone-core
      working-directory: build-directory

    - name: Install project requirements
      run: >-
        python -m pip install
        -r tests/requirements.in
        -c tests/requirements.txt
      working-directory: build-directory

    - name: Set the COLLECTION_LIST variable
      if: env.PACKAGE_VERSION != 'devel'
      run: >-
        echo COLLECTION_LIST='"${PACKAGE_VERSION}"'
        >> "${GITHUB_ENV}"

    - name: Set the VERSION variable
      run: |
        if [ ${LANGUAGE} == "english" ]; then
          echo VERSION="${PACKAGE_VERSION}" >> "${GITHUB_ENV}"
        elif [ ${LANGUAGE} == "japanese" ]; then
          echo VERSION="${PACKAGE_VERSION}_ja" >> "${GITHUB_ENV}"
        fi

    - name: Build the Ansible community package docs
      run: make webdocs ANSIBLE_VERSION="${COLLECTION_LIST}"
      working-directory: build-directory/docs/docsite

    - name: Create latest symlink
      if: fromJSON(github.event.inputs.latest-symlink)
      run: ln -s "${VERSION}" _build/html/latest
      working-directory: build-directory/docs/docsite

    - name: Create a tarball with the build contents
      run: >-
        tar -czvf
        ansible-package-docs-html-"${PACKAGE_VERSION}"-$(date '+%Y-%m-%d')-${{
          github.run_id
        }}-${{
          github.run_number
        }}-${{
          github.run_attempt
        }}.tar.gz
        --directory=_build/html/ .
      working-directory: build-directory/docs/docsite

    - name: Create a downloadable archive that contains the tarball
      uses: actions/upload-artifact@v4
      with:
        name: package-docs-build
        path: build-directory/docs/docsite/ansible-package-docs-html-*.tar.gz
        retention-days: 7

  deploy-package-docs:
    needs: build-package-docs
    runs-on: ubuntu-latest
    environment:  # TODO create environment and specify it here
    env:
      dest-repo: owner/repo-name  # TODO create repo and specify here
      dest-branch: main  # TODO specify repo branch here
      user-email: "41898282+github-actions[bot]@users.noreply.github.com"
      user-name: "github-actions[bot]"
    steps:
    - name: Download the build archive
      uses: actions/download-artifact@v4
      with:
        name: package-docs-build

    - name: Extract the tarball
      run: |
        set -xeEuo pipefail
        mkdir -pv extracted-docs
        tar -xvzf ansible-package-docs-html-*.tar.gz -C extracted-docs

    - name: Generate temp GITHUB_TOKEN
      id: create_token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ secrets.BOT_APP_ID }}  # TODO create bot app id secret
        private_key: ${{ secrets.BOT_APP_KEY }}  # TODO create bot app id key

    - name: Checkout the deploy directory
      if: fromJSON(github.event.inputs.production)
      uses: actions/checkout@v4
      with:
        repository: ${{ env.dest-repo }}
        ref: ${{ env.dest-branch }}
        path: deploy-directory
        token: ${{ steps.create_token.outputs.token }}

    - name: Copy the generated HTML and assets
      if: fromJSON(github.event.inputs.production)
      run: >-
        rsync -av --delete --mkpath
        extracted-docs/
        deploy-directory/docs-build

    - name: Add generated HTML and assets
      if: fromJSON(github.event.inputs.production)
      run: |
        git config --local user.email "${{ env.user-email }}"
        git config --local user.name "${{ env.user-name }}"
        git add . --all --force
      working-directory: deploy-directory

    - name: Commit generated HTML and assets
      if: fromJSON(github.event.inputs.production)
      run: >-
        git commit -m "Push docs build $(date '+%Y-%m-%d')-${{
          github.run_id
        }}-${{
          github.run_number
        }}-${{
          github.run_attempt
        }}"
      working-directory: deploy-directory

    - name: Push build to deploy repository
      if: fromJSON(github.event.inputs.production)
      uses: ad-m/github-push-action@v0.8.0
      with:
        github_token: ${{ steps.create_token.outputs.token }}
        repository: ${{ env.dest-repo }}
        branch: ${{ env.dest-branch }}
        directory: deploy-directory
        force: true
