# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019 Red Hat, Inc.
# This file is distributed under the same license as the Ansible package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
msgid ""
msgstr ""
"Project-Id-Version: Ansible devel\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-03-08 20:25+0100\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:7
msgid "Developing network plugins"
msgstr "ネットワークプラグインの開発"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:9
msgid "You can extend the existing network modules with custom plugins in your collection."
msgstr "コレクションのカスタムプラグインを使用して、既存のネットワークモジュールを拡張できます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:15
msgid "Network connection plugins"
msgstr "ネットワーク接続プラグイン"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:16
msgid "Each network connection plugin has a set of its own plugins which provide a specification of the connection for a particular set of devices. The specific plugin used is selected at runtime based on the value of the ``ansible_network_os`` variable assigned to the host. This variable should be set to the same value as the name of the plugin to be loaded. Thus, ``ansible_network_os=nxos`` will try to load a plugin in a file named ``nxos.py``, so it is important to name the plugin in a way that will be sensible to users."
msgstr "各ネットワーク接続プラグインには、独自のプラグインセットがあります。これは、特定のデバイスセットの接続の仕様を提供します。使用される特定のプラグインは、ホストに割り当てられた ``ansible_network_os`` 変数の値に基づいてランタイム時に選択されます。この変数は、読み込むプラグインの名前と同じ値に設定する必要があります。そのため、``ansible_network_os=nxos`` は、``nxos.py`` という名前のファイルにプラグインを読み込もうとするため、ユーザーが適切な方法でプラグインに名前を付けることが重要です。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:23
msgid "Public methods of these plugins may be called from a module or module_utils with the connection proxy object just as other connection methods can. The following is a very simple example of using such a call in a module_utils file so it may be shared with other modules."
msgstr "これらのプラグインのパブリックメソッドは、他の接続方法と同様に、接続のプロキシーオブジェクトを使用して、モジュールまたは module_utils から接続で呼び出すことができます。以下は、その他のモジュールと共有できるように、module_utils ファイルでこのような呼び出しを使用する非常に簡単な例です。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:45
msgid "Developing httpapi plugins"
msgstr "httpapi プラグインの開発"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:47
msgid ":ref:`httpapi plugins <httpapi_plugins>` serve as adapters for various HTTP(S) APIs for use with the ``httpapi`` connection plugin. They should implement a minimal set of convenience methods tailored to the API you are attempting to use."
msgstr ":ref:`httpapi プラグイン <httpapi_plugins>` は、``httpapi`` 接続プラグインで使用するさまざまな HTTP(S) API のアダプターとして機能します。このプラグインは、使用しようとしている API に適した最小限の便利なメソッドを実装する必要があります。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:49
msgid "Specifically, there are a few methods that the ``httpapi`` connection plugin expects to exist."
msgstr "具体的には、``httpapi`` 接続プラグインが存在することが必要なメソッドがいくつかあります。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:52
msgid "Making requests"
msgstr "要求の作成"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:54
msgid "The ``httpapi`` connection plugin has a ``send()`` method, but an httpapi plugin needs a ``send_request(self, data, **message_kwargs)`` method as a higher-level wrapper to ``send()``. This method should prepare requests by adding fixed values like common headers or URL root paths. This method may do more complex work such as turning data into formatted payloads, or determining which path or method to request. It may then also unpack responses to be more easily consumed by the caller."
msgstr "``httpapi`` 接続プラグインには ``send()`` メソッドがありますが、httpapi プラグインには、``send()`` への高レベルラッパーとして ``send_request(self, data, **message_kwargs)`` メソッドが必要です。このメソッドは、共通ヘッダーや URL ルートパスなどの固定値を追加することで要求を準備する必要があります。このメソッドは、フォーマットされたペイロードへのデータの切り替えや、リクエスト用のパスやメソッドの特定など、より複雑な作業を行うことがあります。その後、呼び出し元によって簡単に消費される応答が展開される可能性があります"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:74
msgid "Authenticating"
msgstr "認証"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:76
msgid "By default, all requests will authenticate with HTTP Basic authentication. If a request can return some kind of token to stand in place of HTTP Basic, the ``update_auth(self, response, response_text)`` method should be implemented to inspect responses for such tokens. If the token is meant to be included with the headers of each request, it is sufficient to return a dictionary which will be merged with the computed headers for each request. The default implementation of this method does exactly this for cookies. If the token is used in another way, say in a query string, you should instead save that token to an instance variable, where the ``send_request()`` method (above) can add it to each request"
msgstr "デフォルトでは、すべての要求は HTTP Basic 認証で認証されます。要求が HTTP Basic の代わりにある種のトークンを返す場合は、``update_auth(self, response, response_text)`` メソッドを実装して、このようなトークンの応答を検査する必要があります。トークンが各要求のヘッダーに含まれるように設計されている場合は、各要求に対して計算されたヘッダーとマージするディクショナリーを返すだけで十分です。このメソッドのデフォルト実装は Cookie に対して行われる方法で行われます。トークンが別の方法 (クエリー文字列など) で使用される場合は、そのトークンをインスタンス変数に保存して、``send_request()`` メソッド (上記) により各要求に追加できるようにします。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:87
msgid "If instead an explicit login endpoint needs to be requested to receive an authentication token, the ``login(self, username, password)`` method can be implemented to call that endpoint. If implemented, this method will be called once before requesting any other resources of the server. By default, it will also be attempted once when a HTTP 401 is returned from a request."
msgstr "代わりに明示的なログインエンドポイントを要求して認証トークンを受け取る必要がある場合は、``login(self, username, password)`` メソッドを実装して、そのエンドポイントを呼び出すことができます。このメソッドを実装すると、サーバーの他のリソースを要求する前にこのメソッドが一度呼び出されます。デフォルトでは、要求から HTTP 401 が返されるとこれが一度試行されます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:105
msgid "Similarly, ``logout(self)`` can be implemented to call an endpoint to invalidate and/or release the current token, if such an endpoint exists. This will be automatically called when the connection is closed (and, by extension, when reset)."
msgstr "同様に、``logout(self)`` を実装してエンドポイントを呼び出し、そのエンドポイントが存在する場合は現在のトークンを無効化または解放できます。これは、接続を閉じると自動的に呼び出されます (また、リセット時には拡張により呼び出されます)。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:117
msgid "Error handling"
msgstr "エラー処理"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:119
msgid "The ``handle_httperror(self, exception)`` method can deal with status codes returned by the server. The return value indicates how the plugin will continue with the request:"
msgstr "``handle_httperror(self, exception)`` メソッドは、サーバーによって返されるステータスコードを処理できます。戻り値は、プラグインがどのようにリクエストを続けるかを示します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:121
msgid "A value of ``true`` means that the request can be retried. This my be used to indicate a transient error, or one that has been resolved. For example, the default implementation will try to call ``login()`` when presented with a 401, and return ``true`` if successful."
msgstr "``true`` の値は、要求を再試行できることを意味します。これは、一時的なエラーや解決されたエラーを示すために使用できます。たとえば、デフォルトの実装では、401 が示されると ``login()`` の呼び出しが試行され、成功した場合は ``true`` が返されます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:123
msgid "A value of ``false`` means that the plugin is unable to recover from this response. The status code will be raised as an exception to the calling module."
msgstr "``false`` の値は、プラグインがこの応答から復元できないことを意味します。ステータスコードは、呼び出したモジュールに例外としてあげられます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:125
msgid "Any other value will be taken as a nonfatal response from the request. This may be useful if the server returns error messages in the body of the response. Returning the original exception is usually sufficient in this case, as HTTPError objects have the same interface as a successful response."
msgstr "その他の値は、要求からの致命的でない応答として取られます。これは、サーバーが応答のボディーでエラーメッセージを返す場合に便利です。HTTPError オブジェクトは正常な応答と同じインターフェースを持つため、通常は元の例外を返します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:127
msgid "For example httpapi plugins, see the `source code for the httpapi plugins <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/httpapi>`_ included with Ansible Core."
msgstr "httpapi プラグインの例は、Ansible Core に含まれる `httpapi プラグインのソースコード <https://github.com/ansible/ansible/tree/devel/lib/ansible/plugins/httpapi>`_ を参照してください。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:132
msgid "Developing NETCONF plugins"
msgstr "NETCONF プラグインの開発"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:134
msgid "The :ref:`netconf <netconf_connection>` connection plugin provides a connection to remote devices over the ``SSH NETCONF`` subsystem. Network devices typically use this connection plugin to send and receive ``RPC`` calls over ``NETCONF``."
msgstr ":ref:`netconf <netconf_connection>` 接続プラグインは、``SSH NETCONF`` サブシステム経由でリモートデバイスへの接続を提供します。ネットワークデバイスは通常、この接続プラグインを使用して、``NETCONF`` で ``RPC`` 呼び出しを送受信します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:136
msgid "The ``netconf`` connection plugin uses the ``ncclient`` Python library under the hood to initiate a NETCONF session with a NETCONF-enabled remote network device. ``ncclient`` also executes NETCONF RPC requests and receives responses. You must install the ``ncclient`` on the local Ansible controller."
msgstr "``netconf`` 接続プラグインは、Python ライブラリー ``ncclient`` を使用して、NETCONF が有効なリモートネットワークデバイスで NETCONF セッションを開始します。また、``ncclient`` は NETCONF RPC 要求を実行し、応答を受け取ります。ローカルの Ansible コントローラーに ``ncclient`` をインストールする必要があります。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:138
msgid "To use the ``netconf`` connection plugin for network devices that support standard NETCONF (:RFC:`6241`) operations such as ``get``, ``get-config``, ``edit-config``, set ``ansible_network_os=default``. You can use :ref:`netconf_get <netconf_get_module>`, :ref:`netconf_config <netconf_config_module>` and :ref:`netconf_rpc <netconf_rpc_module>` modules to talk to a NETCONF enabled remote host."
msgstr "``get``、``get-config``、``edit-config`` などの標準 NETCONF (:RFC:`6241`) 操作に対応するネットワークデバイスの ``netconf`` 接続プラグインを使用するには、``ansible_network_os=default`` を設定します。:ref:`netconf_get <netconf_get_module>` モジュール、:ref:`netconf_config <netconf_config_module>` モジュール、および :ref:`netconf_rpc <netconf_rpc_module>` モジュールを使用して、NETCONF が有効なリモートホストと通信できます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:141
msgid "As a contributor and user, you should be able to use all the methods under the ``NetconfBase`` class if your device supports standard NETCONF. You can contribute a new plugin if the device you are working with has a vendor specific NETCONF RPC. To support a vendor specific NETCONF RPC, add the implementation in the network OS specific NETCONF plugin."
msgstr "デバイスが標準の NETCONF に対応している場合は、貢献者およびユーザーとして、``NetconfBase`` クラスのすべてのメソッドを使用できるようにする必要があります。作業しているデバイスにベンダー固有の NETCONF RPC がある場合は、新しいプラグインを提供できます。ベンダー固有の NETCONF RPC に対応するには、ネットワーク OS 固有の NETCONF プラグインに実装を追加します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:144
msgid "For Junos for example:"
msgstr "たとえば、Junios の場合は以下のようになります。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:146
msgid "See the vendor-specific Junos RPC methods implemented in ``plugins/netconf/junos.py``."
msgstr "``plugins/netconf/junos.py`` に実装されるベンダー固有の Junos RPC メソッドを参照してください。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:147
msgid "Set the value of ``ansible_network_os`` to the name of the netconf plugin file, that is ``junos`` in this case."
msgstr "``ansible_network_os`` の値を netconf プラグインファイルの名前 (ここでは ``junos``) に設定します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:152
msgid "Developing network_cli plugins"
msgstr "network_cli プラグインの開発"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:154
msgid "The :ref:`network_cli <network_cli_connection>` connection type uses ``paramiko_ssh`` under the hood which creates a pseudo terminal to send commands and receive responses. ``network_cli`` loads two platform specific plugins based on the value of ``ansible_network_os``:"
msgstr "接続タイプ :ref:`network_cli <network_cli_connection>` は、コマンドを送信して応答を受け取るための疑似端末を作成するフード (hood) の下で、``paramiko_ssh`` を使用します。``network_cli`` は、``ansible_network_os`` の値に基づいて 2 つのプラットフォーム固有のプラグインを読み込みます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:157
msgid "Terminal plugin (for example ``plugins/terminal/ios.py``) - Controls the parameters related to terminal, such as setting terminal length and width, page disabling and privilege escalation. Also defines regex to identify the command prompt and error prompts."
msgstr "端末のプラグイン (例: ``plugins/terminal/ios.py``) - 端末の長さや幅の設定、ページの無効化、権限の昇格など、端末に関連するパラメーターを制御します。また、正規表現を定義して、コマンドプロンプトおよびエラープロンプトを特定します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:159
msgid ":ref:`cliconf_plugins` (for example, :ref:`ios cliconf <ios_cliconf>`) - Provides an abstraction layer for low level send and receive operations. For example, the ``edit_config()`` method ensures that the prompt is in ``config`` mode before executing configuration commands."
msgstr ":ref:`cliconf_plugins` (例: :ref:`ios cliconf <ios_cliconf>`) - 低レベルの送受信操作の抽象化レイヤーを提供します。たとえば、``edit_config()`` メソッドは、設定コマンドを実行する前にプロンプトが ``config`` モードになるようにします。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:161
msgid "To contribute a new network operating system to work with the ``network_cli`` connection, implement the ``cliconf`` and ``terminal`` plugins for that network OS."
msgstr "新しいネットワークオペレーティングシステムが ``network_cli`` 接続と連携するようにするには、そのネットワーク OS の ``cliconf`` プラグインおよび ``terminal`` プラグインを実装します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:163
msgid "The plugins can reside in:"
msgstr "このプラグインは以下の場所に置くことができます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:165
msgid "Adjacent to playbook in folders"
msgstr "ディレクトリー内で Playbook に隣接"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:172
msgid "Roles"
msgstr "ロール"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:179
#: ../../rst/shared_snippets/basic_concepts.txt:17
msgid "Collections"
msgstr "コレクション"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:186
msgid "The user can also set the :ref:`DEFAULT_CLICONF_PLUGIN_PATH`  to configure the ``cliconf`` plugin path."
msgstr "``cliconf`` プラグインパスを設定するために、ユーザーは :ref:`DEFAULT_CLICONF_PLUGIN_PATH` を設定することもできます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:188
msgid "After adding the ``cliconf`` and ``terminal`` plugins in the expected locations, users can:"
msgstr "予想される場所に ``cliconf`` プラグインおよび ``terminal`` プラグインを追加したら、ユーザーは以下を行うことができます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:190
msgid "Use the :ref:`cli_command <cli_command_module>` to run an arbitrary command on the network device."
msgstr ":ref:`cli_command <cli_command_module>` を使用して、ネットワークデバイス上で任意のコマンドを実行します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:191
msgid "Use the :ref:`cli_config <cli_config_module>` to  implement configuration changes on the remote hosts without platform-specific modules."
msgstr ":ref:`cli_config <cli_config_module>` を使用して、プラットフォーム固有のモジュールを使用しないリモートホストに設定変更を実装する。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:197
msgid "Developing cli_parser plugins in a collection"
msgstr "コレクションでの cli_parser プラグインの開発"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:199
msgid "You can use ``cli_parse`` as an entry point for a cli_parser plugin in your own collection."
msgstr "``cli_parse`` は、独自のコレクションで cli_parser プラグインのエントリーポイントとして使用できます。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:202
msgid "The following sample shows the start of a custom cli_parser plugin:"
msgstr "以下の例は、カスタム cli_parser プラグインの開始を示しています。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:245
msgid "The following task uses this custom cli_parser plugin:"
msgstr "以下のタスクでは、このカスタム cli_parser プラグインを使用します。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:255
msgid "To develop a custom plugin: - Each cli_parser plugin requires a ``CliParser`` class. - Each cli_parser plugin requires a ``parse`` function. - Always return a dictionary with ``errors`` or ``parsed``. - Place the custom cli_parser in plugins/cli_parsers directory of the collection. - See the `current cli_parsers <https://github.com/ansible-collections/ansible.netcommon/tree/main/plugins/cli_parsers>`_ for examples to follow."
msgstr "カスタムプラグインを開発するには: - 各 cli_parser プラグインには ``CliParser`` クラスが必要です。- 各 cli_parser プラグインには ``parse`` 関数が必要です。- 常に ``errors`` または ``parsed`` でディクショナリーを返します。コレクションの plugins/cli_parsers ディレクトリーにカスタムの cli_parser を置きます。例は `現在の cli_parsers <https://github.com/ansible-collections/ansible.netcommon/tree/main/plugins/cli_parsers>` を参照してください。"

#: ../../rst/network/dev_guide/developing_plugins_network.rst:265
msgid ":ref:`cli_parsing`"
msgstr ":ref:`cli_parsing`"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:6
msgid "Developing network resource modules"
msgstr "ネットワークリソースモジュールの開発"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:13
msgid "Understanding network and security resource modules"
msgstr "ネットワークおよびセキュリティーのリソースモジュールの概要"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:15
msgid "Network and security devices separate configuration into sections (such as interfaces, VLANs, and so on) that apply to a network or security service. Ansible resource modules take advantage of this to allow users to configure subsections or resources within the device configuration. Resource modules provide a consistent experience across different network and security devices. For example, a network resource module may only update the configuration for a specific portion of the network interfaces, VLANs, ACLs, and so on for a network device. The resource module:"
msgstr "ネットワークデバイスおよびセキュリティーデバイスは、その設定を、ネットワークサービスまたはセキュリティーサービスに適用されるセクション (インターフェース、VLAN など) に分割します。Ansible リソースモジュールはこれを利用して、ユーザーがデバイス設定でサブセクションやリソースを設定できるようにします。リソースモジュールは、異なるネットワークおよびセキュリティーデバイス全体で一貫したエクスペリエンスを提供します。たとえば、ネットワークリソースモジュールは、ネットワークインターフェース、VLAN、ACL などの特定の部分に対して設定を更新することができます。リソースモジュールは、以下を行います。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:17
msgid "Fetches a piece of the configuration (fact gathering), for example, the interfaces configuration."
msgstr "インターフェース設定など、設定の一部 (ファクト収集) を取得します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:18
msgid "Converts the returned configuration into key-value pairs."
msgstr "返された設定をキーと値のペアに変換します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:19
msgid "Places those key-value pairs into an internal agnostic structured data format."
msgstr "これらのキーと値のペアを内部に依存しない構造化データ形式に置きます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:21
msgid "Now that the configuration data is normalized, the user can update and modify the data and then use the resource module to send the configuration data back to the device. This results in a full round-trip configuration update without the need for manual parsing, data manipulation, and data model management."
msgstr "設定データが正規化され、ユーザーはデータを更新して変更し、リソースモジュールを使用して設定データをデバイスに戻すことができます。これにより、手動の解析、データ操作、およびデータモデル管理を必要とせずに、完全なラウンドトリップ設定の更新が可能になります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:23
msgid "The resource module has two top-level keys - ``config`` and ``state``:"
msgstr "リソースモジュールには、``config`` と ``state`` の 2 つのトップレベルキーがあります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:25
msgid "``config`` defines the resource configuration data model as key-value pairs.  The type of the ``config`` option can be ``dict`` or ``list of dict`` based on the resource managed.  That is, if the device has a single global configuration, it should be a ``dict`` (for example, a global LLDP configuration). If the device has multiple instances of configuration, it should be of type ``list`` with each element in the list of type ``dict`` (for example, interfaces configuration)."
msgstr "``config`` は、リソース設定のデータモデルをキーと値のペアとして定義します。``config`` オプションのタイプは、管理されるリソースに基づいて ``dict`` または ``list of dict`` になります。つまり、デバイスにグローバル設定が 1 つある場合には、``dict`` でなければなりません (例: グローバル LLDP 設定)。デバイスに複数の設定インスタンスがある場合は、タイプが ``list`` となり、リストの各要素はタイプが ``dict`` である必要があります (例: インターフェース設定)。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:28
msgid "``state`` defines the action the resource module takes on the end device."
msgstr "``state`` リソースモジュールがエンドデバイスで使用するアクションを定義します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:30
msgid "The ``state`` for a new resource module should support the following values (as applicable for the devices that support them):"
msgstr "新しいリソースモジュールの ``state`` は、以下の値をサポートする必要があります (サポートするデバイスに該当する場合)。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:33
#: ../../rst/network/user_guide/network_resource_modules.rst:19
msgid "merged"
msgstr "merged"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:33
#: ../../rst/network/user_guide/network_resource_modules.rst:19
msgid "Ansible merges the on-device configuration with the provided configuration in the task."
msgstr "Ansible は、デバイス上の設定をタスクに指定した設定と統合します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:36
#: ../../rst/network/user_guide/network_resource_modules.rst:22
msgid "replaced"
msgstr "replaced"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:36
#: ../../rst/network/user_guide/network_resource_modules.rst:22
msgid "Ansible replaces the on-device configuration subsection with the provided configuration subsection in the task."
msgstr "Ansible が、デバイス上の設定のサブセクションを、タスクに指定した設定のサブセクションに置き換えます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:39
#: ../../rst/network/user_guide/network_resource_modules.rst:25
msgid "overridden"
msgstr "overridden"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:39
#: ../../rst/network/user_guide/network_resource_modules.rst:25
msgid "Ansible overrides the on-device configuration for the resource with the provided configuration in the task. Use caution with this state as you could remove your access to the device (for example, by overriding the management interface configuration)."
msgstr "Ansible は、リソースのデバイスの設定を、タスクで提供された設定を使用して上書きします。この状態では、デバイスへのアクセスが削除される可能性があるため、注意が必要です (たとえば、管理インターフェイスの設定を上書きするなど)。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:42
#: ../../rst/network/user_guide/network_resource_modules.rst:28
msgid "deleted"
msgstr "deleted"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:42
#: ../../rst/network/user_guide/network_resource_modules.rst:28
msgid "Ansible deletes the on-device configuration subsection and restores any default settings."
msgstr "Ansible は、デバイス上の設定サブセクションを削除して、デフォルト設定を復元します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:45
#: ../../rst/network/user_guide/network_resource_modules.rst:31
msgid "gathered"
msgstr "gathered"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:45
#: ../../rst/network/user_guide/network_resource_modules.rst:31
msgid "Ansible displays the resource details gathered from the network device and accessed with the ``gathered`` key in the result."
msgstr "Ansible は、ネットワークデバイスから収集したリソースの詳細を表示し、結果の ``gathered`` キーを使用してアクセスします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:48
#: ../../rst/network/user_guide/network_resource_modules.rst:34
msgid "rendered"
msgstr "rendered"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:48
#: ../../rst/network/user_guide/network_resource_modules.rst:34
msgid "Ansible renders the provided configuration in the task in the device-native format (for example, Cisco IOS CLI). Ansible returns this rendered configuration in the ``rendered`` key in the result. Note this state does not communicate with the network device and can be used offline."
msgstr "Ansible は、デバイスネイティブの形式でタスク内の提供された設定をレンダリングします (例: Cisco IOS CLI)。Ansible は、結果内の ``rendered`` キーでレンダリングされた設定を返します。この状態はネットワークデバイスと通信せず、オフラインで使用できる点に注意してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:52
#: ../../rst/network/user_guide/network_resource_modules.rst:37
msgid "parsed"
msgstr "parsed"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:51
#: ../../rst/network/user_guide/network_resource_modules.rst:37
msgid "Ansible parses the configuration from the ``running_configuration`` option into Ansible structured data in the ``parsed`` key in the result. Note this does not gather the configuration from the network device so this state can be used offline."
msgstr "Ansible は、``running_configuration`` オプションから、その結果内の ``parsed`` キーの Ansible 構造化データに設定を解析します。この設定は、ネットワークデバイスから設定が収集されないため、この状態をオフラインで使用できる点に注意してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:54
msgid "Modules in Ansible-maintained collections must support these state values. If you develop a module with only \"present\" and \"absent\" for state, you may submit it to a community collection."
msgstr "Ansible が管理しているコレクションのモジュールは、これらの状態値をサポートする必要があります。状態が「present」および「absent」のモジュールを開発した場合は、コミュニティーコレクションに提出することができます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:58
msgid "The states ``rendered``, ``gathered``, and ``parsed`` do not perform any change on the device."
msgstr "状態 ``rendered``、``gathered``、および ``parsed`` はデバイス上で変更を行いません。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:62
msgid "`Deep Dive on VLANs Resource Modules for Network Automation <https://www.ansible.com/blog/deep-dive-on-vlans-resource-modules-for-network-automation>`_"
msgstr "`Deep Dive on VLANs Resource Modules for Network Automation <https://www.ansible.com/blog/deep-dive-on-vlans-resource-modules-for-network-automation>`_"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:63
msgid "Walkthrough of how state values are implemented for VLANs."
msgstr "VLAN への状態値の実装方法のウォールスルー"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:67
msgid "Developing network and security resource modules"
msgstr "ネットワークおよびセキュリティーのリソースモジュールの開発"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:69
msgid "The Ansible Engineering team ensures the module design and code pattern  within Ansible-maintained collections is uniform across resources and across platforms to give a vendor-agnostic feel and deliver good quality code. We recommend you use the `resource module builder <https://github.com/ansible-network/resource_module_builder>`_ to  develop a resource module."
msgstr "Ansible Engineering チームは、Ansible が管理しているコレクション内のモジュール設計およびコードパターンがリソースやプラットフォーム全体で統一され、ベンダーに依存せず、適切な品質コードを提供します。`リソースモジュールビルダー <https://github.com/ansible-network/resource_module_builder>`_ を使用してリソースモジュールを開発することが推奨されます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:72
msgid "The highlevel process for developing a resource module is:"
msgstr "リソースモジュール開発の主なプロセスは次のとおりです。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:74
msgid "Create and share a resource model design in the `resource module models repository <https://github.com/ansible-network/resource_module_models>`_ as a PR for review."
msgstr "レビュー用にプル要求として、`リソースモジュールモデルリポジトリー <https://github.com/ansible-network/resource_module_models>`_ でリソースモデルの設計を作成し、共有します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:75
msgid "Download the latest version of the `resource module builder <https://github.com/ansible-network/resource_module_builder>`_."
msgstr "最新バージョンの `リソースモジュールビルダー <https://github.com/ansible-network/resource_module_builder>`_ をダウンロードします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:76
msgid "Run the ``resource module builder`` to create a collection scaffold from your approved resource model."
msgstr "``リソースモジュールビルダー`` を実行して、承認されたリソースモデルからコレクションのスキャフォールディングを作成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:77
msgid "Write the code to implement your resource module."
msgstr "コードを作成し、リソースモジュールを実装します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:78
msgid "Develop integration and unit tests to verify your resource module."
msgstr "統合テストおよびユニットテストを開発して、リソースモジュールを確認します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:79
msgid "Create a PR to the appropriate collection that you want to add your new resource module to. See :ref:`contributing_maintained_collections` for details on determining the correct collection for your module."
msgstr "新しいリソースモジュールを追加する適切なコレクションにプル要求を作成します。モジュールの正しいコレクションを判断する方法は「:ref:`contributing_maintained_collections`」を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:83
msgid "Understanding the model and resource module builder"
msgstr "モデルおよびリソースモジュールビルダーの理解"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:85
msgid "The resource module builder is an Ansible Playbook that helps developers scaffold and maintain an Ansible resource module. It uses a model as the single source of truth for the module. This model is a ``yaml`` file that is used for the module DOCUMENTATION section and the argument spec."
msgstr "リソースモジュールビルダーは、開発者が Ansible リソースモジュールをスキャフォールディングし、維持できるようにする Ansible Playbook です。このモデルは、モジュールの信頼できる唯一のソースとして使用します。このモデルは、モジュールの DOCUMENTATION セクションおよび引数仕様に使用される ``yaml`` ファイルです。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:87
msgid "The resource module builder has the following capabilities:"
msgstr "リソースモジュールビルダーには以下の機能があります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:89
msgid "Uses a defined model to scaffold a resource module directory layout and initial class files."
msgstr "定義されたモデルを使用して、リソースモジュールディレクトリーのレイアウトと初期クラスファイルをスキャフォールディングします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:90
msgid "Scaffolds either an Ansible role or a collection."
msgstr "Ansible ロールまたはコレクションのいずれかをスキャフォールディングします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:91
msgid "Subsequent uses of the resource module builder will only replace the module arspec and file containing the module docstring."
msgstr "その後、リソースモジュールビルダーを使用すると、モジュールの arspec と、モジュールの docstring を含むファイルのみが置き換えられます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:92
msgid "Allows you to store complex examples along side the model in the same directory."
msgstr "複雑なサンプルモデルと同じディレクトリーに保存できます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:93
msgid "Maintains the model as the source of truth for the module and use resource module builder to update the source files as needed."
msgstr "モジュールの信頼できるソースとしてこのモデルを維持し、必要に応じてリソースモジュールビルダーを使用してソースファイルを更新します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:94
msgid "Generates working sample modules for both ``<network_os>_<resource>`` and ``<network_os>_facts``."
msgstr "``<network_os>_<resource>`` および ``<network_os>_facts`` の両方に作業サンプルモジュールを生成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:97
msgid "Accessing the resource module builder"
msgstr "リソースモジュールビルダーへのアクセス"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:99
msgid "To access the resource module builder:"
msgstr "リソースモジュールビルダーにアクセスするには、以下を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:101
msgid "clone the github repository:"
msgstr "github リポジトリーのクローンを作成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:107
msgid "Install the requirements:"
msgstr "要件をインストールします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:114
msgid "Creating a model"
msgstr "モデルの作成"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:116
msgid "You must create a model for your new resource. The model is the single source of truth for both the argspec and docstring, keeping them in sync. Once your model is approved, you can use the resource module builder to generate three items based on the model:"
msgstr "新しいリソースのモデルを作成する必要があります。モデルは、argspec と docstring の両方に対する信頼できる唯一のソースとなります。モデルが承認されると、リソースモジュールビルダーを使用して、このモデルに基づいて 3 つのアイテムを生成できます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:118
msgid "The scaffold for a new module"
msgstr "新しいモジュールのスキャフォールディング"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:119
msgid "The argspec for the new module"
msgstr "新しいモジュールの argspec"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:120
msgid "The docstring for the new module"
msgstr "新しいモジュールの docstring"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:122
msgid "For any subsequent changes to the functionality, update the model first and use the resource module builder to update the module argspec and docstring."
msgstr "その後、機能に対する変更を行う場合は、最初にモデルを更新し、リソースモジュールビルダーを使用してモジュールの argspec および docstring を更新します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:124
msgid "For example, the resource model builder includes the ``myos_interfaces.yml`` sample in the :file:`models` directory, as seen below:"
msgstr "たとえば、リソースモデルビルダーには、以下のように :file:`models` ディレクトリーに ``myos_interfaces.yml`` サンプルが含まれます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:196
msgid "Notice that you should include examples for each of the states that the resource supports. The resource module builder also includes these in the sample model."
msgstr "リソースがサポートする各状態の例を含める必要があることに注意してください。リソースモジュールビルダーには、サンプルモデルにもこれらが含まれます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:198
msgid "Share this model as a PR for review at `resource module models repository <https://github.com/ansible-network/resource_module_models>`_. You can also see more model examples at that location."
msgstr "このモデルは、`リソースモジュールモデルのリポジトリー <https://github.com/ansible-network/resource_module_models>`_ で確認するための PR として共有します。この場所でさらにモデルのサンプルを表示することもできます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:202
msgid "Creating a collection scaffold from a resource model"
msgstr "リソースモデルからのコレクションのスキャフォールディングの作成"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:204
msgid "To use the resource module builder to create a collection scaffold from your approved resource model:"
msgstr "リソースモジュールビルダーを使用して、認証されたリソースモデルからコレクションのスキャフォールディングを作成するには、以下を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:215
msgid "Where the parameters are as follows:"
msgstr "パラメーターは以下のようになります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:217
msgid "``rm_dest``: The directory where the resource module builder places the files and directories for the resource module and facts modules."
msgstr "``rm_dest``: リソースモジュールビルダーが、リソースモジュールおよびファクトモジュールのファイルおよびディレクトリーを置くディレクトリー。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:218
msgid "``structure``: The directory layout type (role or collection)"
msgstr "``structure``: ディレクトリーレイアウトの種類 (ロールまたはコレクション)。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:220
msgid "``role``: Generate a role directory layout."
msgstr "``role``: ロールディレクトリーレイアウトを生成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:221
msgid "``collection``: Generate a collection directory layout."
msgstr "``collection``: コレクションディレクトリーのレイアウトを生成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:223
msgid "``collection_org``: The organization of the collection, required when `structure=collection`."
msgstr "``collection_org``: `structure=collection` の場合にコレクションの組織が必要です。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:224
msgid "``collection_name``: The name of the collection, required when `structure=collection`."
msgstr "``collection_name``: `structure=collection` の場合に必要となるコレクションの名前です。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:225
msgid "``model``: The path to the model file."
msgstr "``model``: モデルファイルへのパス。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:227
msgid "To use the resource module builder to create a role scaffold:"
msgstr "リソースモジュールビルダーを使用してロールのスキャフォールディングを作成するには、以下を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:237
msgid "Examples"
msgstr "例"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:240
msgid "Collection directory layout"
msgstr "コレクションディレクトリーのレイアウト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:242
msgid "This example shows the directory layout for the following:"
msgstr "この例では、以下のようなディレクトリーレイアウトを示しています。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:244
#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:306
msgid "``network_os``: myos"
msgstr "``network_os``: myos"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:245
#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:307
msgid "``resource``: interfaces"
msgstr "``resource``: interfaces"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:302
msgid "Role directory layout"
msgstr "ロールディレクトリーのレイアウト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:304
msgid "This example displays the role directory layout for the following:"
msgstr "この例では、以下のロールのディレクトリーレイアウトを表示しています。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:358
msgid "Using the collection"
msgstr "コレクションの使用"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:360
msgid "This example shows how to use the generated collection in a playbook:"
msgstr "以下の例は、生成されたコレクションを Playbook で使用する方法を示しています。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:378
msgid "Using the role"
msgstr "ロールの使用"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:380
msgid "This example shows how to use the generated role in a playbook:"
msgstr "以下の例は、生成されたロールを Playbook で使用する方法を示しています。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:402
msgid "Resource module structure and workflow"
msgstr "リソースモジュール構造およびワークフロー"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:404
msgid "The resource module structure includes the following components:"
msgstr "リソースモジュール構造には、以下のコンポーネントが含まれます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:413
msgid "Module"
msgstr "モジュール"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:407
msgid "``library/<ansible_network_os>_<resource>.py``."
msgstr "``library/<ansible_network_os>_<resource>.py``。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:408
msgid "Imports the ``module_utils`` resource package and calls ``execute_module`` API:"
msgstr "``module_utils`` リソースパッケージをインポートし、``execute_module`` API を呼び出します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:417
msgid "Module argspec"
msgstr "モジュールの argspec"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:416
msgid "``module_utils/<ansible_network_os>/argspec/<resource>/``."
msgstr "``module_utils/<ansible_network_os>/argspec/<resource>/``。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:417
msgid "Argspec for the resource."
msgstr "リソースの argspec"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:423
msgid "Facts"
msgstr "ファクト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:420
msgid "``module_utils/<ansible_network_os>/facts/<resource>/``."
msgstr "``module_utils/<ansible_network_os>/facts/<resource>/``。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:421
msgid "Populate facts for the resource."
msgstr "リソースのファクトを入力します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:422
msgid "Entry in ``module_utils/<ansible_network_os>/facts/facts.py`` for ``get_facts`` API to keep ``<ansible_network_os>_facts`` module and facts gathered for the resource module in sync for every subset."
msgstr "すべてのサブセットに対して同期するリソースモジュール用に収集された ``<ansible_network_os>_facts`` モジュールおよびファクトを保持する ``get_facts`` API の ``module_utils/<ansible_network_os>/facts/facts.py`` エントリー。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:423
msgid "Entry of Resource subset in FACTS_RESOURCE_SUBSETS list in ``module_utils/<ansible_network_os>/facts/facts.py`` to make facts collection work."
msgstr "``module_utils/<ansible_network_os>/facts/facts.py`` の FACTS_RESOURCE_SUBSETS 一覧でリソースサブセットのエントリー。ファクトコレクションを機能させます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:430
msgid "Module package in module_utils"
msgstr "module_utils のモジュールパッケージ"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:426
msgid "``module_utils/<ansible_network_os>/<config>/<resource>/``."
msgstr "``module_utils/<ansible_network_os>/<config>/<resource>/``。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:427
msgid "Implement ``execute_module`` API that loads the configuration to device and generates the result with ``changed``, ``commands``, ``before`` and ``after`` keys."
msgstr "設定を読み込む ``execute_module`` API を実装し、``changed`` キー、``commands`` キー、``before`` キー、および ``after`` キーで結果を生成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:428
msgid "Call ``get_facts`` API that returns the ``<resource>`` configuration facts or return the difference if the device has onbox diff support."
msgstr "``<resource>`` 設定のファクトを返す ``get_facts`` API を呼び出すか、デバイスに onbox diff サポートがある場合はその相違点を返します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:429
msgid "Compare facts gathered and given key-values if diff is not supported."
msgstr "diff がサポートされていない場合は、収集されるファクトと、指定されるキー/値を比較します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:430
msgid "Generate final configuration."
msgstr "最後の設定を生成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:434
msgid "Utils"
msgstr "ユーティリティー"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:433
msgid "``module_utils/<ansible_network_os>/utils``."
msgstr "``module_utils/<ansible_network_os>/utils``。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:434
msgid "Utilities for the ``<ansible_network_os>`` platform."
msgstr "``<ansible_network_os>`` プラットフォームのユーティリティー。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:439
msgid "Running  ``ansible-test sanity`` and ``tox`` on resource modules"
msgstr "リソースモジュールでの ``ansible-test sanity`` および ``tox`` の実行"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:441
msgid "You should run ``ansible-test sanity`` and ``tox -elinters`` from the collection root directory before pushing your PR to an Ansible-maintained collection. The CI runs both and will fail if these tests fail. See :ref:`developing_testing` for details on ``ansible-test sanity``."
msgstr "プル要求を Ansible で管理されたコレクションにプッシュする前に、コレクションルートディレクトリーから ``ansible-test sanity`` および ``tox -elinters`` を実行する必要があります。CI はその両方を実行し、このテストに失敗すると失敗します。``ansible-test sanity`` の詳細は、「:ref:`developing_testing`」を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:443
msgid "To install the necessary packages:"
msgstr "必要なパッケージをインストールするには、以下を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:445
msgid "Ensure you have a valid Ansible development environment configured. See :ref:`environment_setup` for details."
msgstr "有効な Ansible 開発環境が設定されていることを確認してください。詳細は :ref:`environment_setup` を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:446
msgid "Run ``pip install -r requirements.txt`` from the collection root directory."
msgstr "コレクションの root ディレクトリーから ``pip install -r requirements.txt`` を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:449
msgid "Running ``tox -elinters``:"
msgstr "``tox -elinters`` の実行:"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:451
msgid "Reads :file:`tox.ini` from the collection root directory and installs required dependencies (such as ``black`` and ``flake8``)."
msgstr "コレクションルートディレクトリーから :file:`tox.ini` を読み込み、必要な依存関係 (例: ``black``、``flake8``) をインストールします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:452
msgid "Runs these with preconfigured options (such as line-length and ignores.)"
msgstr "事前設定されたオプション (line-length や ignore など) を指定して、これらのコマンドを実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:453
msgid "Runs  ``black`` in check mode to show  which files will be formatted without actually formatting them."
msgstr "``black`` をチェックモードで実行し、実際にフォーマットされることなくどのファイルをフォーマットするかを表示します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:456
msgid "Testing resource modules"
msgstr "リソースモジュールのテスト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:458
msgid "The tests rely on a role generated by the resource module builder. After changes to the resource module builder, the role should be regenerated and the tests modified and run as needed. To generate the role after changes:"
msgstr "テストは、リソースモジュールビルダーが生成したロールに依存します。リソースモジュールビルダーへの変更後に、ロールを再生成し、必要に応じてテストが変更され、実行される必要があります。変更後にロールを生成するには、以下を行います。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:472
msgid "Resource module integration tests"
msgstr "リソースモジュール統合テスト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:474
msgid "High-level integration test requirements for new resource modules are as follows:"
msgstr "新しいリソースモジュールのハイレベル統合テスト要件は次のとおりです。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:476
msgid "Write a test case for every state."
msgstr "すべての状態についてテストケースを作成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:477
msgid "Write additional test cases to test the behavior of the module when an empty ``config.yaml`` is given."
msgstr "空の ``config.yaml`` が指定されている場合にモジュールの動作をテストするために、追加のテストケースを作成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:478
msgid "Add a round trip test case. This involves a ``merge`` operation, followed by ``gather_facts``, a ``merge`` update with additional configuration, and then reverting back to the base configuration using the previously gathered facts with the ``state`` set to  ``overridden``."
msgstr "ラウンドトリップテストケースを追加します。これには ``merge`` の操作が含まれ、続いて ``gather_facts`` 、``merge`` が追加の構成で更新され、その後、``state`` が ``overridden`` に設定された状態で、以前に収集したファクトを使用して基本構成に戻ります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:479
msgid "Wherever applicable, assertions should check after and before ``dicts`` against a hard coded Source of Truth."
msgstr "該当する場合、アサーションは、ハードコードされた信頼できる唯一のソースに対して ``dicts`` の前後で確認する必要があります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:483
msgid "We use Zuul as the CI to run the integration test."
msgstr "Zuul を CI として使用し、統合テストを実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:485
msgid "To view the report, click :guilabel:`Details` on the CI comment in the PR"
msgstr "レポートを表示するには、プル要求の CI コメントにある :guilabel:`Details` をクリックします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:486
msgid "To view a failure report,  click :guilabel:`ansible/check` and select the failed test."
msgstr "障害レポートを表示するには、:guilabel:`ansible/check` をクリックし、失敗したテストを選択します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:487
msgid "To view logs while the test is running, check for your PR number in the `Zull status board <https://dashboard.zuul.ansible.com/t/ansible/status>`_."
msgstr "テストの実行中にログを表示するには、`Zull 状態ボード <https://dashboard.zuul.ansible.com/t/ansible/status>`_ で プル要求番号を確認します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:488
msgid "To fix static test failure locally, run the  :command:`tox -e black` **inside the root folder of collection**."
msgstr "静的テストの失敗をローカルで修正するには、:command:`tox -e black` を、**コレクションのルートディレクトリー内** で実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:490
msgid "To view The Ansible run logs and debug test failures:"
msgstr "Ansible の実行ログおよびデバッグテストの失敗を表示するには、以下を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:492
msgid "Click the failed job to get the summary, and click :guilabel:`Logs` for the log."
msgstr "失敗したジョブをクリックしてサマリーを取得し、ログの :guilabel:`Logs` をクリックします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:493
msgid "Click :guilabel:`console` and scroll down to find the failed test."
msgstr ":guilabel:`console` をクリックし、スクロールダウンして失敗したテストを見つけます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:494
msgid "Click :guilabel:`>` next to the failed test for complete details."
msgstr "詳細は、失敗したテストの横にある :guilabel:`>` をクリックします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:498
msgid "Integration test structure"
msgstr "統合テスト構造"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:500
msgid "Each test case should generally follow this pattern:"
msgstr "通常、各テストケースは、以下のパターンに従います。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:502
msgid "setup —> test —> assert —> test again (for idempotency) —> assert —> tear down (if needed) -> done. This keeps test playbooks from becoming monolithic and difficult to troubleshoot."
msgstr "設定 —> テスト —> アサート —> 再テスト (冪等性) —> アサート —> 分解 (必要な場合) -> 完了。これにより、テスト Playbook がモノリシックになり、トラブルシューティングが困難になります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:503
msgid "Include a name for each task that is not an assertion. You can add names to assertions as well, but it is easier to identify the broken task within a failed test if you add a name for each task."
msgstr "アサーションではない各タスクの名前を含めます。名前をアサーションに追加できますが、各タスクの名前を追加すると、失敗したテスト内では、破損したタスクを特定するのが容易になります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:504
msgid "Files containing test cases must end in ``.yaml``"
msgstr "テストケースを含むファイルは ``.yaml`` で終了する必要があります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:507
msgid "Implementation"
msgstr "実装"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:509
msgid "For platforms that support ``connection: local`` *and* ``connection: network_cli``  use the following guidance:"
msgstr "``connection: local`` *および* ``connection: network_cli`` をサポートするプラットフォームについては、以下のガイダンスを使用します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:511
msgid "Name the :file:`targets/` directories after the module name."
msgstr "モジュール名の後に :file:`targets/` ディレクトリーに名前を付けます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:512
msgid "The :file:`main.yaml` file should just reference the transport."
msgstr ":file:`main.yaml` ファイルは、トランスポートを参照するだけです。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:514
msgid "The following example walks through the integration tests for the ``vyos.vyos.vyos_l3_interfaces`` module in the `vyos.vyos <https://github.com/ansible-collections/vyos.vyos/tree/main/tests/integration>`_ collection:"
msgstr "以下の例では、`vyos.vyos <https://github.com/ansible-collections/vyos.vyos/tree/main/tests/integration>`_ コレクションの ``vyos.vyos.vyos_l3_interfaces`` モジュールの統合テストを行います。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:516
msgid "``test/integration/targets/vyos_l3_interfaces/tasks/main.yaml``"
msgstr "``test/integration/targets/vyos_l3_interfaces/tasks/main.yaml``"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:525
msgid "``test/integration/targets/vyos_l3_interfaces/tasks/cli.yaml``"
msgstr "``test/integration/targets/vyos_l3_interfaces/tasks/cli.yaml``"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:552
msgid "``test/integration/targets/vyos_l3_interfaces/tests/cli/overridden.yaml``"
msgstr "``test/integration/targets/vyos_l3_interfaces/tests/cli/overridden.yaml``"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:620
msgid "Detecting test resources at runtime"
msgstr "ランタイム時のテストリソースの検出"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:622
msgid "Your tests should detect resources (such as interfaces) at runtime rather than hard-coding them into the test. This allows the test to run on a variety of systems."
msgstr "テストは、(インターフェースなどの) リソースをテストにハードコーディングするのではなく、ランタイム時にリソースを検出する必要があります。これにより、テストはさまざまなシステムで実行できます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:624
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:203
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:262
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:298
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:327
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:358
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:405
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:611
msgid "For example:"
msgstr "たとえば、以下のようになります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:648
msgid "See the complete test example of this at https://github.com/ansible-collections/cisco.nxos/blob/main/tests/integration/targets/prepare_nxos_tests/tasks/main.yml."
msgstr "https://github.com/ansible-collections/cisco.nxos/blob/main/tests/integration/targets/prepare_nxos_tests/tasks/main.yml. で、このテストの完全例を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:652
msgid "Running network integration tests"
msgstr "ネットワーク統合テストの実行"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:654
msgid "Ansible uses Zuul to run an integration test suite on every PR, including new tests introduced by that PR. To find and fix problems in network modules, run the network integration test locally before you submit a PR."
msgstr "Ansible は Zuul を使用して、すべてのプル要求で、プル要求によって導入された新規テストを含む統合テストスイートを実行します。ネットワークモジュールで問題を特定して修正するには、プル要求を送信する前にネットワーク統合テストをローカルで実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:657
msgid "First, create an inventory file that points to your test machines. The inventory group should match the platform name (for example, ``eos``, ``ios``):"
msgstr "まず、テストマシンを参照するインベントリーファイルを作成します。インベントリーグループは、プラットフォーム名と一致する必要があります (例: ``eos``、``ios``)。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:666
msgid "To run these network integration tests, use ``ansible-test network-integration --inventory </path/to/inventory> <tests_to_run>``:"
msgstr "これらのネットワーク統合テストを実行するには、``ansible-test network-integration --inventory </path/to/inventory> <tests_to_run>`` を使用します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:675
msgid "To run all network tests for a particular platform:"
msgstr "特定のプラットフォームでネットワークテストをすべて実行するには、次を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:681
msgid "This example will run against all ``vyos`` modules. Note that ``vyos_.*`` is a regex match, not a bash wildcard - include the `.` if you modify this example."
msgstr "この例は、すべての ``vyos`` モジュールに対して実行します。``vyos_.*`` は、bash ワイルドカードではなく、正規表現一致であることに注意してください。この例を修正する場合は `.` を含むようにしてください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:683
msgid "To run integration tests for a specific module:"
msgstr "特定のモジュールに対して統合テストを実行するには、次を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:689
msgid "To run a single test case on a specific module:"
msgstr "特定のモジュールでテストケースを 1 つ実行するには、次を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:696
msgid "To run integration tests for a specific transport:"
msgstr "特定のトランスポートで統合テストを実行するには、次を実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:706
msgid "See `test/integration/targets/nxos_bgp/tasks/main.yaml <https://github.com/ansible-collections/cisco.nxos/blob/main/tests/integration/targets/nxos_bgp/tasks/main.yaml>`_ for how this is implemented in the tests."
msgstr "テストに実装される方法は、「`test/integration/targets/nxos_bgp/tasks/main.yaml <https://github.com/ansible-collections/cisco.nxos/blob/main/tests/integration/targets/nxos_bgp/tasks/main.yaml>`_」を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:708
msgid "For more options:"
msgstr "その他のオプション:"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:714
msgid "If you need additional help or feedback, reach out in ``#ansible-network`` on Freenode."
msgstr "本書で示したもの以外にヘルプやフィードバックが必要な場合は、Freenode の ``#ansible-network`` にアクセスしてください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:717
msgid "Unit test requirements"
msgstr "ユニットテストの要件"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:719
msgid "High-level unit test requirements that new resource modules should follow:"
msgstr "新しいリソースモジュールが従う高レベルのユニットテスト要件は以下のようになります。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:721
msgid "Write test cases for all the states with all possible combinations of config values."
msgstr "設定値の組み合わせ可能なすべての状態についてテストケースを作成します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:722
msgid "Write test cases to test the error conditions ( negative scenarios)."
msgstr "テストケースを作成し、エラー条件 (負のシナリオ) をテストします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:723
msgid "Check the  value of ``changed`` and ``commands`` keys in every test case."
msgstr "すべてのテストケースで ``changed`` キーおよび ``commands`` キーの値を確認します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:725
msgid "We run all unit test cases on our Zuul test suite, on the latest python version supported by our CI setup."
msgstr "CI 設定でサポートされる最新の python バージョンで、Zuul テストスイートですべてのユニットテストケースを実行します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:727
msgid "Use the :ref:`same procedure <using_zuul_resource_modules>` as the integration tests to view Zuul unit tests reports and logs."
msgstr ":ref:`同じ手順 <using_zuul_resource_modules>` を統合テストとして使用し、Zuul ユニットテストのレポートおよびログを表示します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:729
msgid "See  :ref:`unit module testing <testing_units_modules>` for general unit test details."
msgstr "一般的なユニットテストの詳細は、「:ref:`ユニットモジュールのテスト <testing_units_modules>`」を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:735
msgid "Example: Unit testing Ansible network resource modules"
msgstr "例: Ansible ネットワークリソースモジュールのユニットテスト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:738
msgid "This section walks through an example of how to develop unit tests for Ansible resource modules."
msgstr "本セクションでは、Ansible リソースモジュールのユニットテストを開発する方法の例を説明します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:741
msgid "See :ref:`testing_units` and :ref:`testing_units_modules` for general documentation on Ansible unit tests for modules. Please read those pages first to understand unit tests and why and when you should use them."
msgstr "モジュール向けの Ansible ユニットテストの一般的なドキュメントは、「:ref:`testing_units`」および「:ref:`testing_units_modules`」を参照してください。ユニットテスト、および使用する理由およびその方法を理解するには、まずこれらのページをお読みください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:746
msgid "Using mock objects to unit test Ansible network resource modules"
msgstr "モック (模擬) オブジェクトを使用した Ansible ネットワークリソースモジュールのユニットテスト"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:749
msgid "`Mock objects <https://docs.python.org/3/library/unittest.mock.html>`_ can be very useful in building unit tests for special or difficult cases, but they can also lead to complex and confusing coding situations.  One good use for mocks would be to simulate an API. The ``mock`` Python package is bundled with Ansible (use ``import units.compat.mock``)."
msgstr "`モックオブジェクト <https://docs.python.org/3/library/unittest.mock.html>`_ は、特殊なケースや難しいケースのユニットテストを構築するのに非常に便利ですが、複雑で理解しづらいコーディングになってしまうこともあります。モックの使用方法として適切なものの 1 つに、API のシミュレートがあります。``mock`` Python パッケージは、Ansible にバンドルされています (``import units.compat.mock`` を使用)。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:755
msgid "You can mock the device connection and output from the device as follows:"
msgstr "以下のように、デバイスの接続とデバイスからの出力を模倣できます。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:789
msgid "The facts file of the module now includes a new method, ``get_device_data``. Call ``get_device_data`` here to emulate the device output."
msgstr "モジュールのファクトファイルに新しいメソッド ``get_device_data`` が追加されました。ここで ``get_device_data`` を呼び出して、デバイスの出力をエミュレートします。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:793
msgid "Mocking device data"
msgstr "デバイスデータの模倣"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:795
msgid "To mock fetching results from devices or provide other complex data structures that come from external libraries, you can use ``fixtures`` to read in pre-generated data. The text files for this pre-generated data live in ``test/units/modules/network/PLATFORM/fixtures/``. See for example the `eos_l2_interfaces.cfg file <https://github.com/ansible-collections/arista.eos/blob/main/tests/unit/modules/network/eos/fixtures/eos_l2_interfaces_config.cfg>`_."
msgstr "デバイスからの結果の取得や、外部ライブラリーからの複雑なデータ構造の提供を模倣するために、``fixtures`` を使用して事前に生成されたデータを読み込むことができます。この事前に生成されたデータのテキストファイルは、``test/units/modules/network/PLATFORM/fixtures/`` にあります。たとえば、`eos_l2_interfaces.cfg file <https://github.com/ansible-collections/arista.eos/blob/main/tests/unit/modules/network/eos/fixtures/eos_l2_interfaces_config.cfg>`_ の例を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:798
msgid "Load data using the ``load_fixture`` method and set this data as the return value of the ``get_device_data`` method in the facts file:"
msgstr "``load_fixture`` メソッドを使用してデータを読み込み、このデータをファクトファイルの ``get_device_data`` メソッドの戻り値として設定します。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:808
msgid "See the unit test file `test_eos_l2_interfaces <https://github.com/ansible-collections/arista.eos/blob/main/tests/unit/modules/network/eos/test_eos_l2_interfaces.py>`_ for a practical example."
msgstr "実用的な例は、ユニットテストファイル `test_eos_l2_interfaces <https://github.com/ansible-collections/arista.eos/blob/main/tests/unit/modules/network/eos/test_eos_l2_interfaces.py>`_ を参照してください。"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:814
msgid ":ref:`testing_units`"
msgstr ":ref:`testing_units`"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:815
msgid "Deep dive into developing unit tests for Ansible modules"
msgstr "Ansible モジュールのユニットテスト開発を深く掘り下げて調査"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:816
msgid ":ref:`testing_running_locally`"
msgstr ":ref:`testing_running_locally`"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:817
msgid "Running tests locally including gathering and reporting coverage data"
msgstr "カバレージデータの収集とレポートを含む、ローカルでのテストの実行"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:818
msgid ":ref:`developing_modules_general`"
msgstr ":ref:`developing_modules_general`"

#: ../../rst/network/dev_guide/developing_resource_modules_network.rst:819
msgid "Get started developing a module"
msgstr "モジュール開発を始める"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:6
msgid "Documenting new network platforms"
msgstr "新しいネットワークプラットフォームのドキュメント化"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:11
msgid "When you create network modules for a new platform, or modify the connections provided by an existing network platform(such as ``network_cli`` and ``httpapi``), you also need to update  the :ref:`settings_by_platform` table and add or modify the Platform Options file for your platform."
msgstr "新しいプラットフォーム用のネットワークモジュールを作成する場合や、既存のネットワークプラットフォーム (``network_cli``、``httpapi`` など) が提供する接続を変更する場合は、:ref:`settings_by_platform` テーブルを更新して、プラットフォームの Platform Options ファイルを追加または変更することも必要です。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:13
msgid "You should already have documented each module as described in :ref:`developing_modules_documenting`."
msgstr "各モジュールは、「:ref:`developing_modules_documenting`」で説明されているように、すでに文書化されている必要があります。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:16
msgid "Modifying the platform options table"
msgstr "プラットフォームオプションテーブルの変更"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:18
msgid "The :ref:`settings_by_platform` table is a convenient summary of the connections options provided by each network platform that has modules in Ansible. Add a row for your platform to this table, in alphabetical order.  For example:"
msgstr ":ref:`settings_by_platform` テーブルは、Ansible にモジュールがある各ネットワークプラットフォームが提供する接続オプションの便利な概要です。お使いのプラットフォームの行をアルファベット順に追加します。以下に例を示します。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:25
msgid "Ensure that the table stays formatted correctly. That is:"
msgstr "テーブルの形式が正しく表示されていることを確認します。つまり、以下のようになります。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:27
msgid "Each row is inserted in alphabetical order."
msgstr "各行はアルファベット順に挿入されます。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:28
msgid "The cell division ``|`` markers line up with the ``+`` markers."
msgstr "セル分割マーカー ``|`` と ``+`` マーカーの位置は同じになります。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:29
msgid "The check marks appear only for the connection types provided by the network modules."
msgstr "このチェックマークは、ネットワークモジュールが提供する接続タイプに限り表示されます。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:34
msgid "Adding a platform-specific options section"
msgstr "プラットフォーム固有のオプションセクションの追加"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:36
msgid "The platform- specific sections are individual ``.rst`` files that provide more detailed information for the users of your network platform modules.   Name your new file ``platform_<name>.rst`` (for example, ``platform_myos.rst``).  The platform name should match the module prefix. See `platform_eos.rst <https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/network/user_guide/platform_eos.rst>`_ and :ref:`eos_platform_options` for an example of the details you should provide in your platform-specific options section."
msgstr "プラットフォーム固有のセクションは、ネットワークプラットフォームモジュールのユーザーに関する詳細情報を提供する個別の ``.rst`` ファイルです。新しいファイル ``platform_<name>.rst`` に名前を付けます (例: ``platform_myos.rst``)。プラットフォーム名はモジュール接頭辞と一致させる必要があります。プラットフォーム固有のオプションセクションに指定する必要のある詳細例は、「`platform_eos.rst <https://github.com/ansible/ansible/blob/devel/docs/docsite/rst/network/user_guide/platform_eos.rst>`_」および「:ref:`eos_platform_options`」を参照してください。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:38
msgid "Your platform-specific section should include the following:"
msgstr "プラットフォーム固有のセクションには、以下のセクションが含まれている必要があります。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:40
msgid "**Connections available table** - a deeper dive into each connection type, including details on credentials, indirect access, connections settings, and enable mode."
msgstr "**接続可能なテーブル** - 認証情報、間接アクセス、接続設定、有効化モードの詳細など、各接続タイプの詳細。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:41
msgid "**How to use each connection type** - with working examples of each connection type."
msgstr "**各接続タイプの使用方法** - 各接続タイプの作業例を含む。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:43
msgid "If your network platform supports SSH connections, also include the following at the bottom of your ``.rst`` file:"
msgstr "ネットワークプラットフォームが SSH 接続に対応している場合は、``.rst`` ファイルの下部に以下も追加します。"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:50
msgid "Adding your new file to the table of contents"
msgstr "新規ファイルのコンテンツを表へ追加"

#: ../../rst/network/dev_guide/documenting_modules_network.rst:52
msgid "As a final step, add your new file in alphabetical order in the ``platform_index.rst`` file. You should then build the documentation to verify your additions. See :ref:`community_documentation_contributions` for more details."
msgstr "最終ステップとして、``platform_index.rst`` ファイルの新しいファイルをアルファベット順に追加します。次に、ドキュメントをビルドして、追加した内容を確認する必要があります。詳細は「:ref:`community_documentation_contributions`」を参照してください。"

#: ../../rst/network/dev_guide/index.rst:5
msgid "Network Developer Guide"
msgstr "ネットワーク開発者ガイド"

#: ../../rst/network/dev_guide/index.rst:7
msgid "Welcome to the Developer Guide for Ansible Network Automation!"
msgstr "ネットワークを自動化する開発者向けガイドへようこそ"

#: ../../rst/network/dev_guide/index.rst:9
#: ../../rst/network/getting_started/index.rst:15
#: ../../rst/network/user_guide/index.rst:9
msgid "**Who should use this guide?**"
msgstr "**本ガイドの対象者**"

#: ../../rst/network/dev_guide/index.rst:11
msgid "If you want to extend Ansible for Network Automation by creating a module or plugin, this guide is for you. This guide is specific to networking. You should already be familiar with how to create, test, and document modules and plugins, as well as the prerequisites for getting your module or plugin accepted into the main Ansible repository.  See the  :ref:`developer_guide` for details. Before you proceed, please read:"
msgstr "ネットワーク自動化のために、モジュールやプラグインを作成して Ansible を拡張する場合は、本ガイドをお勧めします。このガイドは、ネットワークに特化しています。モジュールやプラグインの作成、テスト、文書化の方法や、作成したモジュールやプラグインを Ansible のメインリポジトリーに受け入れてもらうための前提条件については、すでにご存知のことと思います。詳細は、「:ref:`developer_guide`」を参照してください。先に進む前に、以下をお読みください。"

#: ../../rst/network/dev_guide/index.rst:13
msgid "How  to :ref:`add a custom plugin or module locally <developing_locally>`."
msgstr ":ref:`カスタムプラグインまたはモジュールをローカルに追加する <developing_locally>` 方法"

#: ../../rst/network/dev_guide/index.rst:14
msgid "How to figure out if :ref:`developing a module is the right approach <module_dev_should_you>` for my use case."
msgstr "個別のユースケースで :ref:`モジュールを開発することが正しいアプローチ <module_dev_should_you>` かどうかを判断する方法。"

#: ../../rst/network/dev_guide/index.rst:15
msgid "How to :ref:`set up my Python development environment <environment_setup>`."
msgstr ":ref:`Python 開発環境を設定する <environment_setup>` 方法"

#: ../../rst/network/dev_guide/index.rst:16
msgid "How to :ref:`get started writing a module <developing_modules_general>`."
msgstr ":ref:`モジュール作成を開始する <developing_modules_general>` 方法"

#: ../../rst/network/dev_guide/index.rst:19
msgid "Find the network developer task that best describes what you want to do:"
msgstr "お客様が必要なことを最も適切に説明しているネットワーク開発者タスクを選択してください。"

#: ../../rst/network/dev_guide/index.rst:21
msgid "I want to :ref:`develop a network resource module <developing_resource_modules>`."
msgstr ":ref:`ネットワークリソースモジュールを開発 <developing_resource_modules>` したいです。"

#: ../../rst/network/dev_guide/index.rst:22
msgid "I want to :ref:`develop a network connection plugin <developing_plugins_network>`."
msgstr ":ref:`ネットワーク接続プラグインを開発 <developing_plugins_network>` したいです。"

#: ../../rst/network/dev_guide/index.rst:23
msgid "I want to :ref:`document my set of modules for a network platform <documenting_modules_network>`."
msgstr ":ref:`ネットワークプラットフォームのモジュールセットを文書化 <documenting_modules_network>` したいです。"

#: ../../rst/network/dev_guide/index.rst:25
msgid "If you prefer to read the entire guide, here's a list of the pages in order."
msgstr "本ガイドをすべて読む場合は、以下に示す順番でページを表示してください。"

#: ../../rst/network/getting_started/basic_concepts.rst:3
msgid "Basic Concepts"
msgstr "基本的な概念"

#: ../../rst/network/getting_started/basic_concepts.rst:5
msgid "These concepts are common to all uses of Ansible, including network automation. You need to understand them to use Ansible for network automation. This basic introduction provides the background you need to follow the examples in this guide."
msgstr "この概念は、ネットワーク自動化を含む Ansible のすべての用途に共通しています。ネットワーク自動化のためにAnsibleを使用するには、これらを理解する必要があります。この基本的な紹介は、本ガイドの例を理解するのに必要な背景を説明します。"

#: ../../rst/shared_snippets/basic_concepts.txt:2
msgid "Control node"
msgstr "コントロールノード"

#: ../../rst/shared_snippets/basic_concepts.txt:4
msgid "Any machine with Ansible installed. You can run Ansible commands and playbooks by invoking the ``ansible`` or ``ansible-playbook`` command from any control node. You can use any computer that has a Python installation as a control node - laptops, shared desktops, and servers can all run Ansible. However, you cannot use a Windows machine as a control node. You can have multiple control nodes."
msgstr "Ansible がインストールされているマシン。任意のコントロールノードから ``ansible`` コマンドまたは ``ansible-playbook`` コマンドを呼び出すことで、Ansible コマンドおよび Playbook を実行できます。Python がインストールされているコンピューターであれば、ラップトップ、共有ディスクトップ、サーバーなど、どのコンピューターでも Ansible を実行することができます。ただし、Windows マシンをコントロールノードとして使用することはできません。複数のコントロールノードを持つことができます。"

#: ../../rst/shared_snippets/basic_concepts.txt:7
msgid "Managed nodes"
msgstr "管理ノード"

#: ../../rst/shared_snippets/basic_concepts.txt:9
msgid "The network devices (and/or servers) you manage with Ansible. Managed nodes are also sometimes called \"hosts\". Ansible is not installed on managed nodes."
msgstr "Ansible で管理するネットワークデバイス (またはサーバー)。管理ノードは「ホスト」と呼ばれることもあります。Ansible は管理ノードにインストールされません。"

#: ../../rst/shared_snippets/basic_concepts.txt:12
msgid "Inventory"
msgstr "インベントリー"

#: ../../rst/shared_snippets/basic_concepts.txt:14
msgid "A list of managed nodes. An inventory file is also sometimes called a \"hostfile\". Your inventory can specify information like IP address for each managed node. An inventory can also organize managed nodes, creating and nesting groups for easier scaling. To learn more about inventory, see :ref:`the Working with Inventory<intro_inventory>` section."
msgstr "管理ノードの一覧。インベントリーファイルは「ホストファイル」と呼ばれることもあります。インベントリーは、各管理ノードに対して IP アドレスなどの情報を指定できます。インベントリーは管理ノードを整理でき、スケーリングが容易になるグループの作成やネスト化が可能です。インベントリーの詳細は「:ref:`インベントリーでの作業 <intro_inventory>`」セクションを参照してください。"

#: ../../rst/shared_snippets/basic_concepts.txt:19
msgid "Collections are a distribution format for Ansible content that can include playbooks, roles, modules, and plugins. You can install and use collections through `Ansible Galaxy <https://galaxy.ansible.com>`_. To learn more about collections, see :ref:`collections`."
msgstr "コレクションは、Playbook、ロール、モジュール、プラグインを含む Ansible コンテンツのディストリビューション形式です。`Ansible Galaxy <https://galaxy.ansible.com>`_ でコレクションをインストールして使用することができます。コレクションの詳細は、「:ref:`collections`」を参照してください。"

#: ../../rst/shared_snippets/basic_concepts.txt:22
msgid "Modules"
msgstr "モジュール"

#: ../../rst/shared_snippets/basic_concepts.txt:24
msgid "The units of code Ansible executes. Each module has a particular use, from administering users on a specific type of database to managing VLAN interfaces on a specific type of network device. You can invoke a single module with a task, or invoke several different modules in a playbook. Starting in Ansible 2.10, modules are grouped in collections. For an idea of how many collections Ansible includes, take a look at the :ref:`list_of_collections`."
msgstr "Ansible が実行するコードの単位。各モジュールは、特定タイプのデータベースのユーザーを管理したり、特定タイプのネットワークデバイスの VLAN インターフェースを管理するなど、特定の用途に使用されます。タスクで 1 つのモジュールを起動したり、Playbook で複数のモジュールを起動したりすることができます。Ansible 2.10 以降、モジュールはコレクションとしてまとめられています。Ansible に含まれるコレクションの数は、「:ref:`list_of_collections`」を参照してください。"

#: ../../rst/shared_snippets/basic_concepts.txt:27
msgid "Tasks"
msgstr "タスク"

#: ../../rst/shared_snippets/basic_concepts.txt:29
msgid "The units of action in Ansible. You can execute a single task once with an ad hoc command."
msgstr "Ansible でのアクションの単位。アドホックコマンドを使用すると、単一のタスクを実行できます。"

#: ../../rst/shared_snippets/basic_concepts.txt:32
msgid "Playbooks"
msgstr "Playbook"

#: ../../rst/shared_snippets/basic_concepts.txt:34
msgid "Ordered lists of tasks, saved so you can run those tasks in that order repeatedly. Playbooks can include variables as well as tasks. Playbooks are written in YAML and are easy to read, write, share and understand. To learn more about playbooks, see :ref:`about_playbooks`."
msgstr "順番に並べられたタスクの一覧は保存されているため、その順番でタスクを繰り返し実行することができます。Playbook には、タスクだけでなく、変数も含めることができます。Playbook は YAML で記述されているため、読みやすく、書きやすく、共有しやすく、理解しやすい特徴があります。Playbook の詳細は、「:ref:`about_playbooks`」を参照してください。"

#: ../../rst/network/getting_started/first_inventory.rst:3
msgid "Build Your Inventory"
msgstr "インベントリーの構築"

#: ../../rst/network/getting_started/first_inventory.rst:5
msgid "Running a playbook without an inventory requires several command-line flags. Also, running a playbook against a single device is not a huge efficiency gain over making the same change manually. The next step to harnessing the full power of Ansible is to use an inventory file to organize your managed nodes into groups with information like the ``ansible_network_os`` and the SSH user. A fully-featured inventory file can serve as the source of truth for your network. Using an inventory file, a single playbook can maintain hundreds of network devices with a single command. This page shows you how to build an inventory file, step by step."
msgstr "インベントリーを使用せずに Playbook を実行するには、いくつかのコマンドラインフラグが必要です。また、単一のデバイスに対して Playbook を実行しても、同じ変更を手動で行うのに比べて効率が大きく向上するわけではありません。Ansible を最大限に活用するための次のステップは、インベントリーファイルを使用して、管理対象のノードを ``ansible_network_os`` や SSH ユーザーなどの情報を持つグループに整理することです。完全な機能を備えたインベントリーファイルは、ネットワークの唯一の信頼できるソースとなります。インベントリーファイルを使用すると、1 つの Playbook で数百のネットワークデバイスを 1 つのコマンドで管理できます。このページでは、インベントリーファイルを作成する方法を順を追って説明します。"

#: ../../rst/network/getting_started/first_inventory.rst:11
msgid "Basic inventory"
msgstr "基本的なインベントリー"

#: ../../rst/network/getting_started/first_inventory.rst:13
msgid "First, group your inventory logically. Best practice is to group servers and network devices by their What (application, stack or microservice), Where (datacenter or region), and When (development stage):"
msgstr "まず、インベントリーを論理的にグループ化します。ベストプラクティスは、サーバーおよびネットワークデバイスを、種類 (アプリケーション、スタック、またはマイクロサービス)、場所 (データセンタまたは地域)、および時期 (開発段階) でグループ化することです。"

#: ../../rst/network/getting_started/first_inventory.rst:15
msgid "**What**: db, web, leaf, spine"
msgstr "**種類**: db、web、leaf、spine"

#: ../../rst/network/getting_started/first_inventory.rst:16
msgid "**Where**: east, west, floor_19, building_A"
msgstr "**場所**: east、west、floor_19、building_A"

#: ../../rst/network/getting_started/first_inventory.rst:17
msgid "**When**: dev, test, staging, prod"
msgstr "**時期**: dev、test、staging、prod"

#: ../../rst/network/getting_started/first_inventory.rst:19
msgid "Avoid spaces, hyphens, and preceding numbers (use ``floor_19``, not ``19th_floor``) in your group names. Group names are case sensitive."
msgstr "グループ名にスペースまたはハイフンを使用しないでください。またグループ名は数値で始めないでください (``19th_floor``ではなく ``floor_19`` を使用)。グループ名は大文字と小文字を区別します。"

#: ../../rst/network/getting_started/first_inventory.rst:21
msgid "This tiny example data center illustrates a basic group structure. You can group groups using the syntax ``[metagroupname:children]`` and listing groups as members of the metagroup. Here, the group ``network`` includes all leafs and all spines; the group ``datacenter`` includes all network devices plus all webservers."
msgstr "この小さなデータセンターの例では、基本的なグループ構造を説明します。グループをグループ化するには、``[metagroupname:children]`` という構文を使い、グループをメタグループのメンバーとしてリストアップします。ここでは、``network`` というグループには、すべての leaf (リーフ) とすべての spine (スパイン) が含まれ、``datacenter`` というグループには、すべてのネットワークデバイスとすべての Web サーバーが含まれています。"

#: ../../rst/network/getting_started/first_inventory.rst:60
msgid "You can also create this same inventory in INI format."
msgstr "同じインベントリーを INI 形式で作成することもできます。"

#: ../../rst/network/getting_started/first_inventory.rst:86
msgid "Add variables to the inventory"
msgstr "インベントリーへの変数の追加"

#: ../../rst/network/getting_started/first_inventory.rst:88
msgid "Next, you can set values for many of the variables you needed in your first Ansible command in the inventory, so you can skip them in the ``ansible-playbook`` command. In this example, the inventory includes each network device's IP, OS, and SSH user. If your network devices are only accessible by IP, you must add the IP to the inventory file. If you access your network devices using hostnames, the IP is not necessary."
msgstr "次に、最初の Ansible コマンドで必要であった多くの変数の値をインベントリーに設定することで、``ansible-playbook`` コマンドでスキップできるようになります。この例では、インベントリーに各ネットワークデバイスの IP、OS、SSH ユーザーが含まれています。ネットワークデバイスに IP でしかアクセスできない場合は、インベントリーファイルに IP を追加する必要があります。ホスト名を使用してネットワークデバイスにアクセスする場合は、IP が必要ありません。"

#: ../../rst/network/getting_started/first_inventory.rst:137
msgid "Group variables within inventory"
msgstr "インベントリー内のグループ変数"

#: ../../rst/network/getting_started/first_inventory.rst:139
msgid "When devices in a group share the same variable values, such as OS or SSH user, you can reduce duplication and simplify maintenance by consolidating these into group variables:"
msgstr "グループ内のデバイスが、OS や SSH ユーザーなど、同じ変数値を共有している場合は、この値をグループ変数に統合することで、重複を減らし、メンテナンスを簡素化できます。"

#: ../../rst/network/getting_started/first_inventory.rst:185
msgid "Variable syntax"
msgstr "変数の構文"

#: ../../rst/network/getting_started/first_inventory.rst:187
msgid "The syntax for variable values is different in inventory, in playbooks, and in the ``group_vars`` files, which are covered below. Even though playbook and ``group_vars`` files are both written in YAML, you use variables differently in each."
msgstr "変数の値の構文は、インベントリー、Playbook、および ``group_vars`` ファイルで異なりますが、以下で説明します。Playbook と ``group_vars`` ファイルはどちらも YAML で記述されていますが、変数は YAML でそれぞれ異なります。"

#: ../../rst/network/getting_started/first_inventory.rst:189
msgid "In an ini-style inventory file you **must** use the syntax ``key=value`` for variable values: ``ansible_network_os=vyos.vyos.vyos``."
msgstr "ini 形式のインベントリーファイルで、変数値 ``ansible_network_os=vyos.vyos.vyos`` に構文 ``key=value`` を使用する **必要があります**。"

#: ../../rst/network/getting_started/first_inventory.rst:190
msgid "In any file with the ``.yml`` or ``.yaml`` extension, including playbooks and ``group_vars`` files, you **must** use YAML syntax: ``key: value``."
msgstr "Playbook および ``group_vars`` ファイルを含む ``.yml`` 拡張子または ``.yaml`` 拡張子を持つファイルでは、YAML 構文 ``key: value`` を使用する**必要があります**。"

#: ../../rst/network/getting_started/first_inventory.rst:192
msgid "In ``group_vars`` files, use the full ``key`` name: ``ansible_network_os: vyos.vyos.vyos``."
msgstr "``group_vars`` ファイルで、完全な ``key`` 名 (``ansible_network_os: vyos.vyos.vyos``) を使用します。"

#: ../../rst/network/getting_started/first_inventory.rst:193
msgid "In playbooks, use the short-form ``key`` name, which drops the ``ansible`` prefix: ``network_os: vyos.vyos.vyos``."
msgstr "Playbook では、``ansible`` の接頭辞を取り除いた短い形式の``key`` の名前を使用します (``network_os: vyos.vyos.vyos``)。"

#: ../../rst/network/getting_started/first_inventory.rst:197
msgid "Group inventory by platform"
msgstr "プラットフォームによるインベントリーのグループ化"

#: ../../rst/network/getting_started/first_inventory.rst:199
msgid "As your inventory grows, you may want to group devices by platform. This allows you to specify platform-specific variables easily for all devices on that platform:"
msgstr "インベントリーが大きくなるにつれ、プラットフォームでデバイスをグループ化できます。これにより、そのプラットフォームのすべてのデバイスに対してプラットフォーム固有の変数を簡単に指定できます。"

#: ../../rst/network/getting_started/first_inventory.rst:242
msgid "With this setup, you can run ``first_playbook.yml`` with only two flags:"
msgstr "この設定では、以下の 2 つのフラグを指定して ``first_playbook.yml`` を実行できます。"

#: ../../rst/network/getting_started/first_inventory.rst:248
msgid "With the ``-k`` flag, you provide the SSH password(s) at the prompt. Alternatively, you can store SSH and other secrets and passwords securely in your group_vars files with ``ansible-vault``. See :ref:`network_vault` for details."
msgstr "``-k`` フラグを使用して、プロンプトで SSH パスワードを指定します。これで、``ansible-vault`` で SSH と、その他のシークレットおよびパスワードを group_vars ファイルに安全に保存できます。詳細は「:ref:`network_vault`」を参照してください。"

#: ../../rst/network/getting_started/first_inventory.rst:251
msgid "Verifying the inventory"
msgstr "インベントリーの確認"

#: ../../rst/network/getting_started/first_inventory.rst:253
msgid "You can use the :ref:`ansible-inventory` CLI command to display the inventory as Ansible sees it."
msgstr "CLI コマンド :ref:`ansible-inventory` を使用すると、Ansible が確認できるようにインベントリーを表示できます。"

#: ../../rst/network/getting_started/first_inventory.rst:336
msgid "Protecting sensitive variables with ``ansible-vault``"
msgstr "``ansible-vault`` による機密変数の保護"

#: ../../rst/network/getting_started/first_inventory.rst:338
msgid "The ``ansible-vault`` command provides encryption for files and/or individual variables like passwords. This tutorial will show you how to encrypt a single SSH password. You can use the commands below to encrypt other sensitive information, such as database passwords, privilege-escalation passwords and more."
msgstr "``ansible-vault`` コマンドは、ファイルや、パスワードなどの個々の変数の暗号化を行います。このチュートリアルでは、1 つの SSH パスワードを暗号化する方法を紹介します。以下のコマンドを使用すると、データベースのパスワードや権限昇格のためのパスワードなど、その他の機密情報を暗号化することができます。"

#: ../../rst/network/getting_started/first_inventory.rst:340
msgid "First you must create a password for ansible-vault itself. It is used as the encryption key, and with this you can encrypt dozens of different passwords across your Ansible project. You can access all those secrets (encrypted values) with a single password (the ansible-vault password) when you run your playbooks. Here's a simple example."
msgstr "まず、ansible-vault 自体のパスワードを作成する必要があります。これは暗号化キーとして使用され、Ansible プロジェクト全体で何十もの異なるパスワードを暗号化することができます。Playbook を実行するときに、1 つのパスワード (ansible-vault パスワード) でこの全シークレット (暗号化された値) にアクセスできます。以下に簡単な例を示します。"

#: ../../rst/network/getting_started/first_inventory.rst:342
msgid "Create a file and write your password for ansible-vault to it:"
msgstr "ファイルを作成して、ansible-vault のパスワードを書き込みます。"

#: ../../rst/network/getting_started/first_inventory.rst:348
msgid "Create the encrypted ssh password for your VyOS network devices, pulling your ansible-vault password from the file you just created:"
msgstr "VyOS ネットワークデバイス用に暗号化された ssh パスワードを作成し、作成したファイルから ansible-vault パスワードをプルします。"

#: ../../rst/network/getting_started/first_inventory.rst:354
msgid "If you prefer to type your ansible-vault password rather than store it in a file, you can request a prompt:"
msgstr "ファイルに保存せずに ansible-vault パスワードを入力する必要がある場合は、プロンプトを要求できます。"

#: ../../rst/network/getting_started/first_inventory.rst:360
msgid "and type in the vault password for ``my_user``."
msgstr "また、``my_user`` に vault パスワードに入力します。"

#: ../../rst/network/getting_started/first_inventory.rst:362
msgid "The :option:`--vault-id <ansible-playbook --vault-id>` flag allows different vault passwords for different users or different levels of access. The output includes the user name ``my_user`` from your ``ansible-vault`` command and uses the YAML syntax ``key: value``:"
msgstr "option:`--vault-id <ansible-playbook --vault-id>` フラグを使用すると、ユーザーまたはアクセスレベルごとに異なる Vault パスワードを使用できます。出力には、``ansible-vault`` コマンドのユーザー名 ``my_user`` が含まれ、YAML 構文 ``key: value`` が使用されます。"

#: ../../rst/network/getting_started/first_inventory.rst:375
msgid "This is an example using an extract from a  YAML inventory, as the INI format does not support inline vaults:"
msgstr "INI 形式はインラインの vault に対応していないため、以下は YAML インベントリーから抽出を使用する例です。"

#: ../../rst/network/getting_started/first_inventory.rst:396
msgid "To use an inline vaulted variables with an INI inventory you need to store it in a 'vars' file in YAML format, it can reside in host_vars/ or group_vars/ to be automatically picked up or referenced from a play via ``vars_files`` or ``include_vars``."
msgstr "インラインの Vault 変数を INI インベントリーで使用するには、これを YAML 形式で「vars」ファイルに保存する必要があります。これは host_vars/ または group_vars/ に置かれ、``vars_files`` または ``include_vars`` で Play から自動的に取得または参照されます。"

#: ../../rst/network/getting_started/first_inventory.rst:399
msgid "To run a playbook with this setup, drop the ``-k`` flag and add a flag for your ``vault-id``:"
msgstr "この設定で Playbook を実行するには、``-k`` フラグを削除し、``vault-id`` のフラグを追加します。"

#: ../../rst/network/getting_started/first_inventory.rst:405
msgid "Or with a prompt instead of the vault password file:"
msgstr "または、vault パスワードファイルの代わりにプロンプトを使用します。"

#: ../../rst/network/getting_started/first_inventory.rst:411
msgid "To see the original value, you can use the debug module. Please note if your YAML file defines the `ansible_connection` variable (as we used in our example), it will take effect when you execute the command below. To prevent this, please make a copy of the file without the ansible_connection variable."
msgstr "元の値を確認するには、デバッグモジュールを使用できます。(この例で使用したように) YAML ファイルで `ansible_connection` 変数が定義されているかどうかに注意してください。以下のコマンドを実行すると有効になります。これを防ぐには、ansible_connection 変数を使用せずにファイルのコピーを作成してください。"

#: ../../rst/network/getting_started/first_inventory.rst:427
msgid "Vault content can only be decrypted with the password that was used to encrypt it. If you want to stop using one password and move to a new one, you can update and re-encrypt existing vault content with ``ansible-vault rekey myfile``, then provide the old password and the new password. Copies of vault content still encrypted with the old password can still be decrypted with old password."
msgstr "Vault のコンテンツは、暗号化に使用されたパスワードでのみ復号できます。1 つのパスワードの使用を停止して新しいパスワードに移動する場合は、``ansible-vault rekey myfile`` を使用して、既存の Valut コンテンツを更新して再暗号化でき、次に古いパスワードと新しいパスワードを入力します。古いパスワードで暗号化されたままの Vault コンテンツのコピーは、古いパスワードで復号できます。"

#: ../../rst/network/getting_started/first_inventory.rst:429
msgid "For more details on building inventory files, see :ref:`the introduction to inventory<intro_inventory>`; for more details on ansible-vault, see :ref:`the full Ansible Vault documentation<vault>`."
msgstr "インベントリーファイルの構築の詳細は、「:ref:`インベントリーの概要<intro_inventory>`」を参照してください。ansible-vault の詳細は、:ref:`Ansible Vault の完全ドキュメント<vault>` を参照してください。"

#: ../../rst/network/getting_started/first_inventory.rst:431
msgid "Now that you understand the basics of commands, playbooks, and inventory, it's time to explore some more complex Ansible Network examples."
msgstr "コマンド、Playbook、およびインベントリーの基本を理解したら、より複雑な Ansible Network の例をいくつか説明します。"

#: ../../rst/network/getting_started/first_playbook.rst:6
msgid "Run Your First Command and Playbook"
msgstr "最初のコマンドおよび Playbook の実行"

#: ../../rst/network/getting_started/first_playbook.rst:8
msgid "Put the concepts you learned to work with this quick tutorial. Install Ansible, execute a network configuration command manually, execute the same command with Ansible, then create a playbook so you can execute the command any time on multiple network devices."
msgstr "このクイックチュートリアルでは、これまで学んだ概念を実際に使ってみましょう。Ansible をインストールし、ネットワーク設定コマンドを手動で実行し、Ansible で同じコマンドを実行してから Playbook を作成するため、複数のネットワークデバイスでいつでもコマンドを実行できます。"

#: ../../rst/network/getting_started/first_playbook.rst:14
#: ../../rst/network/user_guide/network_best_practices_2.5.rst:13
msgid "Prerequisites"
msgstr "要件"

#: ../../rst/network/getting_started/first_playbook.rst:16
msgid "Before you work through this tutorial you need:"
msgstr "このチュートリアルを実行する前に、以下が必要になります。"

#: ../../rst/network/getting_started/first_playbook.rst:18
msgid "Ansible 2.10 (or higher) installed"
msgstr "Ansible 2.10 (以降) がインストールされている"

#: ../../rst/network/getting_started/first_playbook.rst:19
msgid "One or more network devices that are compatible with Ansible"
msgstr "Ansible と互換性のある 1 つ以上ネットワークデバイス"

#: ../../rst/network/getting_started/first_playbook.rst:20
msgid "Basic Linux command line knowledge"
msgstr "基本的な Linux コマンドラインの知識"

#: ../../rst/network/getting_started/first_playbook.rst:21
msgid "Basic knowledge of network switch & router configuration"
msgstr "ネットワークスイッチおよびルーター設定に関する基本知識"

#: ../../rst/network/getting_started/first_playbook.rst:24
msgid "Install Ansible"
msgstr "Ansible のインストール"

#: ../../rst/network/getting_started/first_playbook.rst:26
msgid "Install Ansible using your preferred method. See :ref:`installation_guide`. Then return to this tutorial."
msgstr "好みの方法で Ansible をインストールします。「:ref:`installation_guide`」を参照してください。その後、このチュートリアルに戻ります。"

#: ../../rst/network/getting_started/first_playbook.rst:28
msgid "Confirm the version of Ansible (must be >= 2.10):"
msgstr "Ansible のバージョンを確認します (2.10 以下である必要があります)。"

#: ../../rst/network/getting_started/first_playbook.rst:36
msgid "Establish a manual connection to a managed node"
msgstr "管理ノードへの手動接続の確立"

#: ../../rst/network/getting_started/first_playbook.rst:38
msgid "To confirm your credentials, connect to a network device manually and retrieve its configuration. Replace the sample user and device name with your real credentials. For example, for a VyOS router:"
msgstr "認証情報を確認するには、手動でネットワークデバイスに接続し、その設定を取得します。サンプルユーザー名とデバイス名を実際の認証情報に置き換えます。たとえば、VyOS ルーターの場合は以下のようになります。"

#: ../../rst/network/getting_started/first_playbook.rst:46
msgid "This manual connection also establishes the authenticity of the network device, adding its RSA key fingerprint to your list of known hosts. (If you have connected to the device before, you have already established its authenticity.)"
msgstr "この手動接続により、ネットワークデバイスの信頼性も確立され、既知のホストの一覧に RSA 鍵フィンガープリントが追加されます (以前にデバイスを接続したことがある場合は、その信頼性がすでに確立されています)。"

#: ../../rst/network/getting_started/first_playbook.rst:50
msgid "Run your first network Ansible command"
msgstr "最初のネットワーク Ansible コマンドの実行"

#: ../../rst/network/getting_started/first_playbook.rst:52
msgid "Instead of manually connecting and running a command on the network device, you can retrieve its configuration with a single, stripped-down Ansible command:"
msgstr "ネットワークデバイスでコマンドを手動で接続して実行する代わりに、1 つの削除済み Ansible コマンドで設定を取得できます。"

#: ../../rst/network/getting_started/first_playbook.rst:65
msgid "The flags in this command set seven values:"
msgstr "このコマンドのフラグは、7 つの値を設定します。"

#: ../../rst/network/getting_started/first_playbook.rst:59
msgid "the host group(s) to which the command should apply (in this case, all)"
msgstr "コマンドを適用するホストグループ (この場合は all)"

#: ../../rst/network/getting_started/first_playbook.rst:60
msgid "the inventory (-i, the device or devices to target - without the trailing comma -i points to an inventory file)"
msgstr "インベントリー (-i、ターゲットに設定するデバイス (最後のコンマがない -i はインベントリーファイルの指定がありません))"

#: ../../rst/network/getting_started/first_playbook.rst:61
msgid "the connection method (-c, the method for connecting and executing ansible)"
msgstr "接続方法 (-c、ansible の接続方法および実行方法)"

#: ../../rst/network/getting_started/first_playbook.rst:62
msgid "the user (-u, the username for the SSH connection)"
msgstr "ユーザー (-u、SSH 接続のユーザー名)"

#: ../../rst/network/getting_started/first_playbook.rst:63
msgid "the SSH connection method (-k, please prompt for the password)"
msgstr "SSH 接続の方法 (-k、パスワードのプロンプト有り)"

#: ../../rst/network/getting_started/first_playbook.rst:64
msgid "the module (-m, the Ansible module to run, using the fully qualified collection name (FQCN))"
msgstr "モジュール (-m、完全修飾コレクション名 (FQCN) を使用した、実行する Ansible モジュール)"

#: ../../rst/network/getting_started/first_playbook.rst:65
msgid "an extra variable ( -e, in this case, setting the network OS value)"
msgstr "追加変数 (-e、この場合はネットワーク OS 値の設定)"

#: ../../rst/network/getting_started/first_playbook.rst:67
msgid "NOTE: If you use ``ssh-agent`` with ssh keys, Ansible loads them automatically. You can omit ``-k`` flag."
msgstr "注記: ssh 鍵で ``ssh-agent`` を使用すると、Ansible により自動的に読み込まれます。``-k`` フラグは省略できます。"

#: ../../rst/network/getting_started/first_playbook.rst:71
msgid "If you are running Ansible in a virtual environment, you will also need to add the variable ``ansible_python_interpreter=/path/to/venv/bin/python``"
msgstr "仮想環境で Ansible を実行している場合は、変数 ``ansible_python_interpreter=/path/to/venv/bin/python`` を追加する必要もあります。"

#: ../../rst/network/getting_started/first_playbook.rst:75
msgid "Create and run your first network Ansible Playbook"
msgstr "最初のネットワークの Ansible Playbook の作成および実行"

#: ../../rst/network/getting_started/first_playbook.rst:77
msgid "If you want to run this command every day, you can save it in a playbook and run it with ``ansible-playbook`` instead of ``ansible``. The playbook can store a lot of the parameters you provided with flags at the command line, leaving less to type at the command line. You need two files for this - a playbook and an inventory file."
msgstr "このコマンドを毎日実行する場合は、Playbook に保存し、``ansible`` の代わりに ``ansible-playbook`` を使用して実行できます。Playbook には、コマンドラインでフラグを使用して指定した多くのパラメーターを保存できるため、コマンドラインで入力するパラメータが少なくなります。これを行うためには、Playbook およびインベントリーファイルの 2 つのファイルが必要です。"

#: ../../rst/network/getting_started/first_playbook.rst:79
msgid "Download :download:`first_playbook.yml <sample_files/first_playbook.yml>`, which looks like this:"
msgstr ":download:`first_playbook.yml <sample_files/first_playbook.yml>` をダウンロードします。これは、以下のようになります。"

#: ../../rst/network/getting_started/first_playbook.rst:84
msgid "The playbook sets three of the seven values from the command line above: the group (``hosts: all``), the connection method (``connection: ansible.netcommon.network_cli``) and the module (in each task). With those values set in the playbook, you can omit them on the command line. The playbook also adds a second task to show the config output. When a module runs in a playbook, the output is held in memory for use by future tasks instead of written to the console. The debug task here lets you see the results in your shell."
msgstr "Playbook では、上記のコマンドラインの 7 つの値のうちの 3 つ、つまりグループ (``hosts: all``)、接続方法 (``connection: ansible.netcommon.network_cli``)、モジュール (各タスク内) が設定されます。これらの値を Playbook で設定すると、コマンドラインで省略できます。この Playbook には、設定出力を表示する 2 番目のタスクも追加されています。モジュールが Playbook で実行すると、出力はコンソールに書き込まれるのではなく、将来のタスクで使用するためにメモリーに保持されます。ここでデバッグタスクを実行すると、シェルで結果を確認できます。"

#: ../../rst/network/getting_started/first_playbook.rst:86
msgid "Run the playbook with the command:"
msgstr "以下のコマンドを使用して Playbook を実行します。"

#: ../../rst/network/getting_started/first_playbook.rst:92
msgid "The playbook contains one play with two tasks, and should generate output like this:"
msgstr "Playbook には、2 つのタスクを持つプレイが 1 つ含まれており、次のような出力が生成されます。"

#: ../../rst/network/getting_started/first_playbook.rst:111
msgid "Now that you can retrieve the device config, try updating it with Ansible. Download :download:`first_playbook_ext.yml <sample_files/first_playbook_ext.yml>`, which is an extended version of the first playbook:"
msgstr "デバイス設定を取得できたので、Ansible で更新してみましょう。最初の Playbook の拡張バージョンである :download:`first_playbook_ext.yml <sample_files/first_playbook_ext.yml>` をダウンロードします。"

#: ../../rst/network/getting_started/first_playbook.rst:116
msgid "The extended first playbook has four tasks in a single play. Run it with the same command you used above. The output shows you the change Ansible made to the config:"
msgstr "拡張された最初の Playbook には、1 つのプレイに 4 つのタスクがあります。上記のコマンドと同じコマンドを使用して実行すると、出力には、Ansible が設定に加えた変更が表示されます。"

#: ../../rst/network/getting_started/first_playbook.rst:158
msgid "Gathering facts from network devices"
msgstr "ネットワークデバイスからのファクトの収集"

#: ../../rst/network/getting_started/first_playbook.rst:160
msgid "The ``gather_facts`` keyword now supports gathering network device facts in standardized key/value pairs. You can feed these network facts into further tasks to manage the network device."
msgstr "``gather_facts`` キーワードは、標準化された鍵と値のペアでネットワークデバイスのファクトの収集に対応します。これらのネットワークファクトを、ネットワークデバイスを管理する追加のタスクに指定できます。"

#: ../../rst/network/getting_started/first_playbook.rst:162
msgid "You can also use the new ``gather_network_resources`` parameter with the network ``*_facts`` modules (such as :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>`) to return just a subset of the device configuration, as shown below."
msgstr "また、新しい ``gather_network_resources`` パラメーターを、ネットワークの ``*_facts`` モジュール (:ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` など) とともに使用すると、以下のようにデバイス設定のサブセットのみを返すことができます。"

#: ../../rst/network/getting_started/first_playbook.rst:173
msgid "The playbook returns the following interface facts:"
msgstr "Playbook は以下のインターフェースのファクトを返します。"

#: ../../rst/network/getting_started/first_playbook.rst:210
msgid "Note that this returns a subset of what is returned by just setting ``gather_subset: interfaces``."
msgstr "これは、``gather_subset: interfaces`` の設定で返される内容のサブセットを返すことに注意してください。"

#: ../../rst/network/getting_started/first_playbook.rst:212
msgid "You can store these facts and use them directly in another task, such as with the :ref:`eos_interfaces <ansible_collections.arista.eos.eos_interfaces_module>` resource module."
msgstr "これらのファクトを保存し、:ref:`eos_interfaces <ansible_collections.arista.eos.eos_interfaces_module>` リソースモジュールなどの別のタスクで直接使用できます。"

#: ../../rst/network/getting_started/index.rst:23
msgid "Getting Started Guide"
msgstr "入門ガイド"

#: ../../rst/network/getting_started/index.rst:5
msgid "Network Getting Started"
msgstr "ネットワークスタートガイド"

#: ../../rst/network/getting_started/index.rst:7
msgid "Ansible collections support a wide range of vendors, device types, and actions, so you can manage your entire network with a single automation tool. With Ansible, you can:"
msgstr "Ansible コレクションは広範なベンダー、デバイスタイプ、アクションに対応しているため、1 つの自動化ツールでネットワーク全体を管理できます。Ansible では、以下を行うことができます。"

#: ../../rst/network/getting_started/index.rst:9
msgid "Automate repetitive tasks to speed routine network changes and free up your time for more strategic work"
msgstr "反復タスクを自動化して、ルーチンネットワークの変更を迅速化し、その時間をより戦略的な作業に割り当てます。"

#: ../../rst/network/getting_started/index.rst:10
msgid "Leverage the same simple, powerful, and agentless automation tool for network tasks that operations and development use"
msgstr "操作と開発で使用するネットワークタスクの両方に、同一の簡単で強力なエージェントレスの自動化ツールを使用します。"

#: ../../rst/network/getting_started/index.rst:11
msgid "Separate the data model (in a playbook or role) from the execution layer (via Ansible modules) to manage heterogeneous network devices"
msgstr "異機種環境にあるネットワークデバイスを管理するため、(Ansible モジュールにより) 実行レイヤーからデータモデル (Playbook またはロール) を分離します。"

#: ../../rst/network/getting_started/index.rst:12
msgid "Benefit from community and vendor-generated sample playbooks and roles to help accelerate network automation projects"
msgstr "ネットワーク自動化プロジェクトを加速化するコミュニティーおよびベンダーが生成したサンプルの Playbook およびロールを活用します。"

#: ../../rst/network/getting_started/index.rst:13
msgid "Communicate securely with network hardware over SSH or HTTPS"
msgstr "SSH または HTTPS を介してネットワークハードウェアとセキュアに通信します。"

#: ../../rst/network/getting_started/index.rst:17
msgid "This guide is intended for network engineers using Ansible for the first time. If you understand networks but have never used Ansible, work through the guide from start to finish."
msgstr "このガイドは、Ansible を初めて使用するネットワークエンジニアを対象としています。ネットワークを理解していて、Ansible を使用したことがない場合は、ガイドを最初から最後まで実践してください。"

#: ../../rst/network/getting_started/index.rst:19
msgid "This guide is also useful for experienced Ansible users automating network tasks for the first time. You can use Ansible commands, playbooks and modules to configure hubs, switches, routers, bridges and other network devices. But network modules are different from Linux/Unix and Windows modules, and you must understand some network-specific concepts to succeed. If you understand Ansible but have never automated a network task, start with the second section."
msgstr "このガイドは、ネットワークタスクを初めて自動化する経験豊富な Ansible ユーザーにも役立ちます。Ansible コマンド、Playbook、モジュールを使用して、ハブ、スイッチ、ルーター、ブリッジ、その他のネットワークデバイスを構成できます。ただし、ネットワークモジュールは Linux/Unix および Windows のモジュールとは異なり、成功するにはネットワーク固有の概念を理解する必要があります。Ansible を理解していても、ネットワークタスクを自動化したことがない場合は、2 番目のセクションから始めてください。"

#: ../../rst/network/getting_started/index.rst:21
msgid "This guide introduces basic Ansible concepts and guides you through your first Ansible commands, playbooks and inventory entries."
msgstr "本ガイドでは、基本的な Ansible の概念を紹介し、Ansible コマンド、Playbook、およびインベントリーエントリーを説明します。"

#: ../../rst/network/getting_started/intermediate_concepts.rst:3
msgid "Beyond the basics"
msgstr "中級編"

#: ../../rst/network/getting_started/intermediate_concepts.rst:5
msgid "This page introduces some concepts that help you manage your Ansible workflow with directory structure and source control. Like the Basic Concepts at the beginning of this guide, these intermediate concepts are common to all uses of Ansible."
msgstr "このページでは、ディレクトリー構造とソース管理を使用した Ansible ワークフローの管理に役立つ概念を紹介します。このガイドの最初の基本概念と同様に、これらの中間概念は Ansible のすべての使用に共通です。"

#: ../../rst/network/getting_started/intermediate_concepts.rst:12
msgid "A typical Ansible filetree"
msgstr "一般的な Ansible ファイルツリー"

#: ../../rst/network/getting_started/intermediate_concepts.rst:14
msgid "Ansible expects to find certain files in certain places. As you expand your inventory and create and run more network playbooks, keep your files organized in your working Ansible project directory like this:"
msgstr "Ansible では、特定の場所にある特定のファイルを見つけることを想定しています。インベントリーを拡張し、ネットワークの Playbook を作成して実行する場合は、ファイルを以下のように作業用の Ansible プロジェクトディレクトリーに整理した状態にします。"

#: ../../rst/network/getting_started/intermediate_concepts.rst:33
msgid "The ``backup`` directory and the files in it get created when you run modules like ``vyos_config`` with the ``backup: yes`` parameter."
msgstr "``backup`` ディレクトリーと、そのディレクトリーのファイルは、``backup: yes`` パラメーターを使用した ``vyos_config`` のモジュールを実行する際に作成されます。"

#: ../../rst/network/getting_started/intermediate_concepts.rst:37
msgid "Tracking changes to inventory and playbooks: source control with git"
msgstr "インベントリーおよび Playbook への変更の追跡: git でのソース制御"

#: ../../rst/network/getting_started/intermediate_concepts.rst:39
msgid "As you expand your inventory, roles and playbooks, you should place your Ansible projects under source control. We recommend ``git`` for source control. ``git`` provides an audit trail, letting you track changes, roll back mistakes, view history and share the workload of managing, maintaining and expanding your Ansible ecosystem. There are plenty of tutorials and guides to using ``git`` available."
msgstr "インベントリー、ロール、および Playbook を拡張するときは、Ansible プロジェクトをソース管理下に置く必要があります。ソース管理には ``git`` をお勧めします。``git`` には監査証跡が用意されており、変更の追跡、失敗のロールバック、履歴の表示、Ansible エコシステムの管理、維持、拡張のワークロードの共有が可能になります。``git`` を使用するためのチュートリアルとガイドが多数用意されています。"

#: ../../rst/network/getting_started/network_connection_options.rst:5
msgid "Working with network connection options"
msgstr "ネットワーク接続オプションの使用"

#: ../../rst/network/getting_started/network_connection_options.rst:7
msgid "Network modules can support multiple connection protocols, such as ``ansible.netcommon.network_cli``, ``ansible.netcommon.netconf``, and ``ansible.netcommon.httpapi``. These connections include some common options you can set to control how the connection to your network device behaves."
msgstr "ネットワークモジュールは、``ansible.netcommon.network_cli``、``ansible.netcommon.netconf``、``ansible.netcommon.httpapi`` などの複数の接続プロトコルをサポートできます。これらの接続には、ネットワークデバイスへの接続の動作を制御するために設定できる一般的なオプションがあります。"

#: ../../rst/network/getting_started/network_connection_options.rst:9
msgid "Common options are:"
msgstr "一般的なオプションは以下のとおりです。"

#: ../../rst/network/getting_started/network_connection_options.rst:11
msgid "``become`` and ``become_method`` as described in :ref:`privilege_escalation`."
msgstr "「:ref:`privilege_escalation`」に記載される通りに ``become`` および ``become_method``"

#: ../../rst/network/getting_started/network_connection_options.rst:12
msgid "``network_os`` - set to match your network platform you are communicating with. See the :ref:`platform-specific <platform_options>` pages."
msgstr "``network_os`` - 通信しているネットワークプラットフォームと一致するように設定されます。「:ref:`platform-specific <platform_options>`」ページを参照してください。"

#: ../../rst/network/getting_started/network_connection_options.rst:13
msgid "``remote_user`` as described in :ref:`connection_set_user`."
msgstr "「:ref:`connection_set_user`」に記載される通りに ``remote_user``"

#: ../../rst/network/getting_started/network_connection_options.rst:14
msgid "Timeout options - ``persistent_command_timeout``, ``persistent_connect_timeout``, and ``timeout``."
msgstr "タイムアウトオプション: ``persistent_command_timeout``、``persistent_connect_timeout``、および ``timeout``"

#: ../../rst/network/getting_started/network_connection_options.rst:19
msgid "Setting timeout options"
msgstr "タイムアウトオプションの設定"

#: ../../rst/network/getting_started/network_connection_options.rst:21
msgid "When communicating with a remote device, you have control over how long Ansible maintains the connection to that device, as well as how long Ansible waits for a command to complete on that device. Each of these options can be set as variables in your playbook files, environment variables, or settings in your :ref:`ansible.cfg file <ansible_configuration_settings>`."
msgstr "リモートデバイスと通信する場合は、Ansible がそのデバイスへの接続を維持する時間、およびそのデバイスでコマンドが完了するまで Ansible が待機する時間を制御できます。各オプションは、Playbook ファイルの変数、環境変数、または :ref:`ansible.cfg ファイル <ansible_configuration_settings>` の設定として設定できます。"

#: ../../rst/network/getting_started/network_connection_options.rst:23
msgid "For example, the three options for controlling the connection timeout are as follows."
msgstr "たとえば、接続タイムアウトを制御する 3 つのオプションは次のとおりです。"

#: ../../rst/network/getting_started/network_connection_options.rst:25
msgid "Using vars (per task):"
msgstr "vars (タスクごと) の使用:"

#: ../../rst/network/getting_started/network_connection_options.rst:35
msgid "Using the environment variable:"
msgstr "環境変数の使用:"

#: ../../rst/network/getting_started/network_connection_options.rst:41
msgid "Using the global configuration (in :file:`ansible.cfg`)"
msgstr "グローバル設定の使用 (:file:`ansible.cfg`) の使用"

#: ../../rst/network/getting_started/network_connection_options.rst:48
msgid "See :ref:`ansible_variable_precedence` for details on the relative precedence of each of these variables. See the individual connection type to understand each option."
msgstr "これらの各変数の相対優先度は、「:ref:`ansible_variable_precedence`」を参照してください。各オプションについては、個別の接続タイプを参照してください。"

#: ../../rst/network/getting_started/network_differences.rst:3
msgid "How Network Automation is Different"
msgstr "ネットワーク自動化の相違点"

#: ../../rst/network/getting_started/network_differences.rst:5
msgid "Network automation leverages the basic Ansible concepts, but there are important differences in how the network modules work. This introduction prepares you to understand the exercises in this guide."
msgstr "ネットワーク自動化は、基本的な Ansible の概念を利用しますが、ネットワークモジュールの動作には重要な相違点があります。本ガイドの演習を始める前に、このイントロダクションをお読みください。"

#: ../../rst/network/getting_started/network_differences.rst:11
msgid "Execution on the control node"
msgstr "コントロールノードでの実行"

#: ../../rst/network/getting_started/network_differences.rst:13
msgid "Unlike most Ansible modules, network modules do not run on the managed nodes. From a user's point of view, network modules work like any other modules. They work with ad hoc commands, playbooks, and roles. Behind the scenes, however, network modules use a different methodology than the other (Linux/Unix and Windows) modules use. Ansible is written and executed in Python. Because the majority of network devices can not run Python, the Ansible network modules are executed on the Ansible control node, where ``ansible`` or ``ansible-playbook`` runs."
msgstr "ほとんどの Ansible モジュールとは異なり、ネットワークモジュールは管理ノードで実行されません。ユーザーから見ると、ネットワークモジュールは他のモジュールと同様に機能します。アドホックコマンド、Playbook およびロールを使用します。しかし、その裏では、ネットワークモジュールは他 (Linux/Unix および Windows) のモジュールとは異なる方法を使用します。Ansible は Python で記述され、実行されます。大部分のネットワークデバイスは Python を実行できないため、Ansible ネットワークモジュールは Ansible コントロールノードで実行されます (``ansible`` または ``ansible-playbook`` が実行される場所です)。"

#: ../../rst/network/getting_started/network_differences.rst:15
msgid "Network modules also use the control node as a destination for backup files, for those modules that offer a ``backup`` option. With Linux/Unix modules, where a configuration file already exists on the managed node(s), the backup file gets written by default in the same directory as the new, changed file. Network modules do not update configuration files on the managed nodes, because network configuration is not written in files. Network modules write backup files on the control node, usually in the `backup` directory under the playbook root directory."
msgstr "ネットワークモジュールも、``backup`` オプションを提供するモジュールのバックアップファイルの宛先としてコントロールノードを使用します。Linux/Unix モジュールでは、管理ノードに設定ファイルがすでに存在する場合に、デフォルトでは、新しい変更したファイルと同じディレクトリーにバックアップファイルが書き込まれます。ネットワーク設定はファイルに書き込まれないため、ネットワークモジュールは管理ノード上の構成ファイルを更新しません。ネットワークモジュールは、通常は Playbook のルートディレクトリーの下の `backup` ディレクトリーにあるコントロールノードにバックアップファイルを書き込みます。"

#: ../../rst/network/getting_started/network_differences.rst:18
msgid "Multiple communication protocols"
msgstr "複数の通信プロトコル"

#: ../../rst/network/getting_started/network_differences.rst:20
msgid "Because network modules execute on the control node instead of on the managed nodes, they can support multiple communication protocols. The communication protocol (XML over SSH, CLI over SSH, API over HTTPS) selected for each network module depends on the platform and the purpose of the module. Some network modules support only one protocol; some offer a choice. The most common protocol is CLI over SSH. You set the communication protocol with the ``ansible_connection`` variable:"
msgstr "ネットワークモジュールは管理ノードではなくコントロールノードで実行されるため、複数の通信プロトコルをサポートできます。各ネットワークモジュールに選択される通信プロトコル (SSH での XML、SSH での CLI、HTTPS での API) は、プラットフォームと、モジュールの目的によって異なります。プロトコルを 1 つしかサポートしていないネットワークモジュールもあります。複数のプロトコルをサポートするプロトコルもあります。最も一般的なプロトコルは CLI over SSH です。``ansible_connection`` 変数を使用して通信プロトコルを設定します。"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Value of ansible_connection"
msgstr "ansible_connection の値"

#: ../../rst/network/getting_started/network_differences.rst:1
#: ../../rst/network/user_guide/platform_ce.rst:23
#: ../../rst/network/user_guide/platform_cnos.rst:21
#: ../../rst/network/user_guide/platform_dellos10.rst:21
#: ../../rst/network/user_guide/platform_dellos6.rst:21
#: ../../rst/network/user_guide/platform_dellos9.rst:21
#: ../../rst/network/user_guide/platform_enos.rst:21
#: ../../rst/network/user_guide/platform_eos.rst:21
#: ../../rst/network/user_guide/platform_eric_eccli.rst:21
#: ../../rst/network/user_guide/platform_exos.rst:22
#: ../../rst/network/user_guide/platform_frr.rst:21
#: ../../rst/network/user_guide/platform_icx.rst:21
#: ../../rst/network/user_guide/platform_ios.rst:21
#: ../../rst/network/user_guide/platform_iosxr.rst:25
#: ../../rst/network/user_guide/platform_ironware.rst:21
#: ../../rst/network/user_guide/platform_junos.rst:24
#: ../../rst/network/user_guide/platform_meraki.rst:21
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:23
#: ../../rst/network/user_guide/platform_netvisor.rst:22
#: ../../rst/network/user_guide/platform_nos.rst:22
#: ../../rst/network/user_guide/platform_nxos.rst:21
#: ../../rst/network/user_guide/platform_routeros.rst:22
#: ../../rst/network/user_guide/platform_slxos.rst:22
#: ../../rst/network/user_guide/platform_voss.rst:22
#: ../../rst/network/user_guide/platform_vyos.rst:21
msgid "Protocol"
msgstr "プロトコル"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Requires"
msgstr "必須"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "Persistent?"
msgstr "永続的?"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "ansible.netcommon.network_cli"
msgstr "ansible.netcommon.network_cli"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "CLI over SSH"
msgstr "SSH での CLI"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "network_os setting"
msgstr "network_os の設定"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "yes"
msgstr "はい"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "ansible.netcommon.netconf"
msgstr "ansible.netcommon.netconf"

#: ../../rst/network/getting_started/network_differences.rst:1
#: ../../rst/network/user_guide/platform_ce.rst:23
#: ../../rst/network/user_guide/platform_iosxr.rst:25
#: ../../rst/network/user_guide/platform_junos.rst:24
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:23
msgid "XML over SSH"
msgstr "SSH での XML"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "ansible.netcommon.httpapi"
msgstr "ansible.netcommon.httpapi"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "API over HTTP/HTTPS"
msgstr "HTTP/HTTPS での API"

#: ../../rst/network/getting_started/network_differences.rst:1
#: ../../rst/network/user_guide/platform_index.rst:60
msgid "local"
msgstr "ローカル"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "depends on provider"
msgstr "プロバイダーによって異なる"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "provider setting"
msgstr "プロバイダー設定"

#: ../../rst/network/getting_started/network_differences.rst:1
msgid "no"
msgstr "いいえ"

#: ../../rst/network/getting_started/network_differences.rst:32
msgid "``ansible.netcommon.httpapi`` deprecates ``eos_eapi`` and ``nxos_nxapi``. See :ref:`httpapi_plugins` for details and an example."
msgstr "``ansible.netcommon.httpapi`` は、``eos_eapi`` および ``nxos_nxapi`` を非推奨とします。詳細と例は「:ref:`httpapi_plugins`」参照してください。"

#: ../../rst/network/getting_started/network_differences.rst:34
msgid "The ``ansible_connection: local`` has been deprecated. Please use one of the persistent connection types listed above instead. With persistent connections, you can define the hosts and credentials only once, rather than in every task. You also need to set the ``network_os`` variable for the specific network platform you are communicating with. For more details on using each connection type on various platforms, see the :ref:`platform-specific <platform_options>` pages."
msgstr "``ansible_connection: local`` は非推奨になりました。代わりに、上記の永続的接続タイプのいずれかを使用してください。永続的接続では、すべてのタスクに対してではなく、ホストと認証情報を 1 回だけ定義できます。また、通信する特定のネットワークプラットフォームの ``network_os`` 変数も設定する必要があります。さまざまなプラットフォームでの各接続タイプの使用の詳細は、「:ref:`platform-specific <platform_options>`」を参照してください。"

#: ../../rst/network/getting_started/network_differences.rst:38
msgid "Collections organized by network platform"
msgstr "ネットワークプラットフォーム別に整理されたコレクション"

#: ../../rst/network/getting_started/network_differences.rst:40
msgid "A network platform is a set of network devices with a common operating system that can be managed by an Ansible collection, for example:"
msgstr "ネットワークプラットフォームは、Ansible コレクションで管理できる共通のオペレーティングシステムを備えたネットワークデバイスセットです。以下に例を示します。"

#: ../../rst/network/getting_started/network_differences.rst:42
msgid "Arista: `arista.eos <https://galaxy.ansible.com/arista/eos>`_"
msgstr "Arista: `arista.eos <https://galaxy.ansible.com/arista/eos>`_"

#: ../../rst/network/getting_started/network_differences.rst:43
msgid "Cisco: `cisco.ios <https://galaxy.ansible.com/cisco/ios>`_, `cisco.iosxr <https://galaxy.ansible.com/cisco/iosxr>`_, `cisco.nxos <https://galaxy.ansible.com/cisco/nxos>`_"
msgstr "Cisco: `cisco.ios <https://galaxy.ansible.com/cisco/ios>`_、`cisco.iosxr <https://galaxy.ansible.com/cisco/iosxr>`_、`cisco.nxos <https://galaxy.ansible.com/cisco/nxos>`_"

#: ../../rst/network/getting_started/network_differences.rst:44
msgid "Juniper: `junipernetworks.junos <https://galaxy.ansible.com/junipernetworks/junos>`_"
msgstr "Juniper: `junipernetworks.junos <https://galaxy.ansible.com/junipernetworks/junos>`_"

#: ../../rst/network/getting_started/network_differences.rst:45
msgid "VyOS `vyos.vyos <https://galaxy.ansible.com/vyos/vyos>`_"
msgstr "VyOS `vyos.vyos <https://galaxy.ansible.com/vyos/vyos>`_"

#: ../../rst/network/getting_started/network_differences.rst:47
msgid "All modules within a network platform share certain requirements. Some network platforms have specific differences - see the :ref:`platform-specific <platform_options>` documentation for details."
msgstr "ネットワークプラットフォーム内のすべてのモジュールは特定の要件を共有します。ネットワークプラットフォームによっては、特定の相違点があります。詳細は、:ref:`platform-specific <platform_options>` ドキュメントを参照してください。"

#: ../../rst/network/getting_started/network_differences.rst:52
msgid "Privilege Escalation: ``enable`` mode, ``become``, and ``authorize``"
msgstr "特権エスカレーション: ``enable`` モード、``become``、および ``authorize``"

#: ../../rst/network/getting_started/network_differences.rst:54
msgid "Several network platforms support privilege escalation, where certain tasks must be done by a privileged user. On network devices this is called the ``enable`` mode (the equivalent of ``sudo`` in \\*nix administration). Ansible network modules offer privilege escalation for those network devices that support it. For details of which platforms support ``enable`` mode, with examples of how to use it, see the :ref:`platform-specific <platform_options>` documentation."
msgstr "一部のネットワークプラットフォームでは特権エスカレーションがサポートされており、特権を持つユーザーが特定のタスクを実行する必要があります。ネットワークデバイスでは、これを ``enable`` モードと呼びます (\\*nix 管理における ``sudo`` と同等)。Ansible ネットワークモジュールは、それをサポートするネットワークデバイスに特権エスカレーションを提供します。``enable`` モードをサポートプラットフォームとその使用例については、:ref:`platform-specific <platform_options>` ドキュメントを参照してください。"

#: ../../rst/network/getting_started/network_differences.rst:57
msgid "Using ``become`` for privilege escalation"
msgstr "権限昇格に ``become`` を使用"

#: ../../rst/network/getting_started/network_differences.rst:59
msgid "Use the top-level Ansible parameter ``become: yes`` with ``become_method: enable`` to run a task, play, or playbook with escalated privileges on any network platform that supports privilege escalation. You must use either ``connection: network_cli`` or ``connection: httpapi`` with ``become: yes`` with ``become_method: enable``. If you are using ``network_cli`` to connect Ansible to your network devices, a ``group_vars`` file would look like:"
msgstr "特権昇格をサポートする任意のネットワークプラットフォームで、昇格された特権を使用してタスク、プレイ、または Playbook を実行するには、``become_method: enable`` の Ansible 最上位パラメーター ``become: yes`` を使用します。``connection: network_cli`` または ``connection: httpapi`` を、``become: yes`` と ``become_method: enable`` とともに使用する必要があります。``network_cli`` を使用して Ansible をネットワークデバイスに接続している場合、``group_vars`` ファイルは次のようになります。"

#: ../../rst/network/getting_started/network_differences.rst:68
msgid "For more information, see :ref:`Become and Networks<become_network>`"
msgstr "詳細情報は、「:ref:`Become およびネットワーク<become_network>`」を参照してください。"

#: ../../rst/network/getting_started/network_resources.rst:6
msgid "Resources and next steps"
msgstr "リソースと次のステップ"

#: ../../rst/network/getting_started/network_resources.rst:12
msgid "Documents"
msgstr "ドキュメント"

#: ../../rst/network/getting_started/network_resources.rst:14
msgid "Read more about Ansible for Network Automation:"
msgstr "ネットワーク自動化での Ansible の詳細は、次を参照してください。"

#: ../../rst/network/getting_started/network_resources.rst:16
msgid "Network Automation on the `Ansible website <https://www.ansible.com/overview/networking>`_"
msgstr "`Ansible Web サイト <https://www.ansible.com/overview/networking>`_ 上のネットワーク自動化"

#: ../../rst/network/getting_started/network_resources.rst:17
msgid "Ansible Network `Blog posts <https://www.ansible.com/blog/topic/networks>`_"
msgstr "Ansible ネットワークの `ブログ投稿 <https://www.ansible.com/blog/topic/networks>`_"

#: ../../rst/network/getting_started/network_resources.rst:20
msgid "Events (on video and in person)"
msgstr "イベント (ビデオおよび個人)"

#: ../../rst/network/getting_started/network_resources.rst:22
msgid "All sessions at Ansible events are recorded and include many Network-related topics (use Filter by Category to view only Network topics). You can also join us for future events in your area. See:"
msgstr "Ansible イベントにおけるセッションはすべて録画されており、ネットワーク関連のトピックが多数含まれています (「Filter by Category」を使用して、ネットワークトピックのみを表示します)。また、お住まいの地域で今後開催されるイベントにもご参加いただけます。以下を参照してください。"

#: ../../rst/network/getting_started/network_resources.rst:24
msgid "`Recorded AnsibleFests <https://www.ansible.com/resources/videos/ansiblefest>`_"
msgstr "`AnsibleFests (録画) <https://www.ansible.com/resources/videos/ansiblefest>`_"

#: ../../rst/network/getting_started/network_resources.rst:25
msgid "`Recorded AnsibleAutomates <https://www.ansible.com/resources/webinars-training>`_"
msgstr "`AnsibleAutomates (録画) <https://www.ansible.com/resources/webinars-training>`_"

#: ../../rst/network/getting_started/network_resources.rst:26
msgid "`Upcoming Ansible Events <https://www.ansible.com/community/events>`_ page."
msgstr "`今後の Ansible イベント <https://www.ansible.com/community/events>`_ ページ。"

#: ../../rst/network/getting_started/network_resources.rst:29
msgid "GitHub repos"
msgstr "GitHub リポジトリー"

#: ../../rst/network/getting_started/network_resources.rst:31
msgid "Ansible hosts module code, examples, demonstrations, and other content on GitHub. Anyone with a GitHub account is able to create Pull Requests (PRs) or issues on these repos:"
msgstr "Ansible では、モジュールのコード、サンプル、デモンストレーション、その他のコンテンツを GitHub で公開しています。GitHub のアカウントをお持ちの方は、これらのリポジトリーにプル要求 (PR) や問題を作成することができます。"

#: ../../rst/network/getting_started/network_resources.rst:33
msgid "`Network-Automation <https://github.com/network-automation>`_ is an open community for all things network automation. Have an idea, some playbooks, or roles to share? Email ansible-network@redhat.com and we will add you as a contributor to the repository."
msgstr "`Network-Automation <https://github.com/network-automation>`_ は、ネットワーク自動化に関するあらゆることを扱うオープンコミュニティーです。アイディア、Playbook、またはロールを共有しませんか。ansible-network@redhat.com にメールでお問い合わせいただければ、リポジトリーに貢献者として追加されます。"

#: ../../rst/network/getting_started/network_resources.rst:35
msgid "`Ansible collections <https://github.com/ansible-collections>`_ is the main repository for Ansible-maintained and community collections, including collections for network devices."
msgstr "`Ansible コレクション <https://github.com/ansible-collections>`_ は、Ansible が管理しているコレクションおよびコミュニティーコレクションの主なリポジトリーです。これにはネットワークデバイスのコレクションが含まれます。"

#: ../../rst/network/getting_started/network_resources.rst:40
msgid "IRC and Slack"
msgstr "IRC および Slack"

#: ../../rst/network/getting_started/network_resources.rst:42
msgid "Join us on:"
msgstr "以下に参加してください。"

#: ../../rst/network/getting_started/network_resources.rst:44
msgid "Freenode IRC - ``#ansible-network`` Freenode channel"
msgstr "Freenode IRC - ``#ansible-network`` Freenode チャンネル"

#: ../../rst/network/getting_started/network_resources.rst:46
msgid "Slack - `<https://ansiblenetwork.slack.com>`_"
msgstr "Slack - `<https://ansiblenetwork.slack.com>`_"

#: ../../rst/network/getting_started/network_roles.rst:6
msgid "Use Ansible network roles"
msgstr "Ansible ネットワークロールの使用"

#: ../../rst/network/getting_started/network_roles.rst:8
msgid "Roles are sets of Ansible defaults, files, tasks, templates, variables, and other Ansible components that work together. As you saw on :ref:`first_network_playbook`, moving from a command to a playbook makes it easy to run multiple tasks and repeat the same tasks in the same order. Moving from a playbook to a role makes it even easier to reuse and share your ordered tasks. You can look at :ref:`Ansible Galaxy <ansible_galaxy>`, which lets you share your roles and use others' roles, either directly or as inspiration."
msgstr "ロールは、Ansible のデフォルト、ファイル、タスク、テンプレート、変数、およびその他の Ansible コンポーネントのセットで、連携して動作します。:ref:`first_network_playbook` でこれまで見てきたように、コマンドから Playbook に移動すると、複数のタスクを簡単に実行し、同じタスクを同じ順序で繰り返すことができます。Playbook からロールに移動すると、注文したタスクの再利用と共有がさらに簡単になります。:ref:`Ansible Galaxy <ansible_galaxy>` では、自分のロールを共有したり、他の人のロールを直接またはインスピレーションとして使用したりできます。"

#: ../../rst/network/getting_started/network_roles.rst:14
msgid "Understanding roles"
msgstr "ロールについて"

#: ../../rst/network/getting_started/network_roles.rst:16
msgid "So what exactly is a role, and why should you care? Ansible roles are basically playbooks broken up into a known file structure. Moving to roles from a playbook makes sharing, reading, and updating your Ansible workflow easier. Users can write their own roles. So for example, you don't have to write your own DNS playbook. Instead, you specify a DNS server and a role to configure it for you."
msgstr "では、ロールとは正確には何なのか、そしてなぜそれが必要なのでしょうか。Ansible ロールは基本的に、既知のファイル構造に分割された Playbook です。Playbook からロールに移動することで、Ansible ワークフローの共有、読み取り、および更新が簡単になります。ユーザーは独自のロールを作成できます。たとえば、独自の DNS Playbook を作成する必要はありません。代わりに、DNS サーバーと、DNS サーバーを構成するロールを指定します。"

#: ../../rst/network/getting_started/network_roles.rst:18
msgid "To simplify your workflow even further, the Ansible Network team has written a series of roles for common network use cases. Using these roles means you don't have to reinvent the wheel. Instead of writing and maintaining your own ``create_vlan`` playbooks or roles, you can concentrate on designing, codifying and maintaining the parser templates that describe your network topologies and inventory, and let Ansible's network roles do the work. See the `network-related roles <https://galaxy.ansible.com/ansible-network>`_ on Ansible Galaxy."
msgstr "ワークフローをさらに単純化するために、Ansible Network チームは一般的なネットワークのユースケースのための一連のロールを作成しました。これらのロールを使用すると、車輪を再発明する必要がなくなります。独自の ``create_vlan`` Playbook やロールを作成して管理する代わりに、Ansible のネットワークロールにその作業を任せることで、ネットワークトポロジーやインベントリーを記述するパーサーテンプレートの設計、コード化、および管理に集中することができます。Ansible Galaxyの「`ネットワーク関連のロール <https://galaxy.ansible.com/ansible-network>`_」を見てください。"

#: ../../rst/network/getting_started/network_roles.rst:21
msgid "A sample DNS playbook"
msgstr "DNS Playbook のサンプル"

#: ../../rst/network/getting_started/network_roles.rst:23
msgid "To demonstrate the concept of what a role is, the example ``playbook.yml`` below is a single YAML file containing a two-task playbook.  This Ansible Playbook configures the hostname on a Cisco IOS XE device, then it configures the DNS (domain name system) servers."
msgstr "ロールの概念を説明するために、下記の例 ``playbook.yml`` は 2 つのタスクの Playbook を含む 1 つの YAML ファイルです。この Ansible Playbook は、Cisco IOS XE デバイスでホスト名を設定してから、DNS (ドメインネームシステム) サーバーを設定します。"

#: ../../rst/network/getting_started/network_roles.rst:44
msgid "If you run this playbook using the ``ansible-playbook`` command, you'll see the output below.  This example used ``-l`` option to limit the playbook to only executing on the **rtr1** node."
msgstr "``ansible-playbook`` コマンドを使用してこの Playbook を実行する場合は、以下の出力が表示されます。この例では、``-l`` オプションを使用して Playbook を **rtr1** ノード上でのみ実行するように制限しています。"

#: ../../rst/network/getting_started/network_roles.rst:62
msgid "This playbook configured the hostname and DNS servers.  You can verify that configuration on the Cisco IOS XE **rtr1** router:"
msgstr "この Playbook はホスト名および DNS サーバーを設定し、Cisco IOS XE **rtr1** ルーターの設定を確認できます。"

#: ../../rst/network/getting_started/network_roles.rst:71
msgid "Convert the playbook into a role"
msgstr "Playbook のロールへの変換"

#: ../../rst/network/getting_started/network_roles.rst:73
msgid "The next step is to convert this playbook into a reusable role. You can create the directory structure manually, or you can use ``ansible-galaxy init`` to create the standard framework for a role."
msgstr "次の手順では、この Playbook を再利用可能なロールに変換します。ディレクトリー構造を手動で作成するか、``ansible-galaxy init`` を使用してロールの標準フレームワークを作成できます。"

#: ../../rst/network/getting_started/network_roles.rst:98
msgid "This first demonstration uses only the **tasks** and **vars** directories.  The directory structure would look as follows:"
msgstr "この最初のデモンストレーションは **tasks** ディレクトリーおよび **vars** ディレクトリーのみを使用します。ディレクトリー構造は以下のようになります。"

#: ../../rst/network/getting_started/network_roles.rst:109
msgid "Next, move the content of the ``vars`` and ``tasks`` sections from the original Ansible Playbook into the role. First, move the two tasks into the ``tasks/main.yml`` file:"
msgstr "次に、元の Ansible Playbook から ``vars`` セクションおよび ``tasks`` セクションの内容をロールに移動します。まず、2 つのタスクを ``tasks/main.yml`` ファイルに移動します。"

#: ../../rst/network/getting_started/network_roles.rst:123
msgid "Next, move the variables into the ``vars/main.yml`` file:"
msgstr "次に、変数を ``vars/main.yml`` ファイルに移動します。"

#: ../../rst/network/getting_started/network_roles.rst:131
msgid "Finally, modify the original Ansible Playbook to remove the ``tasks`` and ``vars`` sections and add the keyword ``roles``  with the name of the role, in this case ``system-demo``.  You'll have this playbook:"
msgstr "最後に、元の Ansible Playbook を変更して ``tasks`` セクションおよび ``vars`` セクションを削除し、ロールの名前 (ここでは ``system-demo``) でキーワード ``roles`` を追加します。これで、Playbook が完成します。"

#: ../../rst/network/getting_started/network_roles.rst:144
msgid "To summarize, this demonstration now has a total of three directories and three YAML files.  There is the ``system-demo`` folder, which represents the role.  This ``system-demo`` contains two folders, ``tasks`` and ``vars``.  There is a ``main.yml`` is each respective folder.  The ``vars/main.yml`` contains the variables from ``playbook.yml``.  The ``tasks/main.yml`` contains the tasks from ``playbook.yml``.  The ``playbook.yml`` file has been modified to call the role rather than specifying vars and tasks directly.  Here is a tree of the current working directory:"
msgstr "要約すると、このデモには合計 3 つのディレクトリーと 3 つの YAML ファイルがあります。ロールを表す ``system-demo`` ディレクトリーがあります。この ``system-demo`` には、``tasks`` および ``vars`` の 2 つのディレクトリーが含まれています。各ディレクトリーに ``main.yml`` があります。``vars/main.yml`` には、``playbook.yml`` の変数が含まれます。``tasks/main.yml`` には、``playbook.yml`` のタスクが含まれます。``playbook.yml`` ファイルは、変数とタスクを直接指定するのではなく、ロールを呼び出すように変更されています。現在の作業ディレクトリーのツリーを次に示します。"

#: ../../rst/network/getting_started/network_roles.rst:157
msgid "Running the playbook results in identical behavior with slightly different output:"
msgstr "Playbook を実行すると、同じ動作で、出力が若干異なります。"

#: ../../rst/network/getting_started/network_roles.rst:174
msgid "As seen above each task is now prepended with the role name, in this case ``system-demo``.  When running a playbook that contains several roles, this will help pinpoint where a task is being called from.  This playbook returned ``ok`` instead of ``changed`` because it has identical behavior for the single file playbook we started from."
msgstr "上記のように、各タスクの先頭にロール名が付加されます (``system-demo`` の場合)。複数のロールを含む Playbook を実行する場合、タスクの呼び出し元を特定するのに役立ちます。このPlaybook は、``changed`` ではなく ``ok`` を返しますが、これは、開始した単一ファイルの Playbook と同じ動作をするためです。"

#: ../../rst/network/getting_started/network_roles.rst:176
msgid "As before, the playbook will generate the following configuration on a Cisco IOS-XE router:"
msgstr "前述のように、Playbook は Cisco IOS-XE ルーターで以下の設定を生成します。"

#: ../../rst/network/getting_started/network_roles.rst:185
msgid "This is why Ansible roles can be simply thought of as deconstructed playbooks. They are simple, effective and reusable.  Now another user can simply include the ``system-demo`` role instead of having to create a custom \"hard coded\" playbook."
msgstr "このため、Ansible ロールは、簡単に言えば、分解された Playbook と考えることができます。ロールは、シンプルで、効果的で、再利用可能です。これで、別のユーザーがカスタムの「ハードコーディングされた」Playbook を作成する代わりに、``system-demo`` ロールを含めるだけで十分となります。"

#: ../../rst/network/getting_started/network_roles.rst:188
msgid "Variable precedence"
msgstr "変数の優先順位"

#: ../../rst/network/getting_started/network_roles.rst:190
msgid "What if you want to change the DNS servers?  You aren't expected to change the ``vars/main.yml`` within the role structure. Ansible has many places where you can specify variables for a given play. See :ref:`playbooks_variables` for details on variables and precedence. There are actually 21 places to put variables.  While this list can seem overwhelming at first glance, the vast majority of use cases only involve knowing the spot for variables of least precedence and how to pass variables with most precedence. See :ref:`ansible_variable_precedence` for more guidance on where you should put variables."
msgstr "DNS サーバーを変更する場合はどうすればよいですか。ロール構造内の ``vars/main.yml`` を変更する必要はありません。Ansible には、特定のプレイの変数を指定できる場所が多数あります。変数と優先順位の詳細は、「:ref:`playbooks_variables`」を参照してください。変数を置く場所は実際には 21 箇所あります。これは一見圧倒されるような数ですが、大半のユースケースでは、優先順位が最も低い変数の場所と、最も優先順位の高い変数を渡す方法を知るだけですみます。変数をどこに置くべきかは、「:ref:`ansible_variable_precedence`」を参照してください。"

#: ../../rst/network/getting_started/network_roles.rst:193
msgid "Lowest precedence"
msgstr "最も低い優先順位"

#: ../../rst/network/getting_started/network_roles.rst:195
msgid "The lowest precedence is the ``defaults`` directory within a role.  This means all the other 20 locations you could potentially specify the variable will all take higher precedence than ``defaults``, no matter what.  To immediately give the vars from the ``system-demo`` role the least precedence, rename the ``vars`` directory to ``defaults``."
msgstr "最も低い優先順位は、ロール内の ``defaults`` ディレクトリーです。つまり、変数を指定できる可能性のある他の 20 箇所はすべて、``defaults`` より優先されます。``system-demo`` ロールの変数の優先順位を直ちに最も低くするには、``vars`` ディレクトリーの名前を ``defaults`` に変更します。"

#: ../../rst/network/getting_started/network_roles.rst:207
msgid "Add a new ``vars`` section to the playbook to override the default behavior (where the variable ``dns`` is set to 8.8.8.8 and 8.8.4.4).  For this demonstration, set ``dns`` to 1.1.1.1, so ``playbook.yml`` becomes:"
msgstr "デフォルトの動作を上書きするために、Playbook に新しい ``vars`` セクションを追加します (ここでは、``dns`` 変数が 8.8.8.8 および 8.8.4.4 に設定されています)。このデモでは、``dns`` を 1.1.1.1 に設定するため、``playbook.yml`` は次のようになります。"

#: ../../rst/network/getting_started/network_roles.rst:221
msgid "Run this updated playbook on **rtr2**:"
msgstr "更新した Playbook を **rtr2** で実行します。"

#: ../../rst/network/getting_started/network_roles.rst:227
msgid "The configuration on the **rtr2** Cisco router will look as follows:"
msgstr "**rtr2** Cisco ルーターの設定は以下のようになります。"

#: ../../rst/network/getting_started/network_roles.rst:234
msgid "The variable configured in the playbook now has precedence over the ``defaults`` directory.  In fact, any other spot you configure variables would win over the values in the ``defaults`` directory."
msgstr "Playbook に設定した変数は、``defaults`` ディレクトリーよりも優先されます。実際には、変数に設定したその他のスポットは、``defaults`` ディレクトリーの値よりも優先されます。"

#: ../../rst/network/getting_started/network_roles.rst:237
msgid "Highest precedence"
msgstr "最も高い優先順位"

#: ../../rst/network/getting_started/network_roles.rst:239
msgid "Specifying variables in the ``defaults`` directory within a role will always take the lowest precedence, while specifying ``vars`` as extra vars with the ``-e`` or ``--extra-vars=`` will always take the highest precedence, no matter what.  Re-running the playbook with the ``-e`` option overrides both the ``defaults`` directory (8.8.4.4 and 8.8.8.8) as well as the newly created ``vars`` within the playbook that contains the 1.1.1.1 dns server."
msgstr "ロール内の ``defaults`` ディレクトリーに変数を指定すると、常に優先順位が最も低くなりますが、``-e`` または ``--extra-vars=`` を使用して追加変数として ``vars`` を指定すると、優先順位が最も高くなります。``-e`` オプションを指定して Playbook を再実行すると、``defaults`` ディレクトリー (8.8.4.4 および 8.8.8.8) だけでなく、1.1.1.1 dns サーバーを含む Playbook 内に新しく作成された ``vars`` も上書きされます。"

#: ../../rst/network/getting_started/network_roles.rst:245
msgid "The result on the Cisco IOS XE router will only contain the highest precedence setting of 192.168.1.1:"
msgstr "Cisco IOS XE ルーターの結果には、優先順位の最も高い 192.168.1.1 設定のみが含まれます。"

#: ../../rst/network/getting_started/network_roles.rst:252
msgid "How is this useful?  Why should you care?  Extra vars are commonly used by network operators to override defaults.  A powerful example of this is with Red Hat Ansible Tower and the Survey feature.  It is possible through the web UI to prompt a network operator to fill out parameters with a Web form.  This can be really simple for non-technical playbook writers to execute a playbook using their Web browser. See `Ansible Tower Job Template Surveys <https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html#surveys>`_ for more details."
msgstr "これはどのように役立つのでしょうか。なぜ気にする必要があるのでしょうか。ネットワークオペレーターは通常、追加の変数を使用してデフォルトを上書きします。その良い例は、Red Hat Ansible Tower と Survey 機能です。Web UI を使用して、ネットワークオペレーターに Web フォームでパラメーターの入力を求めることができます。これは、技術に詳しくない Playbook 作成者が Web ブラウザーを使用して Playbook を実行する場合に非常に簡単です。詳細は、「`Ansible Tower ジョブテンプレートサーベイ <https://docs.ansible.com/ansible-tower/latest/html/userguide/workflow_templates.html#surveys>`_」を参照してください。"

#: ../../rst/network/getting_started/network_roles.rst:256
msgid "Update an installed role"
msgstr "インストールされたロールの更新"

#: ../../rst/network/getting_started/network_roles.rst:258
msgid "The Ansible Galaxy page for a role lists all available versions. To update a locally installed role to a new or different version, use the ``ansible-galaxy install`` command with the version and ``--force`` option. You may also need to manually update any dependent roles to support this version. See the role **Read Me** tab in Galaxy for dependent role minimum version requirements."
msgstr "ロールの Ansible Galaxy ページには、使用可能なすべてのバージョンが一覧表示されます。ローカルにインストールされたロールを新しいバージョンまたは別のバージョンに更新するには、``ansible-galaxy install`` コマンドにバージョンおよび ``--force`` オプションを指定して使用します。また、このバージョンをサポートするために、依存ロールを手動で更新しないといけない場合もあります。依存ロールの最小バージョン要件については、Galaxy のロールの「Read Me」タブを参照してください。"

#: ../../rst/network/getting_started/network_roles.rst:266
msgid "`Ansible Galaxy documentation <https://galaxy.ansible.com/docs/>`_"
msgstr "`Ansible Galaxy ドキュメント <https://galaxy.ansible.com/docs/>`_"

#: ../../rst/network/getting_started/network_roles.rst:267
msgid "Ansible Galaxy user guide"
msgstr "Ansible Galaxy ユーザーガイド"

#: ../../rst/network/index.rst:7
msgid "Ansible for Network Automation"
msgstr "ネットワークの自動化における Ansible"

#: ../../rst/network/index.rst:9
msgid "Ansible Network modules extend the benefits of simple, powerful, agentless automation to network administrators and teams. Ansible Network modules can configure your network stack, test and validate existing network state, and discover and correct network configuration drift."
msgstr "Ansible Network モジュールは、シンプルで強力なエージェントレス自動化の利点をネットワーク管理者とチームに拡張します。Ansible Network モジュールは、ネットワークスタックを構成し、既存のネットワーク状態をテストおよび検証し、ネットワーク構成のドリフトを検出して修正できます。"

#: ../../rst/network/index.rst:11
msgid "If you're new to Ansible, or new to using Ansible for network management, start with :ref:`network_getting_started`. If you are already familiar with network automation with Ansible, see :ref:`network_advanced`."
msgstr "Ansible を初めて使用する場合や、ネットワーク管理に Ansible を初めて使用する場合は、:ref:`network_getting_started` から開始します。Ansible とのネットワーク自動化に精通している場合は、「:ref:`network_advanced`」を参照してください。"

#: ../../rst/network/index.rst:13
msgid "For documentation on using a particular network module, consult the :ref:`list of all network modules<network_modules>`. Network modules for various hardware are supported by different teams including the hardware vendors themselves, volunteers from the Ansible community, and the Ansible Network Team."
msgstr "特定のネットワークモジュールの使用に関するドキュメントについては、「:ref:`ネットワークモジュールの一覧<network_modules>`」を参照してください。さまざまなハードウェアのネットワークモジュールが、ハードウェアベンダー自体、Ansible コミュニティーのボランティア、Ansible ネットワークチームなど、さまざまなチームにサポートされています。"

#: ../../rst/network/user_guide/cli_parsing.rst:5
msgid "Parsing semi-structured text with Ansible"
msgstr "Ansible を使用した半構造化テキストの解析"

#: ../../rst/network/user_guide/cli_parsing.rst:7
msgid "The :ref:`cli_parse <ansible_collections.ansible.netcommon.cli_parse_module>` module parses semi-structured data such as network configurations into structured data to allow programmatic use of the data from that device. You can pull information from a network device and update a CMDB in one playbook. Use cases include automated troubleshooting, creating dynamic documentation, updating IPAM (IP address management) tools and so on."
msgstr ":ref:`cli_parse <ansible_collections.ansible.netcommon.cli_parse_module>` モジュールは、ネットワーク構成などの半構造化データを構造化データに解析して、そのデバイスからのデータをプログラムで使用できるようにします。ネットワークデバイスから情報を取得し、1 つの Playbook で CMDB を更新できます。ユースケースには、自動トラブルシューティング、動的ドキュメントの作成、IPAM (IPアドレス管理) ツールの更新などがあります。"

#: ../../rst/network/user_guide/cli_parsing.rst:15
msgid "Understanding the CLI parser"
msgstr "CLI パーサーについて"

#: ../../rst/network/user_guide/cli_parsing.rst:17
msgid "The `ansible.netcommon <https://galaxy.ansible.com/ansible/netcommon>`_ collection version 1.2.0 or later  includes the :ref:`cli_parse <ansible_collections.ansible.netcommon.cli_parse_module>` module that can run CLI commands and parse the semi-structured text output. You can use the ``cli_parse`` module on a device, host, or platform that only supports a command-line interface and the commands issued return semi-structured text. The ``cli_parse`` module can either run a CLI command on a device and return a parsed result or can simply parse any text document. The ``cli_parse`` module includes cli_parser plugins to interface with a variety of parsing engines."
msgstr "`ansible.netcommon <https://galaxy.ansible.com/ansible/netcommon>`_ コレクションバージョン 1.2.0 以降には、CLI コマンドを実行し、半構造化テキスト出力を解析できる :ref:`cli_parse <ansible_collections.ansible.netcommon.cli_parse_module>` モジュールが含まれています。コマンドラインインタフェースのみをサポートするデバイス、ホスト、またはプラットフォームで ``cli_parse`` モジュールを使用でき、実行したコマンドは半構造化テキストを返します。``cli_parse`` モジュールは、デバイス上で CLI コマンドを実行して解析結果を返すことも、単純にテキストドキュメントを解析することもできます。``cli_parse`` モジュールには、さまざまな解析エンジンとのインタフェースとなる cli_parser プラグインが含まれています。"

#: ../../rst/network/user_guide/cli_parsing.rst:20
msgid "Why parse the text?"
msgstr "テキストを解析する理由"

#: ../../rst/network/user_guide/cli_parsing.rst:22
msgid "Parsing semi-structured data such as network configurations into structured data allows programmatic use of the data from that device. Use cases include automated troubleshooting, creating dynamic documentation, updating IPAM (IP address management) tools and so on. You may prefer to do this with Ansible natively to take advantage of native Ansible constructs such as:"
msgstr "ネットワーク構成などの半構造化データを構造化データに解析すると、そのデバイスのデータをプログラムで使用できます。ユースケースには、自動トラブルシューティング、動的ドキュメントの作成、IPAM (IPアドレス管理) ツールの更新などがあります。このような作業は、Ansible でネイティブに行う方が、以下のような Ansible のネイティブな構成を活用できるかもしれません。"

#: ../../rst/network/user_guide/cli_parsing.rst:24
msgid "The ``when`` clause to conditionally run other tasks or roles"
msgstr "他のタスクまたはロールを条件的に実行する ``when`` 句"

#: ../../rst/network/user_guide/cli_parsing.rst:25
msgid "The ``assert`` module to check configuration and operational state compliance"
msgstr "設定と運用状態コンプライアンスを確認するための ``assert`` モジュール"

#: ../../rst/network/user_guide/cli_parsing.rst:26
msgid "The ``template`` module to generate reports about configuration and operational state information"
msgstr "設定および運用の状態情報に関するレポートを生成する ``template`` モジュール"

#: ../../rst/network/user_guide/cli_parsing.rst:27
msgid "Templates and ``command`` or ``config`` modules to generate host, device, or platform commands or configuration"
msgstr "ホスト、デバイス、またはプラットフォームコマンドまたは設定を生成するテンプレートおよび ``command`` モジュールまたは ``config`` モジュール"

#: ../../rst/network/user_guide/cli_parsing.rst:28
msgid "The current platform ``facts`` modules to supplement native facts information"
msgstr "ネイティブファクト情報を補足する現在のプラットフォームの ``facts`` モジュール"

#: ../../rst/network/user_guide/cli_parsing.rst:30
msgid "By parsing semi-structured text into Ansible native data structures, you can take full advantage of Ansible's network modules and plugins."
msgstr "半構造化テキストを Ansible のネイティブデータ構造に解析することで、Ansible のネットワークモジュールおよびプラグインを完全に活用できます。"

#: ../../rst/network/user_guide/cli_parsing.rst:34
msgid "When not to parse the text"
msgstr "テキストを解析しない場合"

#: ../../rst/network/user_guide/cli_parsing.rst:36
msgid "You should not parse semi-structured text when:"
msgstr "以下の場合は、半構造化されたテキストを解析しないでください。"

#: ../../rst/network/user_guide/cli_parsing.rst:38
msgid "The device, host, or platform has a RESTAPI and returns JSON."
msgstr "デバイス、ホスト、またはプラットフォームには RESTAPI があり、JSON を返します。"

#: ../../rst/network/user_guide/cli_parsing.rst:39
msgid "Existing Ansible facts modules already return the desired data."
msgstr "既存の Ansible ファクトモジュールは、すでに必要なデータを返しています。"

#: ../../rst/network/user_guide/cli_parsing.rst:40
msgid "Ansible network resource modules exist for configuration management of the device and resource."
msgstr "デバイスおよびリソースの設定管理には、Ansible ネットワークリソースモジュールがあります。"

#: ../../rst/network/user_guide/cli_parsing.rst:43
msgid "Parsing the CLI"
msgstr "CLI の解析"

#: ../../rst/network/user_guide/cli_parsing.rst:45
msgid "The ``cli_parse`` module includes the following cli_parsing plugins:"
msgstr "``cli_parse`` モジュールには、以下の cli_parsing プラグインが含まれます。"

#: ../../rst/network/user_guide/cli_parsing.rst:47
msgid "``native``"
msgstr "``native``"

#: ../../rst/network/user_guide/cli_parsing.rst:48
msgid "The native parsing engine built into Ansible and requires no addition python libraries"
msgstr "Ansible に組み込まれたネイティブの解析エンジンで、Python ライブラリーを追加する必要はありません。"

#: ../../rst/network/user_guide/cli_parsing.rst:49
msgid "``xml``"
msgstr "``xml``"

#: ../../rst/network/user_guide/cli_parsing.rst:50
msgid "Convert XML to an Ansible native data structure"
msgstr "XML の Ansible ネイティブデータ構造への変換"

#: ../../rst/network/user_guide/cli_parsing.rst:51
msgid "``textfsm``"
msgstr "``textfsm``"

#: ../../rst/network/user_guide/cli_parsing.rst:52
msgid "A python module which implements a template based state machine for parsing semi-formatted text"
msgstr "半フォーマット化テキストを解析するためにテンプレートベースの状態マシンを実装する Python モジュール"

#: ../../rst/network/user_guide/cli_parsing.rst:53
msgid "``ntc_templates``"
msgstr "``ntc_templates``"

#: ../../rst/network/user_guide/cli_parsing.rst:54
msgid "Predefined ``textfsm`` templates packages supporting a variety of platforms and commands"
msgstr "さまざまなプラットフォームおよびコマンドをサポートする事前定義された ``textfsm`` テンプレートパッケージ"

#: ../../rst/network/user_guide/cli_parsing.rst:55
msgid "``ttp``"
msgstr "``ttp``"

#: ../../rst/network/user_guide/cli_parsing.rst:56
msgid "A library for semi-structured text parsing using templates, with added capabilities to simplify the process"
msgstr "処理を簡略化する機能が追加されている、テンプレートを利用した半構造化テキストの解析用ライブラリー"

#: ../../rst/network/user_guide/cli_parsing.rst:57
msgid "``pyats``"
msgstr "``pyats``"

#: ../../rst/network/user_guide/cli_parsing.rst:58
msgid "Uses the parsers included with the Cisco Test Automation & Validation Solution"
msgstr "Cisco Test Automation & Validation Solution に含まれるパーサーを使用します。"

#: ../../rst/network/user_guide/cli_parsing.rst:60
msgid "``json``"
msgstr "``json``"

#: ../../rst/network/user_guide/cli_parsing.rst:60
msgid "Converts JSON output at the CLI to an Ansible native data structure"
msgstr "CLI での JSON 出力を Ansible ネイティブデータ構造に変換"

#: ../../rst/network/user_guide/cli_parsing.rst:62
#: ../../rst/network/user_guide/cli_parsing.rst:589
msgid "Although Ansible contains a number of plugins that can convert XML to Ansible native data structures, the ``cli_parse`` module runs the command on devices that return XML and returns the converted data in a single task."
msgstr "Ansible には、XML を Ansible のネイティブデータ構造に変換できる多数のプラグインが含まれていますが、``cli_parse`` モジュールは XML を返すデバイスでコマンドを実行し、変換されたデータを 1 つのタスクで返します。"

#: ../../rst/network/user_guide/cli_parsing.rst:64
msgid "Because ``cli_parse`` uses a plugin based architecture, it can use additional parsing engines from any Ansible collection."
msgstr "``cli_parse`` はプラグインベースのアーキテクチャーを使用するため、任意の Ansible コレクションから追加の解析エンジンを使用できます。"

#: ../../rst/network/user_guide/cli_parsing.rst:68
msgid "The ``ansible.netcommon.native``  and ``ansible.netcommon.json`` parsing engines are fully supported with a Red Hat Ansible Automation Platform subscription. Red Hat Ansible Automation Platform subscription support is limited to the use of the ``ntc_templates``, pyATS, ``textfsm``, ``xmltodict``, public APIs as documented."
msgstr "解析エンジン ``ansible.netcommon.native`` および ``ansible.netcommon.json`` は、Red Hat Ansible Automation Platform サブスクリプションで完全にサポートされています。Red Hat Ansible Automation Platform サブスクリプションのサポートは、ドキュメントに記載されているように、``ntc_templates``、pyATS、``textfsm``、``xmltodict``、パブリック APIの使用に限定されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:71
msgid "Parsing with the native parsing engine"
msgstr "ネイティブ解析エンジンを使用した解析"

#: ../../rst/network/user_guide/cli_parsing.rst:73
msgid "The native parsing engine is included with the ``cli_parse`` module. It uses data captured using regular expressions to populate the parsed data structure. The native parsing engine requires a YAML template file to parse the command output."
msgstr "ネイティブ解析エンジンは ``cli_parse`` モジュールに含まれています。正規表現を使用して取得されたデータを使用して、解析されたデータ構造を生成します。ネイティブ解析エンジンでは、コマンド出力を解析するために YAML テンプレートファイルが必要です。"

#: ../../rst/network/user_guide/cli_parsing.rst:76
msgid "Networking example"
msgstr "ネットワークの例"

#: ../../rst/network/user_guide/cli_parsing.rst:78
msgid "This example uses the output of a network device command and applies a native template to produce an output in Ansible structured data format."
msgstr "この例では、ネットワークデバイスコマンドの出力を使用し、ネイティブテンプレートを適用して Ansible 構造のデータ形式で出力を生成します。"

#: ../../rst/network/user_guide/cli_parsing.rst:80
msgid "The ``show interface`` command output from the network device looks as follows:"
msgstr "ネットワークデバイスからの ``show interface`` コマンドの出力は以下のようになります。"

#: ../../rst/network/user_guide/cli_parsing.rst:104
msgid "Create the native template to match this output and store it as ``templates/nxos_show_interface.yaml``:"
msgstr "この出力に一致するネイティブテンプレートを作成し、これを ``templates/nxos_show_interface.yaml`` として保存します。"

#: ../../rst/network/user_guide/cli_parsing.rst:134
msgid "This native parser template is structured as a list of parsers, each containing the following key-value pairs:"
msgstr "このネイティブパーサーテンプレートはパーサーのリストとして構成され、それぞれに以下のキーと値のペアが含まれます。"

#: ../../rst/network/user_guide/cli_parsing.rst:136
msgid "``example`` - An example line of the text line to be parsed"
msgstr "``example`` - 解析対象となるテキスト行の一例"

#: ../../rst/network/user_guide/cli_parsing.rst:137
msgid "``getval`` - A regular expression using named capture groups to store the extracted data"
msgstr "``getval`` - 展開したデータを保存するために名前付きキャプチャーグループを使用した正規表現"

#: ../../rst/network/user_guide/cli_parsing.rst:138
msgid "``result`` - A data tree, populated as a template, from the parsed data"
msgstr "``result`` - 解析されたデータからテンプレートとして生成されたデータツリー"

#: ../../rst/network/user_guide/cli_parsing.rst:139
msgid "``shared`` - (optional) The shared key makes the parsed values available to the rest of the parser entries until matched again."
msgstr "``shared`` - (任意) 共有キーは、再一致するまで、残りのパーサーエントリーに解析された値を利用できるようにします。"

#: ../../rst/network/user_guide/cli_parsing.rst:141
msgid "The following example task uses ``cli_parse`` with the native parser and the example template above to parse the ``show interface`` command from a Cisco NXOS device:"
msgstr "以下のタスク例では、ネイティブパーサーで ``cli_parse`` と上記のテンプレートのサンプルを使用して、Cisco NXOS デバイスからの ``show interface`` コマンドを解析します。"

#: ../../rst/network/user_guide/cli_parsing.rst:152
#: ../../rst/network/user_guide/cli_parsing.rst:300
#: ../../rst/network/user_guide/cli_parsing.rst:326
#: ../../rst/network/user_guide/cli_parsing.rst:386
#: ../../rst/network/user_guide/cli_parsing.rst:495
msgid "Taking a deeper dive into this task:"
msgstr "このタスクをより深く掘り下げます。"

#: ../../rst/network/user_guide/cli_parsing.rst:154
msgid "The ``command`` option provides the command you want to run on the device or host. Alternately, you can provide text from a previous command with the ``text`` option instead."
msgstr "``command`` オプションは、デバイスまたはホストで実行するコマンドを提供します。代わりに、``text`` オプションを指定して、前のコマンドのテキストを指定することもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:155
msgid "The ``parser`` option provides information specific to the parser engine."
msgstr "``parser`` オプションは、パーサーエンジンに固有の情報を提供します。"

#: ../../rst/network/user_guide/cli_parsing.rst:156
msgid "The ``name`` suboption provides the fully qualified collection name (FQCN) of the parsing engine (``ansible.netcommon.native``)."
msgstr "``name`` サブオプションは、解析エンジン (``ansible.netcommon.native``) の完全修飾コレクション名 (FQCN) を提供します。"

#: ../../rst/network/user_guide/cli_parsing.rst:157
msgid "The ``cli_parse`` module, by default, looks for the template in the templates directory as ``{{ short_os }}_{{ command }}.yaml``."
msgstr "デフォルトでは、``cli_parse`` モジュールは、templates ディレクトリーで ``{{ short_os }}_{{ command }}.yaml`` と指定してテンプレートを検索します。"

#: ../../rst/network/user_guide/cli_parsing.rst:159
msgid "The ``short_os`` in the template filename is derived from either the host ``ansible_network_os`` or ``ansible_distribution``."
msgstr "テンプレートファイル名の ``short_os`` は、ホストの ``ansible_network_os`` または ``ansible_distribution`` から派生します。"

#: ../../rst/network/user_guide/cli_parsing.rst:160
msgid "Spaces in the network or host command are replace with ``_`` in the ``command`` portion of the template filename. In this example, the ``show interfaces`` network CLI command becomes ``show_interfaces`` in the filename."
msgstr "network または host コマンドのスペースは、テンプレートファイル名の ``command`` 部分にある ``_`` に置き換えます。この例では、``show interfaces`` network CLI コマンドはファイル名の ``show_interfaces`` になります。"

#: ../../rst/network/user_guide/cli_parsing.rst:164
msgid "``ansible.netcommon.native`` parsing engine is fully supported with a Red Hat Ansible Automation Platform subscription."
msgstr "``ansible.netcommon.native`` エンジンの解析は、Red Hat Ansible Automation Platform サブスクリプションで完全にサポートされています。"

#: ../../rst/network/user_guide/cli_parsing.rst:166
msgid "Lastly in this task, the ``set_fact`` option sets the following ``interfaces`` fact for the device based on the now-structured data returned from ``cli_parse``:"
msgstr "このタスクの最後で、``set_fact`` オプションは、``interfaces`` から返された現在構造化されているデータに基づいて、デバイスに以下の ``cli_parse`` ファクトを設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:184
msgid "Linux example"
msgstr "Linux の例"

#: ../../rst/network/user_guide/cli_parsing.rst:186
msgid "You can also use the native parser to run commands and parse output from Linux hosts."
msgstr "ネイティブパーサーを使用してコマンドを実行し、Linux ホストからの出力を解析することもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:188
msgid "The output of a sample Linux  command (``ip addr show``) looks as follows:"
msgstr "Linux コマンドの出力例 (``ip addr show``) は以下のようになります。"

#: ../../rst/network/user_guide/cli_parsing.rst:203
msgid "Create the native template to match this output and store it as ``templates/fedora_ip_addr_show.yaml``:"
msgstr "この出力に一致するネイティブテンプレートを作成し、これを ``templates/fedora_ip_addr_show.yaml`` として保存します。"

#: ../../rst/network/user_guide/cli_parsing.rst:241
msgid "The ``shared`` key in the parser template allows the interface name to be used in subsequent parser entries. The use of examples and free-spacing mode with the regular expressions makes the template easier to read."
msgstr "パーサーテンプレートの ``shared`` キーを使用すると、インターフェース名を後続のパーサーエントリーで使用できます。正規表現で例とフリースペースモードを使用すると、テンプレートが読みやすくなります。"

#: ../../rst/network/user_guide/cli_parsing.rst:243
msgid "The following example task uses ``cli_parse`` with the native parser and the example template above to parse the Linux output:"
msgstr "以下のタスク例では、ネイティブパーサーのある ``cli_parse`` と、上記のサンプルテンプレートを使用して Linux の出力を解析します。"

#: ../../rst/network/user_guide/cli_parsing.rst:254
msgid "This task assumes you previously gathered facts to determine the ``ansible_distribution`` needed to locate the template. Alternately, you could provide the path in the  ``parser/template_path`` option."
msgstr "このタスクでは、以前にファクトを収集してテンプレートを見つけるのに必要な ``ansible_distribution`` を決定することを仮定しています。あるいは、``parser/template_path`` オプションでパスを指定することもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:257
msgid "Lastly in this task, the ``set_fact`` option sets the following ``interfaces`` fact for the host, based on the now-structured data returned from ``cli_parse``:"
msgstr "このタスクの最後で、``set_fact`` オプションは、``interfaces`` から返された現在構造化されているデータに基づいて、ホストに以下の ``cli_parse`` ファクトを設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:285
msgid "Parsing JSON"
msgstr "JSON の解析"

#: ../../rst/network/user_guide/cli_parsing.rst:287
msgid "Although Ansible will natively convert serialized JSON to Ansible native data when recognized, you can also use the ``cli_parse`` module for this conversion."
msgstr "Ansible は、認識時にシリアライズされた JSON を Ansible ネイティブデータに変換しますが、この変換に ``cli_parse`` モジュールを使用することもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:289
#: ../../rst/network/user_guide/cli_parsing.rst:315
#: ../../rst/network/user_guide/cli_parsing.rst:374
msgid "Example task:"
msgstr "タスクの例:"

#: ../../rst/network/user_guide/cli_parsing.rst:302
msgid "The ``show interface | json`` command is issued on the device."
msgstr "``show interface | json`` コマンドはデバイスで発行されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:303
msgid "The output is set as the ``interfaces`` fact for the device."
msgstr "この出力は、デバイスの ``interfaces`` ファクトとして設定されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:304
msgid "JSON support is provided primarily for playbook consistency."
msgstr "JSON のサポートは、主に Playbook の一貫性のために提供されています。"

#: ../../rst/network/user_guide/cli_parsing.rst:308
msgid "The use of ``ansible.netcommon.json`` is fully supported with a Red Hat Ansible Automation Platform subscription"
msgstr "``ansible.netcommon.json`` の使用は、Red Hat Ansible Automation Platform サブスクリプションで完全にサポートされています。"

#: ../../rst/network/user_guide/cli_parsing.rst:311
msgid "Parsing with ntc_templates"
msgstr "ntc_templates での解析"

#: ../../rst/network/user_guide/cli_parsing.rst:313
msgid "The ``ntc_templates`` python library includes pre-defined ``textfsm`` templates for parsing a variety of network device commands output."
msgstr "``ntc_templates`` python ライブラリーには、さまざまなネットワークデバイスコマンドの出力を解析する事前定義済みの ``textfsm`` テンプレートが含まれています。"

#: ../../rst/network/user_guide/cli_parsing.rst:328
msgid "The ``ansible_network_os`` of the device is converted to the ntc_template format ``cisco_nxos``. Alternately, you can provide the ``os`` with the ``parser/os`` option instead."
msgstr "デバイスの ``ansible_network_os`` は ntc_template 形式 ``cisco_nxos`` に変換されますが、代わりに ``parser/os`` オプションで ``os`` を指定することもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:329
msgid "The ``cisco_nxos_show_interface.textfsm`` template, included with the ``ntc_templates`` package, parses the output."
msgstr "``cisco_nxos_show_interface.textfsm`` パッケージに含まれる ``ntc_templates`` テンプレートは、出力を解析します。"

#: ../../rst/network/user_guide/cli_parsing.rst:330
msgid "See `the ntc_templates README <https://github.com/networktocode/ntc-templates/blob/master/README.md>`_ for additional information about the ``ntc_templates`` python library."
msgstr "``ntc_templates`` python ライブラリーに関する追加情報は、`ntc_templates の「README」 <https://github.com/networktocode/ntc-templates/blob/master/README.md>`_ を参照してください。"

#: ../../rst/network/user_guide/cli_parsing.rst:334
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the ``ntc_templates`` public APIs as documented."
msgstr "Red Hat Ansible Automation Platform のサブスクリプションのサポートは、文書化されている ``ntc_templates`` パブリック API の使用に限定されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:337
msgid "This task and and the predefined template sets the following fact as the ``interfaces`` fact for the host:"
msgstr "このタスクおよび事前定義されたテンプレートは、以下のファクトをホストの ``interfaces`` ファクトとして設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:370
msgid "Parsing with pyATS"
msgstr "pyATS での解析"

#: ../../rst/network/user_guide/cli_parsing.rst:372
msgid "``pyATS`` is part of the Cisco Test Automation & Validation Solution. It includes many predefined parsers for a number of network platforms and commands. You can use the predefined parsers that are part of the ``pyATS`` package with the ``cli_parse`` module."
msgstr "``pyATS`` は、Cisco Test Automation & Validation Solution の一部です。これには、多数のネットワークプラットフォームおよびコマンド用の定義済みパーサーが多数含まれています。``cli_parse`` モジュールでは、``pyATS`` パッケージに同梱される定義済みパーサーを使用できます。"

#: ../../rst/network/user_guide/cli_parsing.rst:388
msgid "The ``cli_parse`` modules converts the ``ansible_network_os`` automatically (in this example, ``ansible_network_os`` set to ``cisco.nxos.nxos``, converts to ``nxos`` for pyATS.  Alternately, you can set the OS with the ``parser/os`` option instead."
msgstr "``cli_parse`` モジュールは、自動的に ``ansible_network_os`` を変換します (この例では、``ansible_network_os`` は ``cisco.nxos.nxos`` に設定されていますが、pyATS の場合は ``nxos`` に変換されます。代わりに、``parser/os`` オプションを使用して OS を設定することもできます)。"

#: ../../rst/network/user_guide/cli_parsing.rst:389
#, python-format
msgid "Using a combination of the command and OS, the pyATS selects the following parser: https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/parsers/show%2520interface."
msgstr "コマンドと OS の組み合わせを使用して、pyATS がパーサー (https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/parsers/show%2520interface) を選択します。"

#: ../../rst/network/user_guide/cli_parsing.rst:390
msgid "The ``cli_parse`` module sets ``cisco.ios.ios`` to ``iosxe`` for pyATS. You can override this with the ``parser/os`` option."
msgstr "``cli_parse`` モジュールは、pyATS に対して ``cisco.ios.ios`` を ``iosxe`` に設定します。``parser/os`` オプションでこれを上書きできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:391
msgid "``cli_parse`` only uses the predefined parsers in pyATS. See the `pyATS documentation <https://developer.cisco.com/docs/pyats/>`_ and the full list of `pyATS included parsers <https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/parsers>`_."
msgstr "``cli_parse`` は pyATS の定義済みパーサーのみを使用します。`pyATS ドキュメント <https://developer.cisco.com/docs/pyats/>`_ と、`pyATS が含まれるパーサー <https://pubhub.devnetcloud.com/media/genie-feature-browser/docs/#/parsers>`_ の完全なリストを参照してください。"

#: ../../rst/network/user_guide/cli_parsing.rst:395
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the pyATS public APIs as documented."
msgstr "Red Hat Ansible Automation Platform のサブスクリプションサポートは、文書化されている pyATS パブリック API の使用に限定されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:398
#: ../../rst/network/user_guide/cli_parsing.rst:506
msgid "This task sets the following fact as the ``interfaces`` fact for the host:"
msgstr "このタスクは、ホストの ``interfaces`` ファクトとして以下のファクトを設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:436
msgid "Parsing with textfsm"
msgstr "textfsm で解析"

#: ../../rst/network/user_guide/cli_parsing.rst:438
msgid "``textfsm`` is a Python module which implements a template-based state machine for parsing semi-formatted text."
msgstr "``textfsm`` は、半フォーマットのテキストを解析するためにテンプレートベースの状態マシンを実装する Python モジュールです。"

#: ../../rst/network/user_guide/cli_parsing.rst:440
msgid "The following sample``textfsm`` template is stored as ``templates/nxos_show_interface.textfsm``"
msgstr "以下のサンプル ``textfsm`` テンプレートは、``templates/nxos_show_interface.textfsm`` の形式で保存されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:484
msgid "The following task uses the example template for ``textfsm`` with the ``cli_parse`` module."
msgstr "以下のタスクでは、``textfsm`` モジュールで ``cli_parse`` のサンプルテンプレートを使用します。"

#: ../../rst/network/user_guide/cli_parsing.rst:497
msgid "The ``ansible_network_os`` for the device (``cisco.nxos.nxos``) is converted to ``nxos``. Alternately you can provide the OS in the ``parser/os`` option instead."
msgstr "デバイスの ``ansible_network_os`` (``cisco.nxos.nxos``) は ``nxos`` に変換されます。代わりに ``parser/os`` オプションに OS を指定することもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:498
msgid "The textfsm template name defaulted to ``templates/nxos_show_interface.textfsm`` using a combination of the OS and command run. Alternately you can override the generated template path with the ``parser/template_path`` option."
msgstr "textfsm のテンプレート名は、OS とコマンドランの組み合わせにより、デフォルトで``templates/nxos_show_interface.textfsm`` となっています。また、``parser/template_path`` オプションで、生成されたテンプレートのパスを上書きすることもできます。"

#: ../../rst/network/user_guide/cli_parsing.rst:499
msgid "See the `textfsm README <https://github.com/google/textfsm>`_ for details."
msgstr "詳細は、`textfsm README <https://github.com/google/textfsm>`_ を参照してください。"

#: ../../rst/network/user_guide/cli_parsing.rst:500
msgid "``textfsm`` was previously made available as a filter plugin. Ansible users should transition to the ``cli_parse`` module."
msgstr "``textfsm`` は、以前はフィルタープラグインとして利用できました。Ansible ユーザーは、``cli_parse`` モジュールに移行する必要があります。"

#: ../../rst/network/user_guide/cli_parsing.rst:504
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the ``textfsm`` public APIs as documented."
msgstr "Red Hat Ansible Automation Platform のサブスクリプションのサポートは、文書化されている ``textfsm`` パブリック API の使用に限定されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:537
msgid "Parsing with TTP"
msgstr "TTP での解析"

#: ../../rst/network/user_guide/cli_parsing.rst:539
msgid "TTP is a Python library for semi-structured text parsing using templates. TTP uses a jinja-like syntax to limit the need for regular expressions. Users familiar with jinja templating may find the TTP template syntax familiar."
msgstr "TTP は、テンプレートを使用した半構造化テキスト解析用の Python ライブラリーです。TTP は、正規表現の必要性を制限するために、jinja に似た構文を使用します。jinja のテンプレート化に精通しているユーザーは、TTP テンプレートの構文に親しみを感じるかもしれません。"

#: ../../rst/network/user_guide/cli_parsing.rst:541
msgid "The following is an example TTP template stored as ``templates/nxos_show_interface.ttp``:"
msgstr "以下は、``templates/nxos_show_interface.ttp`` として保存された TTP テンプレートの例です。"

#: ../../rst/network/user_guide/cli_parsing.rst:548
msgid "The following task uses this template to parse the ``show interface`` command output:"
msgstr "以下のタスクでは、このテンプレートを使用して ``show interface`` コマンドの出力を解析します。"

#: ../../rst/network/user_guide/cli_parsing.rst:559
msgid "Taking a deeper dive in this task:"
msgstr "このタスクをより深く掘り下げます。"

#: ../../rst/network/user_guide/cli_parsing.rst:561
msgid "The default template path ``templates/nxos_show_interface.ttp`` was generated using the ``ansible_network_os`` for the host and ``command`` provided."
msgstr "デフォルトのテンプレートパス ``templates/nxos_show_interface.ttp`` は、ホストの ``ansible_network_os`` と、指定した ``command`` を使用して生成されました。"

#: ../../rst/network/user_guide/cli_parsing.rst:562
msgid "TTP supports several additional variables that will be passed to the parser. These include:"
msgstr "TTP は、パーサーに渡される追加変数をサポートします。これには以下が含まれます。"

#: ../../rst/network/user_guide/cli_parsing.rst:564
msgid "``parser/vars/ttp_init`` -  Additional parameter passed when the parser is initialized."
msgstr "``parser/vars/ttp_init`` - パーサーの初期化時に渡される追加のパラメーター。"

#: ../../rst/network/user_guide/cli_parsing.rst:565
msgid "``parser/vars/ttp_results`` -  Additional parameters used to influence the parser output."
msgstr "``parser/vars/ttp_results`` - パーサーの出力に影響を与えるために使用される追加のパラメーター。"

#: ../../rst/network/user_guide/cli_parsing.rst:566
msgid "``parser/vars/ttp_vars`` -  Additional variables made available in the template."
msgstr "``parser/vars/ttp_vars`` - テンプレートで利用可能な追加の変数"

#: ../../rst/network/user_guide/cli_parsing.rst:568
msgid "See the `TTP documentation <https://ttp.readthedocs.io>`_ for details."
msgstr "詳細は、`TTP documentation <https://ttp.readthedocs.io>`_ を参照してください。"

#: ../../rst/network/user_guide/cli_parsing.rst:571
msgid "The task sets the follow fact as the ``interfaces`` fact for the host:"
msgstr "このタスクは、ホストの ``interfaces`` ファクトとして follow ファクトを設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:587
msgid "Converting XML"
msgstr "XML の変換"

#: ../../rst/network/user_guide/cli_parsing.rst:591
msgid "This example task runs the ``show interface`` command and parses the output as XML:"
msgstr "このサンプルタスクでは、``show interface`` コマンドを実行し、出力を XML として解析します。"

#: ../../rst/network/user_guide/cli_parsing.rst:604
msgid "Red Hat Ansible Automation Platform subscription support is limited to the use of the ``xmltodict`` public APIs as documented."
msgstr "Red Hat Ansible Automation Platform のサブスクリプションのサポートは、文書化されている ``xmltodict`` パブリック API の使用に限定されます。"

#: ../../rst/network/user_guide/cli_parsing.rst:606
msgid "This task sets the ``interfaces`` fact for the host based on this returned output:"
msgstr "このタスクは、返された出力に基づいてホストの ``interfaces`` ファクトを設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:629
msgid "Advanced use cases"
msgstr "高度なユースケース"

#: ../../rst/network/user_guide/cli_parsing.rst:631
msgid "The ``cli_parse`` module supports several features to support more complex uses cases."
msgstr "``cli_parse`` モジュールは、より複雑なユースケースをサポートする複数の機能をサポートします。"

#: ../../rst/network/user_guide/cli_parsing.rst:634
msgid "Provide a full template path"
msgstr "完全なテンプレートパスを提供"

#: ../../rst/network/user_guide/cli_parsing.rst:636
msgid "Use the ``template_path`` option to override the default template path in the task:"
msgstr "``template_path`` オプションを使用して、タスクのデフォルトのテンプレートパスを上書きします。"

#: ../../rst/network/user_guide/cli_parsing.rst:649
msgid "Provide command to parser different than the command run"
msgstr "コマンド実行以外のパーサーを行うコマンドを指定"

#: ../../rst/network/user_guide/cli_parsing.rst:651
msgid "Use the ``command`` suboption for the ``parser`` to configure the command the parser expects if it is different from the command ``cli_parse`` runs:"
msgstr "``parser`` の ``command`` サブオプションを使用して、``cli_parse`` コマンドの実行とは異なる場合にパーサーが想定するコマンドを設定します。"

#: ../../rst/network/user_guide/cli_parsing.rst:663
msgid "Provide a custom OS value"
msgstr "カスタム OS 値を指定"

#: ../../rst/network/user_guide/cli_parsing.rst:665
msgid "Use the ``os`` suboption to the parser to directly set the OS instead of using ``ansible_network_os`` or ``ansible_distribution`` to generate the template path or with the specified parser engine:"
msgstr "テンプレートパスを生成する ``ansible_network_os`` や ``ansible_distribution``、または指定したパーサーエンジンを使用する代わりに、OS を直接設定するパーサーに ``os`` サブオプションを使用します。"

#: ../../rst/network/user_guide/cli_parsing.rst:685
msgid "Parse existing text"
msgstr "既存テキストの解析"

#: ../../rst/network/user_guide/cli_parsing.rst:687
msgid "Use the ``text`` option  instead of ``command`` to parse text collected earlier in the playbook."
msgstr "``command`` の代わりに ``text`` オプションを使用して、Playbook で以前に収集したテキストを解析します。"

#: ../../rst/network/user_guide/cli_parsing.rst:719
msgid ":ref:`develop_cli_parse_plugins`"
msgstr ":ref:`develop_cli_parse_plugins`"

#: ../../rst/network/user_guide/faq.rst:5
msgid "Ansible Network FAQ"
msgstr "Ansible Network FAQ"

#: ../../rst/network/user_guide/faq.rst:7
msgid "Topics"
msgstr "トピック"

#: ../../rst/network/user_guide/faq.rst:12
msgid "How can I improve performance for network playbooks?"
msgstr "ネットワークの Playbook のパフォーマンスを改善するにはどうすればよいですか"

#: ../../rst/network/user_guide/faq.rst:17
msgid "Consider ``strategy: free`` if you are running on multiple hosts"
msgstr "複数のホストで実行している場合は ``strategy: free`` について検討してください。"

#: ../../rst/network/user_guide/faq.rst:19
msgid "The ``strategy`` plugin tells Ansible how to order multiple tasks on multiple hosts. :ref:`Strategy<strategy_plugins>` is set at the playbook level."
msgstr "``strategy`` プラグインは、Ansible に対して複数のホストで複数のタスクを順序付ける方法を示します。:ref:`Strategy<strategy_plugins>` は Playbook レベルで設定されます。"

#: ../../rst/network/user_guide/faq.rst:21
msgid "The default strategy is ``linear``. With strategy set to ``linear``, Ansible waits until the current task has run on all hosts before starting the next task on any host. Ansible may have forks free, but will not use them until all hosts have completed the current task. If each task in your playbook must succeed on all hosts before you run the next task, use the ``linear`` strategy."
msgstr "デフォルトのストラテジーは ``linear`` です。ストラテジーを ``linear`` に設定すると、Ansible は、現在のタスクがすべてのホストで実行されるまで待機してから、任意のホストで次のタスクを開始します。Ansible はフォークを解放しているかもしれませんが、全てのホストが現在のタスクを完了するまでフォークを使用しません。次のタスクを実行する前に、Playbook の各タスクがすべてのホストで成功する必要がある場合は、``linear`` ストラテジーを使用します。"

#: ../../rst/network/user_guide/faq.rst:23
msgid "Using the ``free`` strategy, Ansible uses available forks to execute tasks on each host as quickly as possible. Even if an earlier task is still running on one host, Ansible executes later tasks on other hosts. The ``free`` strategy uses available forks more efficiently. If your playbook stalls on each task, waiting for one slow host, consider using ``strategy: free`` to boost overall performance."
msgstr "この ``free`` ストラテジーを使用すると、Ansible は、利用可能なフォークを使用して各ホストのタスクをできるだけ速く実行します。あるホストで前のタスクの実行が完了していない場合でも、Ansible は他のホストで後のタスクを実行します。この ``free`` ストラテジーでは、使用可能なフォークをより効率的に使用します。各タスクで Playbook が停滞し、1 つのホストの処理速度が遅い場合は、``strategy: free`` を使用して全体的なパフォーマンスを向上させることを検討してください。"

#: ../../rst/network/user_guide/faq.rst:28
msgid "Execute ``show running`` only if you absolutely must"
msgstr "絶対的に必要とされる場合にのみ ``show running`` を実行"

#: ../../rst/network/user_guide/faq.rst:30
msgid "The ``show running`` command is the most resource-intensive command to execute on a network device, because of the way queries are handled by the network OS. Using the command in your Ansible playbook will slow performance significantly, especially on large devices; repeating it will multiply the performance hit. If you have a playbook that checks the running config, then executes changes, then checks the running config again, you should expect that playbook to be very slow."
msgstr "この ``show running`` コマンドは、ネットワーク OS によるクエリーの処理方法のため、ネットワークデバイスで実行する最もリソースを消費するコマンドです。Ansible Playbook でこのコマンドを使用すると、特に大規模なデバイスではパフォーマンスが大幅に低下します。繰り返し実行すると、パフォーマンスへの影響が大きくなります。実行設定を確認してから変更を実行し、再び実行設定を確認する Playbook がある場合は、Playbook が非常に遅くなることが予想されます。"

#: ../../rst/network/user_guide/faq.rst:35
msgid "Use ``ProxyCommand`` only if you absolutely must"
msgstr "絶対的に必要とされる場合のみ ``ProxyCommand`` を使用"

#: ../../rst/network/user_guide/faq.rst:37
msgid "Network modules support the use of a :ref:`proxy or jump host<network_delegate_to_vs_ProxyCommand>` with the ``ProxyCommand`` parameter. However, when you use a jump host, Ansible must open a new SSH connection for every task, even if you are using a persistent connection type (``network_cli`` or ``netconf``). To maximize the performance benefits of the persistent connection types introduced in version 2.5, avoid using jump hosts whenever possible."
msgstr "ネットワークモジュールは、``ProxyCommand`` パラメーターで :ref:`プロキシーまたはジャンプホスト<network_delegate_to_vs_ProxyCommand>` の使用がサポートされています。ただし、ジャンプホストを使用する場合は、永続的な接続タイプ (``network_cli`` または ``netconf``) を使用している場合でも、タスクごとに新しい SSH 接続を開く必要があります。バージョン 2.5 で導入された永続接続タイプのパフォーマンス上の利点を最大限に活用するには、可能な限りジャンプホストを使用しないでください。"

#: ../../rst/network/user_guide/faq.rst:42
msgid "Set ``--forks`` to match your needs"
msgstr "必要に応じて ``--forks`` を設定"

#: ../../rst/network/user_guide/faq.rst:44
msgid "Every time Ansible runs a task, it forks its own process. The ``--forks`` parameter defines the number of concurrent tasks - if you retain the default setting, which is ``--forks=5``, and you are running a playbook on 10 hosts, five of those hosts will have to wait until a fork is available. Of course, the more forks you allow, the more memory and processing power Ansible will use. Since most network tasks are run on the control host, this means your laptop can quickly become cpu- or memory-bound."
msgstr "Ansible はタスクを実行するたびに、独自のプロセスをフォークします。``--forks`` パラメーターは、同時実行タスクの数を定義します。デフォルト設定 (``--forks=5``) のままで、10 台のホストで Playbook を実行していると、そのうち 5 台のホストは、フォークが使用可能になるまで待機する必要があります。もちろん、フォークの数が増えれば増えるほど、Ansible はより多くのメモリーと処理能力を使うことになります。ネットワークタスクの大半はコントロールホストで実行されるため、ラップトップでは、CPU またはメモリーがすぐに枯渇することになります。"

#: ../../rst/network/user_guide/faq.rst:49
msgid "Why is my output sometimes replaced with ``********``?"
msgstr "出力が ``********`` に置き換えられることがあるのはなぜですか"

#: ../../rst/network/user_guide/faq.rst:51
msgid "Ansible replaces any string marked ``no_log``, including passwords, with ``********`` in Ansible output. This is done by design, to protect your sensitive data. Most users are happy to have their passwords redacted. However, Ansible replaces every string that matches your password with ``********``. If you use a common word for your password, this can be a problem. For example, if you choose ``Admin`` as your password, Ansible will replace every instance of the word ``Admin`` with ``********`` in your output. This may make your output harder to read. To avoid this problem, select a secure password that will not occur elsewhere in your Ansible output."
msgstr "Ansible は、Ansible 出力で、パスワードを含む ``no_log`` と印された文字列を ``********`` に置き換えます。これは、機密データを保護するために設計されています。ほとんどのユーザーは、自身のパスワードが伏字になることを希望します。ただし、Ansible はパスワードに一致するすべての文字列を ``********`` に置き換えます。パスワードに一般的な単語を使用すると、問題が発生する可能性があります。たとえば、``Admin`` をパスワードとした場合、``Admin`` は出力内にあるその単語のすべてのインスタンスを ``********`` に置き換えます。これにより、出力が読みにくくなる場合があります。この問題を回避するには、他の Ansible 出力場所では使用されない安全なパスワードを選択してください。"

#: ../../rst/network/user_guide/faq.rst:56
msgid "Why do the ``*_config`` modules always return ``changed=true`` with abbreviated commands?"
msgstr "省略されたコマンドで ``*_config`` モジュールが常に ``changed=true`` を返すのはなぜですか"

#: ../../rst/network/user_guide/faq.rst:58
msgid "When you issue commands directly on a network device, you can use abbreviated commands. For example, ``int g1/0/11`` and ``interface GigabitEthernet1/0/11`` do the same thing; ``shut`` and ``shutdown`` do the same thing. Ansible Network ``*_command`` modules work with abbreviations, because they run commands through the network OS."
msgstr "ネットワークデバイスで直接コマンドを実行する場合は、省略されたコマンドを使用できます。たとえば、``int g1/0/11`` と ``interface GigabitEthernet1/0/11`` は、同じ動作になります。``shut`` と ``shutdown`` も同じ動作になります。Ansible Network の ``*_command`` モジュールは、ネットワーク OS を介してコマンドを実行するため、省略形で動作します。"

#: ../../rst/network/user_guide/faq.rst:60
msgid "When committing configuration, however, the network OS converts abbreviations into long-form commands. Whether you use ``shut`` or ``shutdown`` on ``GigabitEthernet1/0/11``, the result in the configuration is the same: ``shutdown``."
msgstr "ただし、設定をコミットすると、ネットワーク OS は省略形を長い形式のコマンドに変換します。``GigabitEthernet1/0/11`` で ``shut`` または ``shutdown`` を使用した場合の設定は同じで、``shutdown`` となります。"

#: ../../rst/network/user_guide/faq.rst:62
msgid "Ansible Network ``*_config`` modules compare the text of the commands you specify in ``lines`` to the text in the configuration. If you use ``shut`` in the ``lines`` section of your task, and the configuration reads  ``shutdown``, the module returns ``changed=true`` even though the configuration is already correct. Your task will update the configuration every time it runs."
msgstr "Ansible Network の ``*_config`` モジュールは、``lines`` で指定したコマンドのテキストを設定のテキストと比較します。タスクの ``lines`` セクションで ``shut`` を使用し、設定が ``shutdown`` を読み込む場合は、設定が正しいにもかかわらず、モジュールが ``changed=true`` を返します。タスクを実行するたびに設定が更新されます。"

#: ../../rst/network/user_guide/faq.rst:64
msgid "To avoid this problem, use long-form commands with the ``*_config`` modules:"
msgstr "この問題を回避するには、``*_config`` モジュールで長い形式のコマンドを使用します。"

#: ../../rst/network/user_guide/index.rst:15
msgid "Advanced Topics"
msgstr "高度なトピック"

#: ../../rst/network/user_guide/index.rst:5
msgid "Network Advanced Topics"
msgstr "ネットワークの高度なトピック"

#: ../../rst/network/user_guide/index.rst:7
msgid "Once you have mastered the basics of network automation with Ansible, as presented in :ref:`network_getting_started`, use this guide understand platform-specific details, optimization, and troubleshooting tips for Ansible for network automation."
msgstr ":ref:`network_getting_started` に記載されているように、Ansible を使用したネットワーク自動化の基本を習得したら、本ガイドを参照して、ネットワーク自動化に関する Ansible のプラットフォーム固有の詳細、最適化、およびトラブルシューティングのヒントを理解します。"

#: ../../rst/network/user_guide/index.rst:11
msgid "This guide is intended for network engineers using Ansible for automation. It covers advanced topics. If you understand networks and Ansible, this guide is for you. You may read through the entire guide if you choose, or use the links below to find the specific information you need."
msgstr "このガイドは、自動化に Ansible を使用するネットワークエンジニアを対象とした高度なトピックを説明します。ネットワークと Ansible を理解しているユーザーを対象としています。必要に応じてガイド全体を読むか、次のリンクを使用して必要な特定情報を選択してください。"

#: ../../rst/network/user_guide/index.rst:13
msgid "If you're new to Ansible, or new to using Ansible for network automation, start with the :ref:`network_getting_started`."
msgstr "Ansible を初めて使用する場合や、ネットワーク管理に Ansible を初めて使用する場合は、最初に「:ref:`network_getting_started`」をお読みください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:5
msgid "Ansible Network Examples"
msgstr "Ansible ネットワークの例"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:7
msgid "This document describes some examples of using Ansible to manage your network infrastructure."
msgstr "本ガイドでは、Ansible を使用してネットワークインフラストラクチャーを管理する例を説明します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:15
msgid "This example requires the following:"
msgstr "この例では、以下が必要です。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:17
msgid "**Ansible 2.10** (or higher) installed. See :ref:`intro_installation_guide` for more information."
msgstr "**Ansible 2.10** (またはそれ以上) がインストールされている。詳細は「:ref:`intro_installation_guide`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:18
msgid "One or more network devices that are compatible with Ansible."
msgstr "Ansible と互換性がある 1 つ以上ネットワークデバイス。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:19
msgid "Basic understanding of YAML :ref:`yaml_syntax`."
msgstr "YAML :ref:`yaml_syntax` の基本知識"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:20
msgid "Basic understanding of Jinja2 templates. See :ref:`playbooks_templating` for more information."
msgstr "Jinja2 テンプレートの基本的な理解。詳細は「:ref:`playbooks_templating`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:21
msgid "Basic Linux command line use."
msgstr "基本的な Linux コマンドラインの使用。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:22
msgid "Basic knowledge of network switch & router configurations."
msgstr "ネットワークスイッチおよびルーター設定に関する基本知識。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:26
msgid "Groups and variables in an inventory file"
msgstr "インベントリーファイルのグループおよび変数"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:28
msgid "An ``inventory`` file is a YAML or INI-like configuration file that defines the mapping of hosts into groups."
msgstr "``inventory`` ファイルは、ホストからグループへのマッピングを定義する YAML または INI のような設定ファイルです。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:30
msgid "In our example, the inventory file defines the groups ``eos``, ``ios``, ``vyos`` and a \"group of groups\" called ``switches``. Further details about subgroups and inventory files can be found in the :ref:`Ansible inventory Group documentation <subgroups>`."
msgstr "この例では、インベントリーファイルは ``eos``、``ios``、および ``vyos`` と、``switches`` と呼ばれる「グループのグループ」を定義します。サブグループとインベントリーファイルの詳細は「:ref:`Ansible inventory Group documentation <subgroups>`」にあります。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:32
msgid "Because Ansible is a flexible tool, there are a number of ways to specify connection information and credentials. We recommend using the ``[my_group:vars]`` capability in your inventory file."
msgstr "Ansible は柔軟なツールであるため、接続情報および認証情報を指定する方法は複数あります。インベントリーファイルで ``[my_group:vars]`` 機能を使用することが推奨されます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:81
msgid "If you use ssh-agent, you do not need the ``ansible_password`` lines. If you use ssh keys, but not ssh-agent, and you have multiple keys, specify the key to use for each connection in the ``[group:vars]`` section with ``ansible_ssh_private_key_file=/path/to/correct/key``. For more information on ``ansible_ssh_`` options see :ref:`behavioral_parameters`."
msgstr "ssh-agent を使用する場合、``ansible_password`` 行は必要ありません。ssh-agent でなく ssh キーを使用し、鍵が複数ある場合は、``ansible_ssh_private_key_file=/path/to/correct/key`` の ``[group:vars]`` セクションで、各接続に使用するキーを指定します。``ansible_ssh_`` オプションの詳細は、「:ref:`behavioral_parameters`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:85
msgid "Never store passwords in plain text."
msgstr "プレーンテキストにパスワードを保存しないでください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:88
msgid "Ansible vault for password encryption"
msgstr "パスワード暗号化用の Ansible Vault"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:90
msgid "The \"Vault\" feature of Ansible allows you to keep sensitive data such as passwords or keys in encrypted files, rather than as plain text in your playbooks or roles. These vault files can then be distributed or placed in source control. See :ref:`playbooks_vault` for more information."
msgstr "Ansible の「Vault」機能を使用すると、パスワードやキーなどの機密データを、Playbook やロールのプレーンテキストとしてではなく、暗号化されたファイルに保存することができます。この Vault ファイルは、ソース制御に配布または配置することができます。詳細は、「:ref:`playbooks_vault`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:92
msgid "Here's what it would look like if you specified your SSH passwords (encrypted with Ansible Vault) among your variables:"
msgstr "変数内に SSH パスワード (Ansible Vault で暗号化) を指定すると、以下のようになります。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:108
msgid "Common inventory variables"
msgstr "共通のインベントリー変数"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:110
msgid "The following variables are common for all platforms in the inventory, though they can be overwritten for a particular inventory group or host."
msgstr "以下の変数はインベントリー内のすべてのプラットフォームに共通ですが、特定のインベントリーグループまたはホストについて上書きできます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_connection"
msgstr "ansible_connection"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:114
msgid "Ansible uses the ansible-connection setting to determine how to connect to a remote device. When working with Ansible Networking, set this to an appropriate network connection option, such as``ansible.netcommon.network_cli``, so Ansible treats the remote node as a network device with a limited execution environment. Without this setting, Ansible would attempt to use ssh to connect to the remote and execute the Python script on the network device, which would fail because Python generally isn't available on network devices."
msgstr "Ansible は ansible-connection 設定を使用してリモートデバイスへの接続方法を決定します。Ansible ネットワークを使用する場合は、適切なネットワーク接続オプション (``ansible.netcommon.network_cli`` など) に設定して、Ansible が実行環境が制限されたネットワークデバイスとしてリモートノードを扱うようにします。この設定がないと、Ansible は ssh を使用してリモートに接続し、Python スクリプトをネットワークデバイスで実行しようとしますが、Python は一般的にネットワークデバイスで使用できないため失敗します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_network_os"
msgstr "ansible_network_os"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:116
msgid "Informs Ansible which Network platform this hosts corresponds to. This is required when using the ``ansible.netcommon.*`` connection options."
msgstr "このホストに対応するネットワークプラットフォームを Ansible に通知します。これは、``ansible.netcommon.*`` 接続オプションを使用する場合に必要です。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_user"
msgstr "ansible_user"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:117
msgid "The user to connect to the remote device (switch) as. Without this the user that is running ``ansible-playbook`` would be used. Specifies which user on the network device the connection"
msgstr "リモートデバイス (スイッチ) に接続するユーザーです。これがないと、このユーザーが ``ansible-playbook`` を実行しているユーザーに使用されます。ネットワークデバイス上のどのユーザーに接続するかを指定します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_password"
msgstr "ansible_password"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:120
msgid "The corresponding password for ``ansible_user`` to log in as. If not specified SSH key will be used."
msgstr "``ansible_user`` でログインするためのパスワードです。指定しない場合は、SSH キーが使用されます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_become"
msgstr "ansible_become"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:122
msgid "If enable mode (privilege mode) should be used, see the next section."
msgstr "Enable モード (特権モード) を使用する場合は、次のセクションを参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst
msgid "ansible_become_method"
msgstr "ansible_become_method"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:124
msgid "Which type of `become` should be used, for ``network_cli`` the only valid choice is ``enable``."
msgstr "どのタイプ `become` を使用すべきか。``network_cli`` では、有効な選択は ``enable`` のみです。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:127
msgid "Privilege escalation"
msgstr "権限昇格"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:129
msgid "Certain network platforms, such as Arista EOS and Cisco IOS, have the concept of different privilege modes. Certain network modules, such as those that modify system state including users, will only work in high privilege states. Ansible supports ``become`` when using ``connection: ansible.netcommon.network_cli``. This allows privileges to be raised for the specific tasks that need them. Adding ``become: yes`` and ``become_method: enable`` informs Ansible to go into privilege mode before executing the task, as shown here:"
msgstr "Arista EOS や Cisco IOS などの特定のネットワークプラットフォームには、異なる特権モードの概念があります。ユーザーを含むシステム状態を変更するような特定のネットワークモジュールは、高特権状態でのみ動作します。Ansible は、``connection: ansible.netcommon.network_cli`` の使用時に、``become`` をサポートします。これにより、権限を必要とする特定のタスクに対して権限を設定できます。次に示すように、``become: yes`` および ``become_method: enable`` を追加すると、タスクを実行する前に特権モードに入るように Ansible に通知します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:139
msgid "For more information, see the :ref:`using become with network modules<become_network>` guide."
msgstr "詳細は「:ref:`ネットワークモジュールで become の使用<become_network>`」ガイドを参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:143
msgid "Jump hosts"
msgstr "ジャンプホスト"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:145
msgid "If the Ansible Controller does not have a direct route to the remote device and you need to use a Jump Host, please see the :ref:`Ansible Network Proxy Command <network_delegate_to_vs_ProxyCommand>` guide for details on how to achieve this."
msgstr "Ansible Controller がリモートデバイスへの直接ルートがなく、ジャンプホストを使用する必要がある場合は、これを実現する方法について、「:ref:`Ansible ネットワークプロキシーコマンド <network_delegate_to_vs_ProxyCommand>`」ガイドを参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:148
msgid "Example 1: collecting facts and creating backup files with a playbook"
msgstr "例 1: Playbook でファクトを収集し、バックアップファイルの作成"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:150
msgid "Ansible facts modules gather system information 'facts' that are available to the rest of your playbook."
msgstr "Ansible ファクトモジュールは、他の Playbook で利用可能なシステム情報の「ファクト」を収集します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:152
msgid "Ansible Networking ships with a number of network-specific facts modules. In this example, we use the ``_facts`` modules :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>`, :ref:`cisco.ios.ios_facts <ansible_collections.cisco.ios.ios_facts_module>` and :ref:`vyos.vyos.vyos_facts <ansible_collections.vyos.vyos.vyos_facts_module>` to connect to the remote networking device. As the credentials are not explicitly passed with module arguments, Ansible uses the username and password from the inventory file."
msgstr "Ansible ネットワークには、ネットワーク固有のファクトモジュールがいくつか付属しています。この例では、``_facts`` モジュール (:ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>`、:ref:`cisco.ios.ios_facts <ansible_collections.cisco.ios.ios_facts_module>`、および :ref:`vyos.vyos.vyos_facts <ansible_collections.vyos.vyos.vyos_facts_module>`) を使用し、リモートネットワーキングデバイスに接続します。認証情報はモジュール引数とともに明示的に渡されないため、Ansible はインベントリーファイルからのユーザー名とパスワードを使用します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:154
msgid "Ansible's \"Network Fact modules\" gather information from the system and store the results in facts prefixed with ``ansible_net_``. The data collected by these modules is documented in the `Return Values` section of the module docs, in this case :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` and :ref:`vyos.vyos.vyos_facts <ansible_collections.vyos.vyos.vyos_facts_module>`. We can use the facts, such as ``ansible_net_version`` late on in the \"Display some facts\" task."
msgstr "Ansibleの「ネットワークファクトモジュール」はシステムから情報を収集し、``ansible_net_`` の接頭辞が付いたファクトに結果を格納します。これらのモジュールによって収集されるデータは、モジュールドキュメントの `Return Values` セクション (この場合は :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` および :ref:`vyos.vyos.vyos_facts <ansible_collections.vyos.vyos.vyos_facts_module>`) に記載されています。``ansible_net_version`` などのファクトは、「Display some facts (一部のファクトを表示する)」タスクの後半で使用できます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:156
msgid "To ensure we call the correct mode (``*_facts``) the task is conditionally run based on the group defined in the inventory file, for more information on the use of conditionals in Ansible Playbooks see :ref:`the_when_statement`."
msgstr "正しいモード (``*_facts``) を呼び出すようにするには、インベントリーファイルに定義されたグループに基づいてタスクが条件付きで実行されます。Ansible Playbook での条件付き使用の詳細は、「:ref:`the_when_statement`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:158
msgid "In this example, we will create an inventory file containing some network switches, then run a playbook to connect to the network devices and return some information about them."
msgstr "この例では、一部のネットワークスイッチを含むインベントリーファイルを作成してから、Playbook を実行してネットワークデバイスに接続し、その情報を返します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:161
msgid "Step 1: Creating the inventory"
msgstr "ステップ 1: インベントリーの作成"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:163
msgid "First, create a file called ``inventory``, containing:"
msgstr "まず、以下を含む ``inventory`` という名前のファイルを作成します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:183
msgid "Step 2: Creating the playbook"
msgstr "ステップ 2: Playbook の作成"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:185
msgid "Next, create a playbook file called ``facts-demo.yml`` containing the following:"
msgstr "次に、以下を含む ``facts-demo.yml`` という名前の Playbook ファイルを作成します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:285
msgid "Step 3: Running the playbook"
msgstr "ステップ 3: Playbook の実行"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:287
msgid "To run the playbook, run the following from a console prompt:"
msgstr "Playbook を実行するには、コンソールプロンプトから以下を実行します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:293
msgid "This should return output similar to the following:"
msgstr "このコマンドを実行すると、以下のような出力が返されます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:303
msgid "Step 4: Examining the playbook results"
msgstr "手順 4: Playbook の結果の検証"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:305
msgid "Next, look at the contents of the file we created containing the switch facts:"
msgstr "次に、スイッチファクトを含む作成したファイルの内容を確認します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:311
msgid "You can also look at the backup files:"
msgstr "バックアップファイルを確認することもできます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:318
msgid "If `ansible-playbook` fails, please follow the debug steps in :ref:`network_debug_troubleshooting`."
msgstr "`ansible-playbook` が失敗する場合は、:ref:`network_debug_troubleshooting` のデバッグ手順に従ってください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:324
msgid "Example 2: simplifying playbooks with network agnostic modules"
msgstr "例 2: ネットワークに依存しないモジュールを使用した Playbook の単純化"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:326
msgid "(This example originally appeared in the `Deep Dive on cli_command for Network Automation <https://www.ansible.com/blog/deep-dive-on-cli-command-for-network-automation>`_ blog post by Sean Cavanaugh -`@IPvSean <https://github.com/IPvSean>`_)."
msgstr "(この例は、元々、Sean Cavanaugh (`@IPvSean <https://github.com/IPvSean>`_) 氏が投稿したブログ「`Deep Dive on cli_command for Network Automation <https://www.ansible.com/blog/deep-dive-on-cli-command-for-network-automation>`_」で紹介されました。)"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:328
msgid "If you have two or more network platforms in your environment, you can use the network agnostic modules to simplify your playbooks. You can use network agnostic modules such as ``ansible.netcommon.cli_command`` or ``ansible.netcommon.cli_config`` in place of the platform-specific modules such as ``arista.eos.eos_config``, ``cisco.ios.ios_config``, and ``junipernetworks.junos.junos_config``. This reduces the number of tasks and conditionals you need in your playbooks."
msgstr "環境内に複数のネットワークプラットフォームがある場合は、ネットワークに依存しないモジュールを使用して、Playbook を簡素化できます。``arista.eos.eos_config``、``cisco.ios.ios_config``、``junipernetworks.junos.junos_config`` などのプラットフォーム固有のモジュールの代わりに、``ansible.netcommon.cli_command``、``ansible.netcommon.cli_config`` などのネットワークに依存しないモジュールを使用できます。これにより、Playbook に必要なタスクおよび条件の数が減ります。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:331
msgid "Network agnostic modules require the :ref:`ansible.netcommon.network_cli <ansible_collections.ansible.netcommon.network_cli_connection>` connection plugin."
msgstr "ネットワークに依存しないモジュールには、:ref:`ansible.netcommon.network_cli <ansible_collections.ansible.netcommon.network_cli_connection>` 接続プラグインが必要です。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:335
msgid "Sample playbook with platform-specific modules"
msgstr "プラットフォーム固有のモジュールを含む Playbook のサンプル"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:337
msgid "This example assumes three platforms, Arista EOS, Cisco NXOS, and Juniper JunOS.  Without the network agnostic modules, a sample playbook might contain the following three tasks with platform-specific commands:"
msgstr "この例では、Arista EOS、Cisco NXOS、Juniper JunOS の 3 つのプラットフォームを想定しています。ネットワークに依存しないモジュールを使用しないと、サンプル Playbook にはプラットフォーム固有のコマンドと共に、以下の 3 つのタスクが含まれる場合があります。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:358
msgid "Simplified playbook with ``cli_command`` network agnostic module"
msgstr "``cli_command`` ネットワークに依存しないモジュールを使用した Playbook の簡素化"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:360
msgid "You can replace these platform-specific modules with the network agnostic ``ansible.netcommon.cli_command`` module as follows:"
msgstr "これらのプラットフォーム固有のモジュールは、以下のようにネットワークに依存しない ``ansible.netcommon.cli_command`` モジュールに置き換えることができます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:407
msgid "If you use groups and group_vars by platform type, this playbook can be further simplified to :"
msgstr "プラットフォームタイプ別にグループおよび group_vars を使用する場合は、この Playbook をさらに簡単にできます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:423
msgid "You can see a full example of this using group_vars and also a configuration backup example at `Network agnostic examples <https://github.com/network-automation/agnostic_example>`_."
msgstr "group_vars の完全例と設定バックアップの例は、`ネットワークに依存しない例 <https://github.com/network-automation/agnostic_example>`_ で確認できます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:426
msgid "Using multiple prompts with the  ``ansible.netcommon.cli_command``"
msgstr "``ansible.netcommon.cli_command`` を含む複数のプロンプトの使用"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:428
msgid "The ``ansible.netcommon.cli_command`` also supports multiple prompts."
msgstr "``ansible.netcommon.cli_command`` は、複数のプロンプトもサポートします。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:449
msgid "See the :ref:`ansible.netcommon.cli_command <cli_command_module>` for full documentation on this command."
msgstr "このコマンドに関するドキュメントは、「:ref:`ansible.netcommon.cli_command <cli_command_module>`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:453
msgid "Implementation Notes"
msgstr "実装に関する注意点"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:457
msgid "Demo variables"
msgstr "デモ変数"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:459
msgid "Although these tasks are not needed to write data to disk, they are used in this example to demonstrate some methods of accessing facts about the given devices or a named host."
msgstr "これらのタスクは、ディスクにデータを書き込む必要はありませんが、この例では、特定のデバイスまたは名前付きホストのファクトにアクセスする方法を実証するために使用されます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:461
msgid "Ansible ``hostvars`` allows you to access variables from a named host. Without this we would return the details for the current host, rather than the named host."
msgstr "Ansible ``hostvars`` を使用すると、名前付きホストから変数にアクセスすることができます。これを使用しないと、名前付きホストではなく、現在のホストの詳細が返されます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:463
msgid "For more information, see :ref:`magic_variables_and_hostvars`."
msgstr "詳細情報は、「:ref:`magic_variables_and_hostvars`」を参照してください。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:466
msgid "Get running configuration"
msgstr "実行中の設定の取得"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:468
msgid "The :ref:`arista.eos.eos_config <ansible_collections.arista.eos.eos_config_module>` and :ref:`vyos.vyos.vyos_config <ansible_collections.vyos.vyos.vyos_config_module>` modules have a ``backup:`` option that when set will cause the module to create a full backup of the current ``running-config`` from the remote device before any changes are made. The backup file is written to the ``backup`` folder in the playbook root directory. If the directory does not exist, it is created."
msgstr ":ref:`arista.eos.eos_config <ansible_collections.arista.eos.eos_config_module>` モジュールおよび :ref:`vyos.vyos.vyos_config <ansible_collections.vyos.vyos.vyos_config_module>` モジュールには、設定されている場合は、変更が行われる前にリモートデバイスから現在の ``running-config`` のフルバックアップを作成する ``backup:`` オプションがあります。バックアップファイルは、Playbook のルートディレクトリー内の ``backup`` ディレクトリーに書き込まれます。このディレクトリーが存在しない場合は作成されます。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:470
msgid "To demonstrate how we can move the backup file to a different location, we register the result and move the file to the path stored in ``backup_path``."
msgstr "バックアップファイルを別の場所に移動する方法を実証するために、結果を登録し、ファイルを ``backup_path`` に保存されているパスに移動します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:472
msgid "Note that when using variables from tasks in this way we use double quotes (``\"``) and double curly-brackets (``{{...}}`` to tell Ansible that this is a variable."
msgstr "この方法でタスクの変数を使用する場合は、Ansible にこれが変数であることを伝えるために、二重引用符 (``\"``) と二重中括弧 (``{{...}}``) を使用します。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:475
msgid "Troubleshooting"
msgstr "トラブルシューティング"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:477
msgid "If you receive an connection error please double check the inventory and playbook for typos or missing lines. If the issue still occurs follow the debug steps in :ref:`network_debug_troubleshooting`."
msgstr "接続エラーを受け取った場合は、インベントリーと Playbook で誤字または欠落している行がないか再確認してください。問題が解決しない場合は、:ref:`network_debug_troubleshooting` のデバッグ手順に従います。"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:481
msgid ":ref:`network_guide`"
msgstr ":ref:`network_guide`"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:482
msgid ":ref:`intro_inventory`"
msgstr ":ref:`intro_inventory`"

#: ../../rst/network/user_guide/network_best_practices_2.5.rst:483
msgid ":ref:`Keeping vaulted variables visible <tip_for_variables_and_vaults>`"
msgstr ":ref:`Keeping vaulted variables visible <tip_for_variables_and_vaults>`"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:5
msgid "Network Debug and Troubleshooting Guide"
msgstr "ネットワークデバッグおよびトラブルシューティングガイド"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:7
msgid "This section discusses how to debug and troubleshoot network modules in Ansible."
msgstr "本セクションでは、Ansible でネットワークモジュールをデバッグし、トラブルシューティングを行う方法を説明します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:14
msgid "How to troubleshoot"
msgstr "トラブルシューティングの方法"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:16
msgid "Ansible network automation errors generally fall into one of the following categories:"
msgstr "Ansible ネットワーク自動化エラーは通常、以下のカテゴリーのいずれかに分類されます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst
msgid "Authentication issues"
msgstr "認証の問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:19
msgid "Not correctly specifying credentials"
msgstr "認証情報を正しく指定できない"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:20
msgid "Remote device (network switch/router) not falling back to other other authentication methods"
msgstr "リモートデバイス (ネットワークスイッチ/ルーター) が他の認証方法にフォールバックしない"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:21
msgid "SSH key issues"
msgstr "SSH キーの問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:439
msgid "Timeout issues"
msgstr "タイムアウトの問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:23
msgid "Can occur when trying to pull a large amount of data"
msgstr "大量のデータを取得しようとすると発生することがある"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:24
msgid "May actually be masking a authentication issue"
msgstr "認証の問題を実際にマスクする可能性がある"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:600
msgid "Playbook issues"
msgstr "Playbook の問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:26
msgid "Use of ``delegate_to``, instead of ``ProxyCommand``. See :ref:`network proxy guide <network_delegate_to_vs_ProxyCommand>` for more information."
msgstr "``ProxyCommand`` の代わりに ``delegate_to`` を使用します。詳細は、「:ref:`ネットワークプロキシーガイド <network_delegate_to_vs_ProxyCommand>`」を参照してください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:28
msgid "``unable to open shell``"
msgstr "``unable to open shell``"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:30
msgid "The ``unable to open shell`` message means that the ``ansible-connection`` daemon has not been able to successfully talk to the remote network device. This generally means that there is an authentication issue. See the \"Authentication and connection issues\" section in this document for more information."
msgstr "``unable to open shell`` メッセージは、``ansible-connection`` デーモンがリモートネットワークデバイスと正常に通信できなかったことを示します。これは通常、認証の問題があることを意味します。詳細については、このドキュメントの「認証と接続の問題」を参照してください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:37
msgid "Enabling Networking logging and how to read the logfile"
msgstr "ネットワークロギングの有効化とログファイルの読み取り方法"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:39
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:96
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:156
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:199
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:256
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:294
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:321
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:426
msgid "**Platforms:** Any"
msgstr "**プラットフォーム:** 任意"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:41
msgid "Ansible includes logging to help diagnose and troubleshoot issues regarding Ansible Networking modules."
msgstr "Ansible には、Ansible ネットワークモジュールに関する問題の診断とトラブルシューティングに役立つロギングが含まれます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:43
msgid "Because logging is very verbose, it is disabled by default. It can be enabled with the :envvar:`ANSIBLE_LOG_PATH` and :envvar:`ANSIBLE_DEBUG` options on the ansible-controller, that is the machine running ``ansible-playbook``."
msgstr "ロギングは非常に詳細なため、デフォルトでは無効になっています。これは、ansible-controller の :envvar:`ANSIBLE_LOG_PATH` オプションおよび :envvar:`ANSIBLE_DEBUG` オプションで有効にできます。これは、``ansible-playbook`` を実行しているマシンです。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:45
msgid "Before running ``ansible-playbook``, run the following commands to enable logging::"
msgstr "``ansible-playbook`` を実行する前に、以下のコマンドを実行してロギングを有効にします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:55
msgid "After Ansible has finished running you can inspect the log file which has been created on the ansible-controller:"
msgstr "Ansible の実行が完了したら、ansible-controller で作成されたログファイルを確認できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:73
msgid "From the log notice:"
msgstr "このログ通知は、以下のようになります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:75
msgid "``p=28990`` Is the PID (Process ID) of the ``ansible-connection`` process"
msgstr "``p=28990`` ``ansible-connection`` プロセスの PID (プロセス ID) です。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:76
msgid "``u=fred`` Is the user `running` ansible, not the remote-user you are attempting to connect as"
msgstr "``u=fred`` ansible を `実行` しているユーザーです (接続しようとしているリモートユーザーではありません)。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:77
msgid "``creating new control socket for host veos01:22 as user admin`` host:port as user"
msgstr "``ホスト veos01:22 の新しいコントロールソケットをユーザー管理者`` ユーザーとして host:port"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:78
msgid "``control socket path is`` location on disk where the persistent connection socket is created"
msgstr "``control socket path is`` 永続接続ソケットが作成されるディスクの場所"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:79
msgid "``using connection plugin network_cli`` Informs you that persistent connection is being used"
msgstr "``using connection plugin network_cli`` 永続接続が使用されていることが通知されます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:80
msgid "``connection established to veos01 in 0:00:22.580626`` Time taken to obtain a shell on the remote device"
msgstr "``connection established to veos01 in 0:00:22.580626`` リモートデバイスでシェルの取得にかかった時間"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:88
msgid "Because the log files are verbose, you can use grep to look for specific information. For example, once you have identified the ``pid`` from the ``creating new control socket for host`` line you can search for other connection log entries::"
msgstr "ログファイルは冗長であるため、grepを使用して特定の情報を検索できます。たとえば、``creating new control socket for host`` 行から ``pid`` を特定したら、他の接続ログエントリーを検索できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:94
msgid "Enabling Networking device interaction logging"
msgstr "ネットワークデバイスの対話ロギングの有効化"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:98
msgid "Ansible includes logging of device interaction in the log file to help diagnose and troubleshoot issues regarding Ansible Networking modules. The messages are logged in the file pointed to by the ``log_path`` configuration option in the Ansible configuration file or by setting the  :envvar:`ANSIBLE_LOG_PATH`."
msgstr "Ansible には、Ansible ネットワークモジュールに関する問題の診断およびトラブルシューティングに役立つ、ログファイル内のデバイスの対話のログが含まれています。このメッセージは、Ansible 設定ファイルの ``log_path`` 設定オプションで指定されているファイルに記録されるか、:envvar:`ANSIBLE_LOG_PATH` を設定すると記録されます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:103
msgid "The device interaction messages consist of command executed on the target device and the returned response. Since this log data can contain sensitive information including passwords in plain text it is disabled by default. Additionally, in order to prevent accidental leakage of data, a warning will be shown on every task with this setting enabled, specifying which host has it enabled and where the data is being logged."
msgstr "デバイスインタラクションメッセージは、ターゲットデバイス上で実行されたコマンドと返された応答で構成されます。このログデータには、パスワードなどの機密情報がプレーンテキストの形式で含まれる可能性があるため、デフォルトでは無効になっています。また、誤ってデータが漏洩しないように、この設定が有効になっているすべてのタスクに警告が表示され、有効になっているホストとデータが記録される場所が指定されます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:108
msgid "Be sure to fully understand the security implications of enabling this option. The device interaction logging can be enabled either globally by setting in configuration file or by setting environment or enabled on per task basis by passing a special variable to the task."
msgstr "このオプションを有効にした場合のセキュリティーへの影響を完全に理解してください。デバイス対話ロギングは、設定ファイルでグローバルに設定するか、環境を設定して有効にするか、または特殊な変数をタスクに渡すことでタスクごとに有効にすることができます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:110
msgid "Before running ``ansible-playbook`` run the following commands to enable logging:"
msgstr "``ansible-playbook`` を実行する前に、以下のコマンドを実行してロギングを有効にします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:118
msgid "Enable device interaction logging for a given task"
msgstr "特定のタスクのデバイス対話ログを有効にします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:130
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:756
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:823
msgid "To make this a global setting, add the following to your ``ansible.cfg`` file:"
msgstr "この設定をグローバルにするには、以下の設定を ``ansible.cfg`` ファイルに追加します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:137
msgid "or enable the environment variable `ANSIBLE_PERSISTENT_LOG_MESSAGES`:"
msgstr "または、環境変数 `ANSIBLE_PERSISTENT_LOG_MESSAGES` を有効にします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:144
msgid "If the task is failing on connection initialization itself, you should enable this option globally. If an individual task is failing intermittently this option can be enabled for that task itself to find the root cause."
msgstr "タスク自体が接続の初期化に失敗している場合は、このオプションをグローバルに有効にする必要があります。個々のタスクが断続的に失敗する場合は、そのタスク自体に対してこのオプションを有効にして、根本原因を見つけることができます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:147
msgid "After Ansible has finished running you can inspect the log file which has been created on the ansible-controller"
msgstr "Ansible の実行が完了したら、ansible-controller で作成されたログファイルを確認できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:149
msgid "Be sure to fully understand the security implications of enabling this option as it can log sensitive information in log file thus creating security vulnerability."
msgstr "このオプションを有効にすると、ログファイルに機密情報が記録され、セキュリティ上の脆弱性が生じる可能性があるため、セキュリティー上の影響を十分に理解してください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:154
msgid "Isolating an error"
msgstr "エラーの分離"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:158
msgid "As with any effort to troubleshoot it's important to simplify the test case as much as possible."
msgstr "トラブルシューティングにおけるあらゆる作業と同様に、テストケースをできるだけ簡略化することが重要です。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:160
msgid "For Ansible this can be done by ensuring you are only running against one remote device:"
msgstr "Ansible の場合は、1 つのリモートデバイスに対してのみ実行するようにすることでこれを行うことができます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:162
msgid "Using ``ansible-playbook --limit switch1.example.net...``"
msgstr "``ansible-playbook --limit switch1.example.net...`` の使用"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:163
msgid "Using an ad hoc ``ansible`` command"
msgstr "``ansible`` アドホックコマンドの使用"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:165
msgid "`ad hoc` refers to running Ansible to perform some quick command using ``/usr/bin/ansible``, rather than the orchestration language, which is ``/usr/bin/ansible-playbook``. In this case we can ensure connectivity by attempting to execute a single command on the remote device::"
msgstr "`ad hoc` は、オーケストレーション言語 ``/usr/bin/ansible-playbook`` ではなく、``/usr/bin/ansible`` を使用して簡単なコマンドを実行するために Ansible を実行することを指します。この場合は、リモートデバイスで 1 つのコマンドを実行することで、接続を確認できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:169
msgid "In the above example, we:"
msgstr "上記の例では、以下を行います。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:171
msgid "connect to ``switch1.example.net`` specified in the inventory file ``inventory``"
msgstr "インベントリーファイル ``inventory`` に指定された ``switch1.example.net`` に接続します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:172
msgid "use the module ``arista.eos.eos_command``"
msgstr "``arista.eos.eos_command`` モジュールの使用"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:173
msgid "run the command ``?``"
msgstr "``?`` コマンドの実行"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:174
msgid "connect using the username ``admin``"
msgstr "ユーザー名 ``admin`` を使用して接続"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:175
msgid "inform the ``ansible`` command to prompt for the SSH password by specifying ``-k``"
msgstr "``-k`` を指定して SSH パスワードを要求するように、``ansible`` コマンドに通知"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:177
msgid "If you have SSH keys configured correctly, you don't need to specify the ``-k`` parameter."
msgstr "SSH キーが正しく設定されている場合は、``-k`` パラメーターを指定する必要はありません。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:179
msgid "If the connection still fails you can combine it with the enable_network_logging parameter. For example:"
msgstr "それでも接続が失敗した場合は、これを enable_network_logging パラメーターと組み合わせることができます。以下に例を示します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:190
msgid "Then review the log file and find the relevant error message in the rest of this document."
msgstr "次に、ログファイルを確認し、このドキュメントの残りの部分で、関連するエラーメッセージを見つけます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:197
msgid "Troubleshooting socket path issues"
msgstr "ソケットパスの問題のトラブルシューティング"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:201
msgid "The ``Socket path does not exist or cannot be found``  and ``Unable to connect to socket`` messages indicate that the socket used to communicate with the remote network device is unavailable or does not exist."
msgstr "``Socket path does not exist or cannot be found`` メッセージおよび ``Unable to connect to socket``メッセージは、リモートネットワークデバイスとの通信に使用されるソケットが利用できないか、存在しないことを示しています。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:216
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:241
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:378
msgid "or"
msgstr "または"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:229
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:283
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:309
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:335
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:369
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:419
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:450
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:476
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:502
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:513
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:539
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:623
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:795
msgid "Suggestions to resolve:"
msgstr "解決するためのヒント:"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:231
msgid "Verify that you have write access to the socket path described in the error message."
msgstr "エラーメッセージに記載されているソケットパスへの書き込み権限があることを確認します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:233
msgid "Follow the steps detailed in :ref:`enable network logging <enable_network_logging>`."
msgstr "「:ref:`ネットワークロギングの有効化 <enable_network_logging>`」記載される手順に従ってください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:235
msgid "If the identified error message from the log file is:"
msgstr "ログファイルから特定されたエラーメッセージが以下の場合は、"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:247
msgid "Follow the steps detailed in :ref:`timeout issues <timeout_issues>`"
msgstr "「:ref:`タイムアウトの問題 <timeout_issues>`」に記載の手順に従ってください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:253
msgid "Category \"Unable to open shell\""
msgstr "Category \"Unable to open shell\""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:258
msgid "The ``unable to open shell`` message means that the ``ansible-connection`` daemon has not been able to successfully talk to the remote network device. This generally means that there is an authentication issue. It is a \"catch all\" message, meaning you need to enable :ref:`logging <a_note_about_logging>` to find the underlying issues."
msgstr "``unable to open shell`` メッセージは、``ansible-connection`` デーモンがリモートネットワークデバイスと正常に通信できなかったことを示します。これは通常、認証の問題があることを意味します。これは「catch all (全て取得する)」メッセージです。つまり、:ref:`logging <a_note_about_logging>` を有効にして、根本的な問題を検出する必要があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:270
msgid "or:"
msgstr "または"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:285
msgid "Follow the steps detailed in enable_network_logging_."
msgstr "enable_network_logging_ に記載の手順に従います。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:287
msgid "Once you've identified the error message from the log file, the specific solution can be found in the rest of this document."
msgstr "ログファイルからエラーメッセージが特定できたら、特定の解決方法は、本ガイドのその他のセクションを参照してください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:292
msgid "Error: \"[Errno -2] Name or service not known\""
msgstr "Error: \"[Errno -2] Name or service not known\""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:296
msgid "Indicates that the remote host you are trying to connect to can not be reached"
msgstr "接続しようとしているリモートホストに到達できないことを示します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:311
msgid "If you are using the ``provider:`` options ensure that its suboption ``host:`` is set correctly."
msgstr "``provider:`` オプションを使用している場合は、サブオプション ``host:`` が正しく設定されていることを確認します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:312
msgid "If you are not using ``provider:`` nor top-level arguments ensure your inventory file is correct."
msgstr "``provider:`` またはトップレベルの引数を使用しない場合には、インベントリーファイルが正しいことを確認してください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:319
msgid "Error: \"Authentication failed\""
msgstr "Error: \"Authentication failed\""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:323
msgid "Occurs if the credentials (username, passwords, or ssh keys) passed to ``ansible-connection`` (via ``ansible`` or ``ansible-playbook``) can not be used to connect to the remote device."
msgstr "(``ansible`` または ``ansible-playbook`` を使用して) ``ansible-connection`` に渡される認証情報 (ユーザー名、パスワード、または ssh キー) を使用してリモートデバイスに接続できない場合に発生します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:337
msgid "If you are specifying credentials via ``password:`` (either directly or via ``provider:``) or the environment variable `ANSIBLE_NET_PASSWORD` it is possible that ``paramiko`` (the Python SSH library that Ansible uses) is using ssh keys, and therefore the credentials you are specifying are being ignored. To find out if this is the case, disable \"look for keys\". This can be done like this:"
msgstr "(直接または ``provider:`` を使用して) ``password:`` で認証情報を指定する場合や、環境変数 `ANSIBLE_NET_PASSWORD` を指定する場合は、``paramiko`` (Ansible が使用する Python SSH ライブラリー) が ssh キーを使用している可能性があるため、指定する認証情報が無効になります。これを確認するには、「look for keys」を無効にします。これは次のように行います。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:343
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:458
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:485
#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:550
msgid "To make this a permanent change, add the following to your ``ansible.cfg`` file:"
msgstr "これを永続的に行うには、以下を ``ansible.cfg`` ファイルに追加します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:352
msgid "Error: \"connecting to host <hostname> returned an error\" or \"Bad address\""
msgstr "Error: \"connecting to host <hostname> returned an error\" or \"Bad address\""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:354
msgid "This may occur if the SSH fingerprint hasn't been added to Paramiko's (the Python SSH library) know hosts file."
msgstr "これは、SSH フィンガープリントが Paramiko の既知のホストファイル (Python SSH ライブラリー) に追加されていない場合に発生する可能性があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:356
msgid "When using persistent connections with Paramiko, the connection runs in a background process.  If the host doesn't already have a valid SSH key, by default Ansible will prompt to add the host key.  This will cause connections running in background processes to fail."
msgstr "Paramiko で永続的な接続を使用する場合、接続はバックグラウンドプロセスで実行します。ホストが有効な SSH キーを持っていない場合、Ansible はデフォルトでホストキーを追加するようプロンプトを出します。これにより、バックグラウンドプロセスで実行中の接続が失敗します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:371
msgid "Use ``ssh-keyscan`` to pre-populate the known_hosts. You need to ensure the keys are correct."
msgstr "``ssh-keyscan`` を使用して known_hosts を事前に設定します。キーが正しいことを確認してください。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:380
msgid "You can tell Ansible to automatically accept the keys"
msgstr "鍵を自動的に受け入れるように Ansible に設定できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:382
msgid "Environment variable method::"
msgstr "環境変数メソッド::"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:387
msgid "``ansible.cfg`` method:"
msgstr "``ansible.cfg`` メソッド:"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:389
msgid "ansible.cfg"
msgstr "ansible.cfg"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:403
msgid "Error: \"No authentication methods available\""
msgstr "Error: \"No authentication methods available\""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:421
msgid "No password or SSH key supplied"
msgstr "パスワードまたは SSH キーが指定されていない"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:424
msgid "Clearing Out Persistent Connections"
msgstr "永続的な接続を解除"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:428
msgid "In Ansible 2.3, persistent connection sockets are stored in ``~/.ansible/pc`` for all network devices.  When an Ansible playbook runs, the persistent socket connection is displayed when verbose output is specified."
msgstr "Ansible 2.3 では、すべてのネットワークデバイスの永続的な接続ソケットが ``~/.ansible/pc`` に保存されます。Ansible Playbook が実行すると、詳細な出力が指定されている場合に永続的なソケット接続が表示されます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:430
msgid "``<switch> socket_path: /home/fred/.ansible/pc/f64ddfa760``"
msgstr "``<switch> socket_path: /home/fred/.ansible/pc/f64ddfa760``"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:432
msgid "To clear out a persistent connection before it times out (the default timeout is 30 seconds of inactivity), simple delete the socket file."
msgstr "タイムアウトする前に永続的な接続 (デフォルトのタイムアウトが 30 秒の非アクティブタイムアウト) を削除するには、ソケットファイルを簡単な削除します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:442
msgid "Persistent connection idle timeout"
msgstr "永続的な接続アイドルタイムアウト"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:444
msgid "By default, ``ANSIBLE_PERSISTENT_CONNECT_TIMEOUT`` is set to 30 (seconds). You may see the following error if this value is too low:"
msgstr "デフォルトでは、``ANSIBLE_PERSISTENT_CONNECT_TIMEOUT`` は 30 (秒) に設定されます。この値が低すぎると、以下のエラーが表示される可能性があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:452
msgid "Increase value of persistent connection idle timeout:"
msgstr "永続的な接続アイドルタイムアウトの値を大きくします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:466
msgid "Command timeout"
msgstr "コマンドタイムアウト"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:468
msgid "By default, ``ANSIBLE_PERSISTENT_COMMAND_TIMEOUT`` is set to 30 (seconds). Prior versions of Ansible had this value set to 10 seconds by default. You may see the following error if this value is too low:"
msgstr "デフォルトでは、``ANSIBLE_PERSISTENT_COMMAND_TIMEOUT`` は 30 (秒) に設定されます。Ansible の以前のバージョンでは、デフォルトでこの値を 10 秒に設定されています。この値が低すぎると、以下のエラーが発生する可能性があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:478
msgid "Option 1 (Global command timeout setting): Increase value of command timeout in configuration file or by setting environment variable."
msgstr "オプション 1 (グローバルコマンドのタイムアウト設定): 設定ファイル、または環境変数を設定してコマンドタイムアウトの値を増やします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:492
msgid "Option 2 (Per task command timeout setting): Increase command timeout per task basis. All network modules support a timeout value that can be set on a per task basis. The timeout value controls the amount of time in seconds before the task will fail if the command has not returned."
msgstr "オプション 2 (タスクごとのコマンドのタイムアウト設定): タスクごとにコマンドタイムアウトを増やします。すべてのネットワークモジュールは、タスクごとに設定できるタイムアウト値をサポートしています。タイムアウト値は、コマンドが返されなかった場合にタスクが失敗するまでの時間を秒単位で制御します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:498
msgid "For local connection type:"
msgstr "ローカル接続タイプの場合:"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:523
msgid "Some operations take longer than the default 30 seconds to complete.  One good example is saving the current running config on IOS devices to startup config. In this case, changing the timeout value from the default 30 seconds to 60 seconds will prevent the task from failing before the command completes successfully."
msgstr "一部の操作は、完了までにデフォルトの 30 秒より長くかかります。たとえば、IOS デバイス上の現在の実行設定をスタートアップ設定に保存します。この場合は、タイムアウト値をデフォルトの 30 秒から 60 秒に変更すると、コマンドが正常に完了する前にタスクが失敗するのを防ぐことができます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:530
msgid "Persistent connection retry timeout"
msgstr "永続的な接続の再試行タイムアウト"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:532
msgid "By default, ``ANSIBLE_PERSISTENT_CONNECT_RETRY_TIMEOUT`` is set to 15 (seconds). You may see the following error if this value is too low:"
msgstr "デフォルトでは、``ANSIBLE_PERSISTENT_CONNECT_RETRY_TIMEOUT`` は 15 (秒) に設定されます。この値が低すぎると、以下のエラーが表示される可能性があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:541
msgid "Increase the value of the persistent connection idle timeout. Note: This value should be greater than the SSH timeout value (the timeout value under the defaults section in the configuration file) and less than the value of the persistent connection idle timeout (connect_timeout)."
msgstr "持続的接続アイドルタイムアウトの値を増やします。注意: この値は、SSH タイムアウト値 (設定ファイルのデフォルトセクションの下のタイムアウト値) より大きく、永続的接続アイドルタイムアウト値 (connect_timeout) より小さくする必要があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:559
msgid "Timeout issue due to platform specific login menu with ``network_cli`` connection type"
msgstr "``network_cli`` 接続タイプを持つプラットフォーム固有のログインメニューによるタイムアウトの問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:561
msgid "In Ansible 2.9 and later, the network_cli connection plugin configuration options are added to handle the platform specific login menu. These options can be set as group/host or tasks variables."
msgstr "Ansible 2.9 以降では、プラットフォーム固有のログインメニューを処理するために network_cli 接続プラグイン設定オプションが追加されました。これらのオプションは、グループ/ホストまたはタスク変数として設定できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:565
msgid "Example: Handle single login menu prompts with host variables"
msgstr "例: ホスト変数を使用した 1 つのログインメニュープロンプトを処理します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:576
msgid "Example: Handle remote host multiple login menu prompts with host variables"
msgstr "例: ホスト変数を使用したリモートホストの複数のログインメニュープロンプトを処理します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:590
msgid "To handle multiple login menu prompts:"
msgstr "複数のログインメニュープロンプトを処理するには、以下を行います。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:592
msgid "The values of ``ansible_terminal_initial_prompt`` and ``ansible_terminal_initial_answer`` should be a list."
msgstr "``ansible_terminal_initial_prompt`` および ``ansible_terminal_initial_answer`` の値は一覧形式である必要があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:593
msgid "The prompt sequence should match the answer sequence."
msgstr "プロンプトシーケンスは、応答シーケンスに一致する必要があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:594
msgid "The value of ``ansible_terminal_initial_prompt_checkall`` should be set to ``True``."
msgstr "``ansible_terminal_initial_prompt_checkall`` の値は ``True`` に設定する必要があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:596
msgid "If all the prompts in sequence are not received from remote host at the time connection initialization it will result in a timeout."
msgstr "接続の初期化時に、リモートホストからシーケンス内のすべてのプロンプトを受け取らないと、タイムアウトが生じます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:602
msgid "This section details issues are caused by issues with the Playbook itself."
msgstr "本セクションでは、Playbook 自体の問題が原因で発生する問題を詳しく説明します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:605
msgid "Error: \"Unable to enter configuration mode\""
msgstr "Error: \"Unable to enter configuration mode\""

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:607
msgid "**Platforms:** Arista EOS and Cisco IOS"
msgstr "**プラットフォーム:** Arista EOS および Cisco IOS"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:609
msgid "This occurs when you attempt to run a task that requires privileged mode in a user mode shell."
msgstr "これは、ユーザーモードシェルで特権モードを必要とするタスクを実行しようとすると発生します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:625
msgid "Use ``connection: ansible.netcommon.network_cli`` and ``become: yes``"
msgstr "``connection: ansible.netcommon.network_cli`` および ``become: yes`` の使用"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:629
msgid "Proxy Issues"
msgstr "プロキシーの問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:634
msgid "delegate_to vs ProxyCommand"
msgstr "delegate_to 対 ProxyCommand"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:636
msgid "In order to use a bastion or intermediate jump host to connect to network devices over ``cli`` transport, network modules support the use of ``ProxyCommand``."
msgstr "bastion または中間ジャンプホストを使用して ``cli`` トランスポートでネットワークデバイスに接続するために、ネットワークモジュールは ``ProxyCommand`` の使用に対応します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:639
msgid "To use ``ProxyCommand``, configure the proxy settings in the Ansible inventory file to specify the proxy host."
msgstr "``ProxyCommand`` を使用するには、Ansible インベントリーファイルでプロキシー設定を設定して、プロキシーホストを指定します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:652
msgid "With the configuration above, simply build and run the playbook as normal with no additional changes necessary.  The network module will now connect to the network device by first connecting to the host specified in ``ansible_ssh_common_args``, which is ``bastion01`` in the above example."
msgstr "上記の設定では、追加の変更を必要とせずに、通常どおり Playbook をビルドして実行します。ネットワークモジュールは、最初に ``ansible_ssh_common_args`` で指定したホスト (上記の例は ``bastion01``) に接続して、ネットワークデバイスに接続します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:657
msgid "You can also set the proxy target for all hosts by using environment variables."
msgstr "環境変数を使用して、すべてのホストのプロキシーターゲットを設定することもできます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:664
msgid "Using bastion/jump host with netconf connection"
msgstr "netconf 接続での bastion/ジャンプホストの使用"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:667
msgid "Enabling jump host setting"
msgstr "ジャンプホスト設定の有効化"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:673
msgid "Bastion/jump host with netconf connection can be enabled by:"
msgstr "netconf 接続を持つ bastion/ジャンプホストは、以下で有効にできます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:671
msgid "Setting Ansible variable ``ansible_netconf_ssh_config`` either to ``True`` or custom ssh config file path"
msgstr "Ansible 変数 ``ansible_netconf_ssh_config`` を ``True`` またはカスタムの ssh 設定ファイルパスに設定"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:672
msgid "Setting environment variable ``ANSIBLE_NETCONF_SSH_CONFIG`` to ``True`` or custom ssh config file path"
msgstr "環境変数 ``ANSIBLE_NETCONF_SSH_CONFIG`` を ``True`` またはカスタムの ssh 設定ファイルパスに設定"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:673
msgid "Setting ``ssh_config = 1`` or ``ssh_config = <ssh-file-path>`` under ``netconf_connection`` section"
msgstr "``ssh_config = 1`` セクションの下に ``ssh_config = <ssh-file-path>`` または ``netconf_connection`` の設定"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:675
msgid "If the configuration variable is set to 1 the proxycommand and other ssh variables are read from default ssh config file (~/.ssh/config)."
msgstr "設定変数が 1 に設定されている場合、proxycommand およびその他の ssh 変数はデフォルトの ssh 設定ファイル (~/.ssh/config) から読み込まれます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:678
msgid "If the configuration variable is set to file path the proxycommand and other ssh variables are read from the given custom ssh file path"
msgstr "設定変数がファイルパスに設定されていると、proxycommand およびその他の ssh 変数は指定のカスタム ssh ファイルパスから読み込まれます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:682
msgid "Example ssh config file (~/.ssh/config)"
msgstr "ssh 設定ファイルの例 (~/.ssh/config)"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:709
msgid "Example Ansible inventory file"
msgstr "Ansible インベントリーファイルの例"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:723
msgid "Using ``ProxyCommand`` with passwords via variables"
msgstr "変数を介したパスワードでの ``ProxyCommand`` の使用"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:725
msgid "By design, SSH doesn't support providing passwords via environment variables. This is done to prevent secrets from leaking out, for example in ``ps`` output."
msgstr "設計上、SSH は環境変数経由でパスワードの提供をサポートしません。これは、``ps`` の出力など、シークレットがリークしないようにします。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:728
msgid "We recommend using SSH Keys, and if needed an ssh-agent, rather than passwords, where ever possible."
msgstr "SSH 鍵を使用することを推奨します。必要に応じて、可能な場合は、パスワードではなく ssh-agent を使用することが推奨されます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:731
msgid "Miscellaneous Issues"
msgstr "その他の問題"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:735
msgid "Intermittent failure while using ``ansible.netcommon.network_cli`` connection type"
msgstr "``ansible.netcommon.network_cli`` 接続タイプの使用中に断続的な失敗"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:737
msgid "If the command prompt received in response is not matched correctly within the ``ansible.netcommon.network_cli`` connection plugin the task might fail intermittently with truncated response or with the error message ``operation requires privilege escalation``. Starting in 2.7.1 a new buffer read timer is added to ensure prompts are matched properly and a complete response is send in output. The timer default value is 0.2 seconds and can be adjusted on a per task basis or can be set globally in seconds."
msgstr "応答で受け取ったコマンドプロンプトが ``ansible.netcommon.network_cli`` 接続プラグイン内で正しく一致しないと、タスクが断続的に失敗し、応答が切り捨てられるか、エラーメッセージ ``operation requires privilege escalation`` が表示されることがあります。2.7.1 以降、プロンプトが正しく一致し、完全な応答が出力に送信されるように、新しいバッファ読み取りタイマーが追加されました。タイマーのデフォルト値は 0.2 秒で、タスクごとに調整することも、秒単位でグローバルに設定することもできます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:744
msgid "Example Per task timer setting"
msgstr "タスクタイマーごとの設定例"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:763
msgid "This timer delay per command executed on remote host can be disabled by setting the value to zero."
msgstr "リモートホストで実行されるコマンド別のこのタイマー遅延は、値をゼロに設定すると無効にできます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:767
msgid "Task failure due to mismatched error regex within command response using ``ansible.netcommon.network_cli`` connection type"
msgstr "``ansible.netcommon.network_cli`` 接続タイプを使用したコマンド応答内のエラー正規表現の不一致によるタスクの失敗"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:769
msgid "In Ansible 2.9 and later, the ``ansible.netcommon.network_cli`` connection plugin configuration options are added to handle the stdout and stderr regex to identify if the command execution response consist of a normal response or an error response. These options can be set group/host variables or as tasks variables."
msgstr "Ansible 2.9 以降では、``ansible.netcommon.network_cli`` 接続プラグイン設定オプションが追加され、標準出力と標準エラーの正規表現を処理して、コマンド実行応答が通常の応答かエラー応答かを識別します。これらのオプションは、グループ/ホスト変数またはタスク変数として設定できます。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:774
msgid "Example: For mismatched error response"
msgstr "例: 不一致のエラー応答の場合"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:784
msgid "Playbook run output:"
msgstr "Playbook 実行の出力:"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:797
msgid "Modify the error regex for individual task."
msgstr "個々のタスクのエラー正規表現を変更します。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:810
msgid "The terminal plugin regex options ``ansible_terminal_stderr_re`` and ``ansible_terminal_stdout_re`` have ``pattern`` and ``flags`` as keys. The value of the ``flags`` key should be a value that is accepted by the ``re.compile`` python method."
msgstr "端末プラグインの正規表現オプション ``ansible_terminal_stderr_re`` および ``ansible_terminal_stdout_re`` は、``pattern`` と ``flags`` をキーとします。``flags`` キーの値は、``re.compile`` python メソッドで許可される値である必要があります。"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:816
msgid "Intermittent failure while using ``ansible.netcommon.network_cli`` connection type due to slower network or remote target host"
msgstr "低速ネットワークまたはリモートターゲットホストによる ``ansible.netcommon.network_cli`` 接続タイプの使用時の断続的な失敗"

#: ../../rst/network/user_guide/network_debug_troubleshooting.rst:818
msgid "In Ansible 2.9 and later, the ``ansible.netcommon.network_cli`` connection plugin configuration option is added to control the number of attempts to connect to a remote host. The default number of attempts is three. After every retry attempt the delay between retries is increased by power of 2 in seconds until either the maximum attempts are exhausted or either the ``persistent_command_timeout`` or ``persistent_connect_timeout`` timers are triggered."
msgstr "Ansible 2.9 以降では、リモートホストへの接続の試行回数を制御するために、``ansible.netcommon.network_cli`` 接続プラグイン設定オプションが追加されました。デフォルトの試行回数は 3 回です。再試行のたびに、最大試行回数がなくなるか、``persistent_command_timeout`` または ``persistent_connect_timeout`` タイマーのいずれかが発生するまで、再試行間の遅延は 2 の累乗 (秒) ずつ増加します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:5
msgid "Network Resource Modules"
msgstr "ネットワークリソースモジュール"

#: ../../rst/network/user_guide/network_resource_modules.rst:7
msgid "Ansible network resource modules simplify and standardize how you manage different network devices. Network devices separate configuration into sections (such as interfaces and VLANs) that apply to a network service. Ansible network resource modules take advantage of this to allow you to configure subsections or *resources* within the network device configuration. Network resource modules provide a consistent experience across different network devices."
msgstr "Ansible ネットワークリソースモジュールは、さまざまなネットワークデバイスの管理方法を簡素化し、標準化します。ネットワークデバイスは、ネットワークサービスに適用されるセクション (インターフェースや VLAN など) に設定を分割します。Ansible ネットワークリソースモジュールはこれを利用して、ネットワークデバイス設定内でサブセクションや *リソース* を設定することができます。ネットワークリソースモジュールは、異なるネットワークデバイス間で一貫したエクスペリエンスを提供します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:14
msgid "Network resource module states"
msgstr "ネットワークリソースモジュールの状態"

#: ../../rst/network/user_guide/network_resource_modules.rst:16
msgid "You use the network resource modules by assigning a state to what you want the module to do. The resource modules support the following states:"
msgstr "モジュールの動作に状態を割り当てて、ネットワークリソースモジュールを使用します。リソースモジュールは以下の状態をサポートします。"

#: ../../rst/network/user_guide/network_resource_modules.rst:40
msgid "Using network resource modules"
msgstr "ネットワークリソースモジュールの使用"

#: ../../rst/network/user_guide/network_resource_modules.rst:42
msgid "This example configures the L3 interface resource on a Cisco IOS device, based on different state settings."
msgstr "この例では、異なる状態設定に基づいて、Cisco IOS デバイスで L3 インターフェースリソースを設定します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:51
msgid "The following table shows an example of how an initial resource configuration changes with this task for different states."
msgstr "以下の表は、このタスクで初期リソースの設定が異なる状態で変化する例を示しています。"

#: ../../rst/network/user_guide/network_resource_modules.rst:54
msgid "Resource starting configuration"
msgstr "リソース起動の設定"

#: ../../rst/network/user_guide/network_resource_modules.rst:54
msgid "task-provided configuration (YAML)"
msgstr "タスク提供設定 (YAML)"

#: ../../rst/network/user_guide/network_resource_modules.rst:54
msgid "Final resource configuration on device"
msgstr "デバイスの最終的なリソース設定"

#: ../../rst/network/user_guide/network_resource_modules.rst:61
msgid "*merged*"
msgstr "*マージ*"

#: ../../rst/network/user_guide/network_resource_modules.rst:69
msgid "*replaced*"
msgstr "*置き換え済*"

#: ../../rst/network/user_guide/network_resource_modules.rst:73
msgid "*overridden*"
msgstr "*上書き済*"

#: ../../rst/network/user_guide/network_resource_modules.rst:73
msgid "Incorrect use case. This would remove all interfaces from the device"
msgstr "誤ったユースケース。これにより、デバイスからすべてのインターフェースが削除されます。"

#: ../../rst/network/user_guide/network_resource_modules.rst:75
msgid "(including the mgmt interface) except"
msgstr "(mgmt インターフェースを含む) 以下を除く"

#: ../../rst/network/user_guide/network_resource_modules.rst:76
msgid "the configured loopback100"
msgstr "設定されている loopback100"

#: ../../rst/network/user_guide/network_resource_modules.rst:81
msgid "*deleted*"
msgstr "*削除済*"

#: ../../rst/network/user_guide/network_resource_modules.rst:85
msgid "Network resource modules return the following details:"
msgstr "ネットワークリソースモジュールは、以下の詳細を返します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:87
msgid "The *before* state -  the existing resource configuration before the task was executed."
msgstr "*before* 状態 - タスクの実行前の既存リソース設定。"

#: ../../rst/network/user_guide/network_resource_modules.rst:88
msgid "The *after* state - the new resource configuration that exists on the network device after the task was executed."
msgstr "*after* 状態 - タスク実行後にネットワークデバイスに存在する新しいリソース設定。"

#: ../../rst/network/user_guide/network_resource_modules.rst:89
msgid "Commands - any commands configured on the device."
msgstr "コマンド - このデバイスに設定されるすべてのコマンド。"

#: ../../rst/network/user_guide/network_resource_modules.rst:122
msgid "Example: Verifying the network device configuration has not changed"
msgstr "例: ネットワークデバイス設定が変更されていないことを確認"

#: ../../rst/network/user_guide/network_resource_modules.rst:124
msgid "The following playbook uses the :ref:`arista.eos.eos_l3_interfaces <ansible_collections.arista.eos.eos_l3_interfaces_module>` module to gather a subset of the network device configuration (Layer 3 interfaces only) and verifies the information is accurate and has not changed. This playbook passes the results of :ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` directly to the ``arista.eos.eos_l3_interfaces`` module."
msgstr "以下の Playbook は、:ref:`arista.eos.eos_l3_interfaces <ansible_collections.arista.eos.eos_l3_interfaces_module>` モジュールを使用してネットワークデバイス設定のサブセット (レイヤー 3 インターフェースのみ) を収集し、情報が正確であり、変更されていないことを確認します。この Playbook は、:ref:`arista.eos.eos_facts <ansible_collections.arista.eos.eos_facts_module>` の結果を直接 ``arista.eos.eos_l3_interfaces`` モジュールに渡します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:148
msgid "Example: Acquiring and updating VLANs on a network device"
msgstr "例: ネットワークデバイスの VLAN の調整および更新"

#: ../../rst/network/user_guide/network_resource_modules.rst:150
msgid "This example shows how you can use resource modules to:"
msgstr "以下の例は、リソースモジュールを使用して以下を行う方法を示しています。"

#: ../../rst/network/user_guide/network_resource_modules.rst:152
msgid "Retrieve the current configuration on a network device."
msgstr "ネットワークデバイスの現在の設定を取得します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:153
msgid "Save that configuration locally."
msgstr "その設定をローカルに保存します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:154
msgid "Update that configuration and apply it to the network device."
msgstr "その設定を更新して、ネットワークデバイスに適用します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:156
msgid "This example uses the ``cisco.ios.ios_vlans`` resource module to retrieve and update the VLANs on an IOS device."
msgstr "この例では、``cisco.ios.ios_vlans`` リソースモジュールを使用して、IOS デバイスの VLAN を取得および更新します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:158
msgid "Retrieve the current IOS VLAN configuration:"
msgstr "現在の IOS VLAN 設定を取得します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:170
msgid "Store the VLAN configuration locally:"
msgstr "VLAN 設定をローカルに保存します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:179
msgid "Modify the stored file to update the VLAN configuration locally."
msgstr "保存したファイルを変更して、VLAN 設定をローカルに更新します。"

#: ../../rst/network/user_guide/network_resource_modules.rst:181
msgid "Merge the updated VLAN configuration with the existing configuration on the device:"
msgstr "更新された VLAN 設定を、デバイス上の既存の設定とマージします。"

#: ../../rst/network/user_guide/network_resource_modules.rst:193
msgid "`Network Features in Ansible 2.9 <https://www.ansible.com/blog/network-features-coming-soon-in-ansible-engine-2.9>`_"
msgstr "`Network Features in Ansible 2.9 <https://www.ansible.com/blog/network-features-coming-soon-in-ansible-engine-2.9>`_"

#: ../../rst/network/user_guide/network_resource_modules.rst:194
msgid "A introductory blog post on network resource modules."
msgstr "ネットワークリソースモジュールに関する入門ブログの投稿"

#: ../../rst/network/user_guide/network_resource_modules.rst:195
msgid "`Deep Dive into Network Resource Modules <https://www.ansible.com/deep-dive-into-ansible-network-resource-module>`_"
msgstr "`Deep Dive into Network Resource Modules <https://www.ansible.com/deep-dive-into-ansible-network-resource-module>`_"

#: ../../rst/network/user_guide/network_resource_modules.rst:196
msgid "A deeper dive presentation into network resource modules."
msgstr "ネットワークリソースモジュールの詳細な説明"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:5
msgid "Working with command output and prompts in network modules"
msgstr "ネットワークモジュールのコマンド出力およびプロンプトの使用"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:11
msgid "Conditionals in networking modules"
msgstr "ネットワークモジュールの条件"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:13
msgid "Ansible allows you to use conditionals to control the flow of your playbooks. Ansible networking command modules use the following unique conditional statements."
msgstr "Ansible では、条件を使用して Playbook のフローを制御できます。Ansible ネットワークコマンドモジュールは、以下の固有の条件付きステートメントを使用します。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:15
msgid "``eq`` - Equal"
msgstr "``eq`` - 等しい"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:16
msgid "``neq`` - Not equal"
msgstr "``neq`` - 等しくない"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:17
msgid "``gt`` - Greater than"
msgstr "``gt`` - より大きい"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:18
msgid "``ge`` - Greater than or equal"
msgstr "``ge`` - より大きいか等しい"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:19
msgid "``lt`` - Less than"
msgstr "``lt`` - より小さい"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:20
msgid "``le`` - Less than or equal"
msgstr "``le`` - より小さいか等しい"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:21
msgid "``contains`` - Object contains specified item"
msgstr "``contains`` - オブジェクトに指定された項目が含まれる"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:24
msgid "Conditional statements evaluate the results from the commands that are executed remotely on the device.  Once the task executes the command set, the ``wait_for`` argument can be used to evaluate the results before returning control to the Ansible playbook."
msgstr "条件文は、デバイス上でリモートに実行されるコマンドの結果を評価します。タスクがコマンドセットを実行すると、Ansible Playbook に制御を戻す前に、``wait_for`` 引数を使用して結果を評価できます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:29
msgid "For example::"
msgstr "例::"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:39
msgid "In the above example task, the command :code:`show interface Ethernet4 | json` is executed on the remote device and the results are evaluated.  If the path :code:`(result[0].interfaces.Ethernet4.interfaceStatus)` is not equal to \"connected\", then the command is retried.  This process continues until either the condition is satisfied or the number of retries has expired (by default, this is 10 retries at 1 second intervals)."
msgstr "上記のタスク例では、リモートデバイスで command :code:`show interface Ethernet4 | json` が実行され、結果が評価されます。path :code:`(result[0].interfaces.Ethernet4.interfaceStatus)`が「connected」になっていなければ、コマンドは再試行されます。この処理は、条件が満たされるか、再試行回数が期限切れになる (デフォルトでは、1 秒間隔で 10 回の再試行) まで継続されます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:47
msgid "The commands module can also evaluate more than one set of command results in an interface.  For instance::"
msgstr "また、commands モジュールは、1 つのインターフェースで複数のコマンド結果を評価することもできます。たとえば、以下のようになります。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:60
msgid "In the above example, two commands are executed on the remote device, and the results are evaluated.  By specifying the result index value (0 or 1), the correct result output is checked against the conditional."
msgstr "上記の例では、2 つのコマンドがリモートデバイスで実行され、結果が評価されます。結果のインデックス値 (0 または 1) を指定することで、条件に対して正しい結果出力が確認されます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:65
msgid "The ``wait_for`` argument must always start with result and then the command index in ``[]``, where ``0`` is the first command in the commands list, ``1`` is the second command, ``2`` is the third and so on."
msgstr "``wait_for`` 引数は、必ず結果で、次に ``[]`` のコマンドインデックスが必要です。``0`` はコマンドリストの最初のコマンド、``1`` は 2 番目のコマンド、``2`` は 3 番目のコマンドなどになります。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:71
msgid "Handling prompts in network modules"
msgstr "ネットワークモジュールのプロンプトの処理"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:73
msgid "Network devices may require that you answer a prompt before performing a change on the device. Individual network modules such as :ref:`cisco.ios.ios_command <ansible_collections.cisco.ios.ios_command_module>` and :ref:`cisco.nxos.nxos_command <ansible_collections.cisco.nxos.nxos_command_module>` can handle this with a ``prompt`` parameter."
msgstr "ネットワークデバイスは、デバイスの変更を実行する前にプロンプトの回答が必要になる場合があります。:ref:`cisco.ios.ios_command <ansible_collections.cisco.ios.ios_command_module>` および :ref:`cisco.nxos.nxos_command <ansible_collections.cisco.nxos.nxos_command_module>` などの個別ネットワークモジュールは ``prompt`` パラメーターでこれを処理できます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:77
msgid "``prompt`` is a Python regex. If you add special characters such as ``?`` in the ``prompt`` value, the prompt won't match and you will get a timeout. To avoid this, ensure that the ``prompt`` value is a Python regex that matches the actual device prompt. Any special characters must be handled correctly in the ``prompt`` regex."
msgstr "``prompt`` は Python の正規表現です。``prompt`` 値に ``?`` などの特殊文字を追加すると、プロンプトが一致せず、タイムアウトが発生します。これを回避するには、``prompt`` 値が実際のデバイスプロンプトと一致する Python 正規表現であることを確認します。特殊文字は、``prompt`` 正規表現で正しく処理する必要があります。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:79
msgid "You can also use the :ref:`ansible.netcommon.cli_command <ansible_collections.ansible.netcommon.cli_command_module>` to handle multiple prompts."
msgstr ":ref:`ansible.netcommon.cli_command <ansible_collections.ansible.netcommon.cli_command_module>` を使用して、複数のプロンプトを処理することもできます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:97
msgid "You must list the prompt and the answers in the same order (that is, prompt[0] is answered by answer[0])."
msgstr "プロンプトと回答を同じ順序で一覧表示する必要があります (つまり、prompt[0] には answer[0] で応答します)。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:99
msgid "In the above example, ``check_all: True`` ensures that the task gives the matching answer to each prompt. Without that setting, a task with multiple prompts would give the first answer to every prompt."
msgstr "上記の例では、``check_all: True`` により、タスクが各プロンプトに一致する応答を返すようにします。この設定がないと、複数のプロンプトがあるタスクでは、すべてのプロンプトに対して最初の応答が表示されます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:101
msgid "In the following example, the second answer would be ignored and ``y`` would be the answer given to both prompts. That is, this task only works because both answers are identical. Also notice again that ``prompt`` must be a Python regex, which is why the ``?`` is escaped in the first prompt."
msgstr "次の例では、2 番目の回答は無視され、両方のプロンプトに ``y`` が入力されます。つまり、このタスクが機能するのは、両方の答えが同じだからです。また、``prompt`` は Python の正規表現でなければならないことにも注意してください。このため、``?`` は最初のプロンプトでエスケープされます。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:119
msgid "`Rebooting network devices with Ansible <https://www.ansible.com/blog/rebooting-network-devices-with-ansible>`_"
msgstr "`Rebooting network devices with Ansible <https://www.ansible.com/blog/rebooting-network-devices-with-ansible>`_"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:119
msgid "Examples using ``wait_for``, ``wait_for_connection``, and ``prompt`` for network devices."
msgstr "ネットワークデバイス用に ``wait_for``、``wait_for_connection``、および ``prompt`` を使用する例。"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:121
msgid "`Deep dive on cli_command <https://www.ansible.com/blog/deep-dive-on-cli-command-for-network-automation>`_"
msgstr "`Deep dive on cli_command <https://www.ansible.com/blog/deep-dive-on-cli-command-for-network-automation>`_"

#: ../../rst/network/user_guide/network_working_with_command_output.rst:122
msgid "Detailed overview of how to use the ``cli_command``."
msgstr "``cli_command`` の使用方法に関する詳細な概要"

#: ../../rst/network/user_guide/platform_ce.rst:5
msgid "CloudEngine OS Platform Options"
msgstr "CloudEngine OS プラットフォームオプション"

#: ../../rst/network/user_guide/platform_ce.rst:7
msgid "CloudEngine CE OS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr "CloudEngine CE OS は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、複数の接続をサポートします。このページでは、Ansible での各接続がどのように機能し、どのように使用されるかを詳細に説明します。"

#: ../../rst/network/user_guide/platform_ce.rst:13
#: ../../rst/network/user_guide/platform_cnos.rst:13
#: ../../rst/network/user_guide/platform_dellos10.rst:13
#: ../../rst/network/user_guide/platform_dellos6.rst:13
#: ../../rst/network/user_guide/platform_dellos9.rst:13
#: ../../rst/network/user_guide/platform_enos.rst:13
#: ../../rst/network/user_guide/platform_eos.rst:13
#: ../../rst/network/user_guide/platform_eric_eccli.rst:13
#: ../../rst/network/user_guide/platform_exos.rst:13
#: ../../rst/network/user_guide/platform_frr.rst:13
#: ../../rst/network/user_guide/platform_icx.rst:13
#: ../../rst/network/user_guide/platform_ios.rst:13
#: ../../rst/network/user_guide/platform_iosxr.rst:13
#: ../../rst/network/user_guide/platform_ironware.rst:13
#: ../../rst/network/user_guide/platform_junos.rst:13
#: ../../rst/network/user_guide/platform_meraki.rst:13
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:13
#: ../../rst/network/user_guide/platform_netvisor.rst:14
#: ../../rst/network/user_guide/platform_nos.rst:14
#: ../../rst/network/user_guide/platform_nxos.rst:13
#: ../../rst/network/user_guide/platform_routeros.rst:14
#: ../../rst/network/user_guide/platform_slxos.rst:14
#: ../../rst/network/user_guide/platform_voss.rst:14
#: ../../rst/network/user_guide/platform_vyos.rst:13
msgid "Connections available"
msgstr "利用可能な接続"

#: ../../rst/network/user_guide/platform_ce.rst:19
#: ../../rst/network/user_guide/platform_cnos.rst:19
#: ../../rst/network/user_guide/platform_dellos10.rst:19
#: ../../rst/network/user_guide/platform_dellos6.rst:19
#: ../../rst/network/user_guide/platform_dellos9.rst:19
#: ../../rst/network/user_guide/platform_enos.rst:19
#: ../../rst/network/user_guide/platform_eos.rst:19
#: ../../rst/network/user_guide/platform_eric_eccli.rst:19
#: ../../rst/network/user_guide/platform_exos.rst:20
#: ../../rst/network/user_guide/platform_frr.rst:19
#: ../../rst/network/user_guide/platform_icx.rst:19
#: ../../rst/network/user_guide/platform_ios.rst:19
#: ../../rst/network/user_guide/platform_iosxr.rst:19
#: ../../rst/network/user_guide/platform_ironware.rst:19
#: ../../rst/network/user_guide/platform_junos.rst:19
#: ../../rst/network/user_guide/platform_netvisor.rst:20
#: ../../rst/network/user_guide/platform_nos.rst:20
#: ../../rst/network/user_guide/platform_nxos.rst:19
#: ../../rst/network/user_guide/platform_routeros.rst:20
#: ../../rst/network/user_guide/platform_slxos.rst:20
#: ../../rst/network/user_guide/platform_voss.rst:20
#: ../../rst/network/user_guide/platform_vyos.rst:19
msgid "CLI"
msgstr "CLI"

#: ../../rst/network/user_guide/platform_ce.rst:19
#: ../../rst/network/user_guide/platform_iosxr.rst:19
#: ../../rst/network/user_guide/platform_junos.rst:19
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:18
msgid "NETCONF"
msgstr "NETCONF"

#: ../../rst/network/user_guide/platform_ce.rst:23
#: ../../rst/network/user_guide/platform_cnos.rst:21
#: ../../rst/network/user_guide/platform_dellos10.rst:21
#: ../../rst/network/user_guide/platform_dellos6.rst:21
#: ../../rst/network/user_guide/platform_dellos9.rst:21
#: ../../rst/network/user_guide/platform_enos.rst:21
#: ../../rst/network/user_guide/platform_eos.rst:21
#: ../../rst/network/user_guide/platform_eric_eccli.rst:21
#: ../../rst/network/user_guide/platform_exos.rst:22
#: ../../rst/network/user_guide/platform_frr.rst:21
#: ../../rst/network/user_guide/platform_icx.rst:21
#: ../../rst/network/user_guide/platform_ios.rst:21
#: ../../rst/network/user_guide/platform_iosxr.rst:25
#: ../../rst/network/user_guide/platform_ironware.rst:21
#: ../../rst/network/user_guide/platform_junos.rst:24
#: ../../rst/network/user_guide/platform_netvisor.rst:22
#: ../../rst/network/user_guide/platform_nos.rst:22
#: ../../rst/network/user_guide/platform_nxos.rst:21
#: ../../rst/network/user_guide/platform_routeros.rst:22
#: ../../rst/network/user_guide/platform_slxos.rst:22
#: ../../rst/network/user_guide/platform_voss.rst:22
#: ../../rst/network/user_guide/platform_vyos.rst:21
msgid "SSH"
msgstr "SSH"

#: ../../rst/network/user_guide/platform_ce.rst:25
#: ../../rst/network/user_guide/platform_cnos.rst:23
#: ../../rst/network/user_guide/platform_dellos10.rst:23
#: ../../rst/network/user_guide/platform_dellos6.rst:23
#: ../../rst/network/user_guide/platform_dellos9.rst:23
#: ../../rst/network/user_guide/platform_enos.rst:23
#: ../../rst/network/user_guide/platform_eos.rst:23
#: ../../rst/network/user_guide/platform_eric_eccli.rst:23
#: ../../rst/network/user_guide/platform_exos.rst:24
#: ../../rst/network/user_guide/platform_frr.rst:23
#: ../../rst/network/user_guide/platform_icx.rst:23
#: ../../rst/network/user_guide/platform_ios.rst:23
#: ../../rst/network/user_guide/platform_iosxr.rst:27
#: ../../rst/network/user_guide/platform_ironware.rst:23
#: ../../rst/network/user_guide/platform_junos.rst:26
#: ../../rst/network/user_guide/platform_meraki.rst:23
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:25
#: ../../rst/network/user_guide/platform_netvisor.rst:24
#: ../../rst/network/user_guide/platform_nos.rst:24
#: ../../rst/network/user_guide/platform_nxos.rst:23
#: ../../rst/network/user_guide/platform_routeros.rst:24
#: ../../rst/network/user_guide/platform_slxos.rst:24
#: ../../rst/network/user_guide/platform_voss.rst:24
#: ../../rst/network/user_guide/platform_vyos.rst:23
msgid "Credentials"
msgstr "認証情報"

#: ../../rst/network/user_guide/platform_ce.rst:25
#: ../../rst/network/user_guide/platform_cnos.rst:23
#: ../../rst/network/user_guide/platform_dellos10.rst:23
#: ../../rst/network/user_guide/platform_dellos6.rst:23
#: ../../rst/network/user_guide/platform_dellos9.rst:23
#: ../../rst/network/user_guide/platform_enos.rst:23
#: ../../rst/network/user_guide/platform_eos.rst:23
#: ../../rst/network/user_guide/platform_eric_eccli.rst:23
#: ../../rst/network/user_guide/platform_exos.rst:24
#: ../../rst/network/user_guide/platform_frr.rst:23
#: ../../rst/network/user_guide/platform_icx.rst:23
#: ../../rst/network/user_guide/platform_ios.rst:23
#: ../../rst/network/user_guide/platform_iosxr.rst:27
#: ../../rst/network/user_guide/platform_ironware.rst:23
#: ../../rst/network/user_guide/platform_junos.rst:26
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:25
#: ../../rst/network/user_guide/platform_netvisor.rst:24
#: ../../rst/network/user_guide/platform_nos.rst:24
#: ../../rst/network/user_guide/platform_nxos.rst:23
#: ../../rst/network/user_guide/platform_routeros.rst:24
#: ../../rst/network/user_guide/platform_slxos.rst:24
#: ../../rst/network/user_guide/platform_voss.rst:24
#: ../../rst/network/user_guide/platform_vyos.rst:23
msgid "uses SSH keys / SSH-agent if present"
msgstr "SSH キー/SSH-agent が存在する場合は使用します"

#: ../../rst/network/user_guide/platform_ce.rst:27
#: ../../rst/network/user_guide/platform_cnos.rst:25
#: ../../rst/network/user_guide/platform_dellos10.rst:25
#: ../../rst/network/user_guide/platform_dellos6.rst:25
#: ../../rst/network/user_guide/platform_dellos9.rst:25
#: ../../rst/network/user_guide/platform_enos.rst:25
#: ../../rst/network/user_guide/platform_eos.rst:25
#: ../../rst/network/user_guide/platform_eric_eccli.rst:25
#: ../../rst/network/user_guide/platform_exos.rst:26
#: ../../rst/network/user_guide/platform_frr.rst:25
#: ../../rst/network/user_guide/platform_icx.rst:25
#: ../../rst/network/user_guide/platform_ios.rst:25
#: ../../rst/network/user_guide/platform_iosxr.rst:29
#: ../../rst/network/user_guide/platform_ironware.rst:25
#: ../../rst/network/user_guide/platform_junos.rst:28
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:27
#: ../../rst/network/user_guide/platform_netvisor.rst:26
#: ../../rst/network/user_guide/platform_nos.rst:26
#: ../../rst/network/user_guide/platform_nxos.rst:25
#: ../../rst/network/user_guide/platform_routeros.rst:26
#: ../../rst/network/user_guide/platform_slxos.rst:26
#: ../../rst/network/user_guide/platform_voss.rst:26
#: ../../rst/network/user_guide/platform_vyos.rst:25
msgid "accepts ``-u myuser -k`` if using password"
msgstr "パスワードを使用する場合に ``-u myuser -k`` を受け入れます。"

#: ../../rst/network/user_guide/platform_ce.rst:29
#: ../../rst/network/user_guide/platform_cnos.rst:27
#: ../../rst/network/user_guide/platform_dellos10.rst:27
#: ../../rst/network/user_guide/platform_dellos6.rst:27
#: ../../rst/network/user_guide/platform_dellos9.rst:27
#: ../../rst/network/user_guide/platform_enos.rst:27
#: ../../rst/network/user_guide/platform_eos.rst:27
#: ../../rst/network/user_guide/platform_eric_eccli.rst:27
#: ../../rst/network/user_guide/platform_exos.rst:28
#: ../../rst/network/user_guide/platform_frr.rst:27
#: ../../rst/network/user_guide/platform_icx.rst:27
#: ../../rst/network/user_guide/platform_ios.rst:27
#: ../../rst/network/user_guide/platform_iosxr.rst:31
#: ../../rst/network/user_guide/platform_ironware.rst:27
#: ../../rst/network/user_guide/platform_junos.rst:30
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:29
#: ../../rst/network/user_guide/platform_netvisor.rst:28
#: ../../rst/network/user_guide/platform_nos.rst:28
#: ../../rst/network/user_guide/platform_nxos.rst:27
#: ../../rst/network/user_guide/platform_routeros.rst:28
#: ../../rst/network/user_guide/platform_slxos.rst:28
#: ../../rst/network/user_guide/platform_voss.rst:28
#: ../../rst/network/user_guide/platform_vyos.rst:27
msgid "Indirect Access"
msgstr "間接アクセス"

#: ../../rst/network/user_guide/platform_ce.rst:29
#: ../../rst/network/user_guide/platform_cnos.rst:27
#: ../../rst/network/user_guide/platform_dellos10.rst:27
#: ../../rst/network/user_guide/platform_dellos6.rst:27
#: ../../rst/network/user_guide/platform_dellos9.rst:27
#: ../../rst/network/user_guide/platform_enos.rst:27
#: ../../rst/network/user_guide/platform_eos.rst:27
#: ../../rst/network/user_guide/platform_eric_eccli.rst:27
#: ../../rst/network/user_guide/platform_exos.rst:28
#: ../../rst/network/user_guide/platform_frr.rst:27
#: ../../rst/network/user_guide/platform_icx.rst:27
#: ../../rst/network/user_guide/platform_ios.rst:27
#: ../../rst/network/user_guide/platform_iosxr.rst:31
#: ../../rst/network/user_guide/platform_ironware.rst:27
#: ../../rst/network/user_guide/platform_junos.rst:30
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:29
#: ../../rst/network/user_guide/platform_netvisor.rst:28
#: ../../rst/network/user_guide/platform_nos.rst:28
#: ../../rst/network/user_guide/platform_nxos.rst:27
#: ../../rst/network/user_guide/platform_routeros.rst:28
#: ../../rst/network/user_guide/platform_slxos.rst:28
#: ../../rst/network/user_guide/platform_voss.rst:28
#: ../../rst/network/user_guide/platform_vyos.rst:27
msgid "via a bastion (jump host)"
msgstr "bastion (jump ホスト) を使用"

#: ../../rst/network/user_guide/platform_ce.rst:31
#: ../../rst/network/user_guide/platform_cnos.rst:29
#: ../../rst/network/user_guide/platform_dellos10.rst:29
#: ../../rst/network/user_guide/platform_dellos6.rst:29
#: ../../rst/network/user_guide/platform_dellos9.rst:29
#: ../../rst/network/user_guide/platform_enos.rst:29
#: ../../rst/network/user_guide/platform_eos.rst:29
#: ../../rst/network/user_guide/platform_eric_eccli.rst:29
#: ../../rst/network/user_guide/platform_exos.rst:30
#: ../../rst/network/user_guide/platform_frr.rst:29
#: ../../rst/network/user_guide/platform_icx.rst:29
#: ../../rst/network/user_guide/platform_ios.rst:29
#: ../../rst/network/user_guide/platform_iosxr.rst:33
#: ../../rst/network/user_guide/platform_ironware.rst:29
#: ../../rst/network/user_guide/platform_junos.rst:32
#: ../../rst/network/user_guide/platform_meraki.rst:25
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:31
#: ../../rst/network/user_guide/platform_netvisor.rst:30
#: ../../rst/network/user_guide/platform_nos.rst:30
#: ../../rst/network/user_guide/platform_nxos.rst:29
#: ../../rst/network/user_guide/platform_routeros.rst:30
#: ../../rst/network/user_guide/platform_slxos.rst:30
#: ../../rst/network/user_guide/platform_voss.rst:30
#: ../../rst/network/user_guide/platform_vyos.rst:29
msgid "Connection Settings"
msgstr "接続設定"

#: ../../rst/network/user_guide/platform_ce.rst:32
#: ../../rst/network/user_guide/platform_exos.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:30
msgid "``ansible_connection:``"
msgstr "``ansible_connection:``"

#: ../../rst/network/user_guide/platform_ce.rst:32
#: ../../rst/network/user_guide/platform_exos.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:30
msgid "``ansible.netcommon.network_cli``"
msgstr "``ansible.netcommon.network_cli``"

#: ../../rst/network/user_guide/platform_ce.rst:32
#: ../../rst/network/user_guide/platform_iosxr.rst:34
msgid "``ansible.netcommon.netconf``"
msgstr "``ansible.netcommon.netconf``"

#: ../../rst/network/user_guide/platform_ce.rst:34
#: ../../rst/network/user_guide/platform_cnos.rst:31
#: ../../rst/network/user_guide/platform_dellos10.rst:31
#: ../../rst/network/user_guide/platform_dellos6.rst:31
#: ../../rst/network/user_guide/platform_dellos9.rst:31
#: ../../rst/network/user_guide/platform_enos.rst:31
#: ../../rst/network/user_guide/platform_eos.rst:33
#: ../../rst/network/user_guide/platform_eric_eccli.rst:31
#: ../../rst/network/user_guide/platform_exos.rst:33
#: ../../rst/network/user_guide/platform_frr.rst:31
#: ../../rst/network/user_guide/platform_icx.rst:31
#: ../../rst/network/user_guide/platform_ios.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:36
#: ../../rst/network/user_guide/platform_ironware.rst:31
#: ../../rst/network/user_guide/platform_junos.rst:35
#: ../../rst/network/user_guide/platform_netvisor.rst:32
#: ../../rst/network/user_guide/platform_nos.rst:32
#: ../../rst/network/user_guide/platform_nxos.rst:32
#: ../../rst/network/user_guide/platform_routeros.rst:32
#: ../../rst/network/user_guide/platform_slxos.rst:32
#: ../../rst/network/user_guide/platform_voss.rst:32
#: ../../rst/network/user_guide/platform_vyos.rst:31
msgid "|enable_mode|"
msgstr "|enable_mode|"

#: ../../rst/network/user_guide/platform_ce.rst:34
msgid "not supported by ce OS"
msgstr "ce OS ではサポートなし"

#: ../../rst/network/user_guide/platform_ce.rst:36
#: ../../rst/network/user_guide/platform_cnos.rst:35
#: ../../rst/network/user_guide/platform_dellos10.rst:35
#: ../../rst/network/user_guide/platform_dellos6.rst:35
#: ../../rst/network/user_guide/platform_dellos9.rst:35
#: ../../rst/network/user_guide/platform_enos.rst:35
#: ../../rst/network/user_guide/platform_eos.rst:39
#: ../../rst/network/user_guide/platform_eric_eccli.rst:33
#: ../../rst/network/user_guide/platform_exos.rst:35
#: ../../rst/network/user_guide/platform_frr.rst:33
#: ../../rst/network/user_guide/platform_icx.rst:34
#: ../../rst/network/user_guide/platform_ios.rst:34
#: ../../rst/network/user_guide/platform_iosxr.rst:38
#: ../../rst/network/user_guide/platform_ironware.rst:35
#: ../../rst/network/user_guide/platform_junos.rst:37
#: ../../rst/network/user_guide/platform_meraki.rst:27
#: ../../rst/network/user_guide/platform_netvisor.rst:34
#: ../../rst/network/user_guide/platform_nos.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:36
#: ../../rst/network/user_guide/platform_routeros.rst:34
#: ../../rst/network/user_guide/platform_slxos.rst:34
#: ../../rst/network/user_guide/platform_voss.rst:35
#: ../../rst/network/user_guide/platform_vyos.rst:33
msgid "Returned Data Format"
msgstr "返されるデータ形式"

#: ../../rst/network/user_guide/platform_ce.rst:36
#: ../../rst/network/user_guide/platform_iosxr.rst:38
#: ../../rst/network/user_guide/platform_vyos.rst:33
msgid "Refer to individual module documentation"
msgstr "各モジュールのドキュメンテーションを参照してください。"

#: ../../rst/network/user_guide/platform_ce.rst:41
msgid "The ``ansible_connection: local`` has been deprecated. Please use  ``ansible_connection: ansible.netcommon.netconf`` or ``ansible_connection=ansible.netcommon.network_cli`` instead."
msgstr "``ansible_connection: local`` は非推奨になりました。代わりに ``ansible_connection: ansible.netcommon.netconf`` または ``ansible_connection=ansible.netcommon.network_cli`` を使用してください。"

#: ../../rst/network/user_guide/platform_ce.rst:44
#: ../../rst/network/user_guide/platform_cnos.rst:43
#: ../../rst/network/user_guide/platform_dellos10.rst:44
#: ../../rst/network/user_guide/platform_dellos6.rst:43
#: ../../rst/network/user_guide/platform_dellos9.rst:43
#: ../../rst/network/user_guide/platform_enos.rst:45
#: ../../rst/network/user_guide/platform_eos.rst:48
#: ../../rst/network/user_guide/platform_eric_eccli.rst:41
#: ../../rst/network/user_guide/platform_exos.rst:43
#: ../../rst/network/user_guide/platform_frr.rst:40
#: ../../rst/network/user_guide/platform_icx.rst:41
#: ../../rst/network/user_guide/platform_ios.rst:43
#: ../../rst/network/user_guide/platform_iosxr.rst:47
#: ../../rst/network/user_guide/platform_ironware.rst:44
#: ../../rst/network/user_guide/platform_junos.rst:48
#: ../../rst/network/user_guide/platform_netvisor.rst:42
#: ../../rst/network/user_guide/platform_nos.rst:42
#: ../../rst/network/user_guide/platform_nxos.rst:45
#: ../../rst/network/user_guide/platform_routeros.rst:43
#: ../../rst/network/user_guide/platform_slxos.rst:43
#: ../../rst/network/user_guide/platform_voss.rst:44
#: ../../rst/network/user_guide/platform_vyos.rst:42
msgid "Using CLI in Ansible"
msgstr "Ansible での CLI の使用"

#: ../../rst/network/user_guide/platform_ce.rst:47
msgid "Example CLI inventory ``[ce:vars]``"
msgstr "CLI インベントリーの例 ``[ce:vars]``"

#: ../../rst/network/user_guide/platform_ce.rst:59
#: ../../rst/network/user_guide/platform_cnos.rst:60
#: ../../rst/network/user_guide/platform_dellos10.rst:61
#: ../../rst/network/user_guide/platform_dellos6.rst:60
#: ../../rst/network/user_guide/platform_dellos9.rst:60
#: ../../rst/network/user_guide/platform_enos.rst:62
#: ../../rst/network/user_guide/platform_eos.rst:65
#: ../../rst/network/user_guide/platform_eric_eccli.rst:55
#: ../../rst/network/user_guide/platform_exos.rst:57
#: ../../rst/network/user_guide/platform_frr.rst:54
#: ../../rst/network/user_guide/platform_icx.rst:58
#: ../../rst/network/user_guide/platform_ios.rst:60
#: ../../rst/network/user_guide/platform_iosxr.rst:62
#: ../../rst/network/user_guide/platform_ironware.rst:61
#: ../../rst/network/user_guide/platform_junos.rst:63
#: ../../rst/network/user_guide/platform_netvisor.rst:56
#: ../../rst/network/user_guide/platform_nos.rst:56
#: ../../rst/network/user_guide/platform_nxos.rst:62
#: ../../rst/network/user_guide/platform_routeros.rst:60
#: ../../rst/network/user_guide/platform_slxos.rst:57
#: ../../rst/network/user_guide/platform_voss.rst:60
#: ../../rst/network/user_guide/platform_vyos.rst:56
msgid "If you are using SSH keys (including an ssh-agent) you can remove the ``ansible_password`` configuration."
msgstr "SSH キー (ssh-agent を含む) を使用している場合は、``ansible_password`` 設定を削除できます。"

#: ../../rst/network/user_guide/platform_ce.rst:60
#: ../../rst/network/user_guide/platform_cnos.rst:61
#: ../../rst/network/user_guide/platform_dellos10.rst:62
#: ../../rst/network/user_guide/platform_dellos6.rst:61
#: ../../rst/network/user_guide/platform_dellos9.rst:61
#: ../../rst/network/user_guide/platform_enos.rst:63
#: ../../rst/network/user_guide/platform_eos.rst:66
#: ../../rst/network/user_guide/platform_eric_eccli.rst:56
#: ../../rst/network/user_guide/platform_exos.rst:58
#: ../../rst/network/user_guide/platform_frr.rst:55
#: ../../rst/network/user_guide/platform_icx.rst:59
#: ../../rst/network/user_guide/platform_ios.rst:61
#: ../../rst/network/user_guide/platform_iosxr.rst:63
#: ../../rst/network/user_guide/platform_ironware.rst:62
#: ../../rst/network/user_guide/platform_junos.rst:64
#: ../../rst/network/user_guide/platform_netvisor.rst:57
#: ../../rst/network/user_guide/platform_nos.rst:57
#: ../../rst/network/user_guide/platform_nxos.rst:63
#: ../../rst/network/user_guide/platform_routeros.rst:61
#: ../../rst/network/user_guide/platform_slxos.rst:58
#: ../../rst/network/user_guide/platform_voss.rst:61
#: ../../rst/network/user_guide/platform_vyos.rst:57
msgid "If you are accessing your host directly (not through a bastion/jump host) you can remove the ``ansible_ssh_common_args`` configuration."
msgstr "(bastion/ジャンプホストを経由せず) ホストに直接アクセスしている場合は、``ansible_ssh_common_args`` 設定を削除できます。"

#: ../../rst/network/user_guide/platform_ce.rst:61
#: ../../rst/network/user_guide/platform_cnos.rst:62
#: ../../rst/network/user_guide/platform_dellos10.rst:63
#: ../../rst/network/user_guide/platform_dellos6.rst:62
#: ../../rst/network/user_guide/platform_dellos9.rst:62
#: ../../rst/network/user_guide/platform_enos.rst:64
#: ../../rst/network/user_guide/platform_eos.rst:67
#: ../../rst/network/user_guide/platform_eric_eccli.rst:57
#: ../../rst/network/user_guide/platform_exos.rst:59
#: ../../rst/network/user_guide/platform_frr.rst:56
#: ../../rst/network/user_guide/platform_icx.rst:60
#: ../../rst/network/user_guide/platform_ios.rst:62
#: ../../rst/network/user_guide/platform_iosxr.rst:64
#: ../../rst/network/user_guide/platform_ironware.rst:63
#: ../../rst/network/user_guide/platform_junos.rst:65
#: ../../rst/network/user_guide/platform_netvisor.rst:58
#: ../../rst/network/user_guide/platform_nos.rst:58
#: ../../rst/network/user_guide/platform_nxos.rst:64
#: ../../rst/network/user_guide/platform_routeros.rst:62
#: ../../rst/network/user_guide/platform_slxos.rst:59
#: ../../rst/network/user_guide/platform_voss.rst:62
#: ../../rst/network/user_guide/platform_vyos.rst:58
msgid "If you are accessing your host through a bastion/jump host, you cannot include your SSH password in the ``ProxyCommand`` directive. To prevent secrets from leaking out (for example in ``ps`` output), SSH does not support providing passwords via environment variables."
msgstr "bastion/ジャンプホストを介してホストにアクセスする場合は、``ProxyCommand`` ディレクティブに SSH パスワードを含めることができません。シークレットが漏洩するのを防ぐために (例: ``ps`` 出力)、SSH は環境変数によるパスワードの提供をサポートしません。"

#: ../../rst/network/user_guide/platform_ce.rst:64
#: ../../rst/network/user_guide/platform_cnos.rst:65
#: ../../rst/network/user_guide/platform_dellos10.rst:66
#: ../../rst/network/user_guide/platform_dellos6.rst:65
#: ../../rst/network/user_guide/platform_dellos9.rst:65
#: ../../rst/network/user_guide/platform_enos.rst:67
#: ../../rst/network/user_guide/platform_eos.rst:70
#: ../../rst/network/user_guide/platform_eric_eccli.rst:60
#: ../../rst/network/user_guide/platform_exos.rst:62
#: ../../rst/network/user_guide/platform_frr.rst:59
#: ../../rst/network/user_guide/platform_icx.rst:63
#: ../../rst/network/user_guide/platform_ios.rst:65
#: ../../rst/network/user_guide/platform_iosxr.rst:67
#: ../../rst/network/user_guide/platform_ironware.rst:66
#: ../../rst/network/user_guide/platform_junos.rst:68
#: ../../rst/network/user_guide/platform_netvisor.rst:61
#: ../../rst/network/user_guide/platform_nos.rst:61
#: ../../rst/network/user_guide/platform_nxos.rst:67
#: ../../rst/network/user_guide/platform_routeros.rst:66
#: ../../rst/network/user_guide/platform_slxos.rst:62
#: ../../rst/network/user_guide/platform_voss.rst:65
#: ../../rst/network/user_guide/platform_vyos.rst:61
msgid "Example CLI task"
msgstr "CLI タスクの例"

#: ../../rst/network/user_guide/platform_ce.rst:75
#: ../../rst/network/user_guide/platform_iosxr.rst:78
#: ../../rst/network/user_guide/platform_junos.rst:79
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:38
msgid "Using NETCONF in Ansible"
msgstr "Ansible での NETCONF の使用"

#: ../../rst/network/user_guide/platform_ce.rst:78
#: ../../rst/network/user_guide/platform_iosxr.rst:81
#: ../../rst/network/user_guide/platform_junos.rst:82
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:41
msgid "Enabling NETCONF"
msgstr "NETCONF の有効化"

#: ../../rst/network/user_guide/platform_ce.rst:80
#: ../../rst/network/user_guide/platform_iosxr.rst:83
#: ../../rst/network/user_guide/platform_junos.rst:84
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:43
msgid "Before you can use NETCONF to connect to a switch, you must:"
msgstr "NETCONF を使用してスイッチに接続する前に、以下を行う必要があります。"

#: ../../rst/network/user_guide/platform_ce.rst:82
#: ../../rst/network/user_guide/platform_iosxr.rst:85
#: ../../rst/network/user_guide/platform_junos.rst:86
msgid "install the ``ncclient`` python package on your control node(s) with ``pip install ncclient``"
msgstr "``pip install ncclient`` を使用して、``ncclient`` python パッケージをコントロールノードにインストールします。"

#: ../../rst/network/user_guide/platform_ce.rst:83
msgid "enable NETCONF on the CloudEngine OS device(s)"
msgstr "CloudEngine OS デバイスでの NETCONF の有効化"

#: ../../rst/network/user_guide/platform_ce.rst:85
msgid "To enable NETCONF on a new switch using Ansible, use the ``community.network.ce_config`` module with the CLI connection. Set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr "Ansibleを使用する新しいスイッチで NETCONF を有効にするには、CLI 接続でモジュールを ``community.network.ce_config`` 使用します。上記の CLI の例のようにプラットフォームレベルの変数を設定し、次のような Playbook タスクを実行します。"

#: ../../rst/network/user_guide/platform_ce.rst:96
#: ../../rst/network/user_guide/platform_iosxr.rst:97
#: ../../rst/network/user_guide/platform_junos.rst:98
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:58
msgid "Once NETCONF is enabled, change your variables to use the NETCONF connection."
msgstr "NETCONF を有効にしたら、変数を変更して NETCONF 接続を使用します。"

#: ../../rst/network/user_guide/platform_ce.rst:99
msgid "Example NETCONF inventory ``[ce:vars]``"
msgstr "NETCONF インベントリーの例 ``[ce:vars]``"

#: ../../rst/network/user_guide/platform_ce.rst:112
#: ../../rst/network/user_guide/platform_iosxr.rst:113
#: ../../rst/network/user_guide/platform_junos.rst:114
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:73
msgid "Example NETCONF task"
msgstr "NETCONF タスクの例"

#: ../../rst/network/user_guide/platform_ce.rst:124
msgid "Notes"
msgstr "備考"

#: ../../rst/network/user_guide/platform_ce.rst:127
msgid "Modules that work with ``ansible.netcommon.network_cli``"
msgstr "``ansible.netcommon.network_cli`` と連携するモジュール"

#: ../../rst/network/user_guide/platform_ce.rst:157
msgid "Modules that work with ``ansible.netcommon.netconf``"
msgstr "``ansible.netcommon.netconf`` と連携するモジュール"

#: ../../rst/network/user_guide/shared_snippets/SSH_warning.txt:2
msgid "Never store passwords in plain text. We recommend using SSH keys to authenticate SSH connections. Ansible supports ssh-agent to manage your SSH keys. If you must use passwords to authenticate SSH connections, we recommend encrypting them with :ref:`Ansible Vault <playbooks_vault>`."
msgstr "パスワードをプレーンテキストで保存しないでください。SSH キーを使用して SSH 接続を認証することが推奨されます。Ansible は SSH キーを管理するための ssh-agent をサポートしています。SSH 接続の認証にパスワードを使用する必要がある場合は、:ref:`Ansible Vault <playbooks_vault>` で暗号化することが推奨されます。"

#: ../../rst/network/user_guide/platform_ce.rst:213
#: ../../rst/network/user_guide/platform_cnos.rst:78
#: ../../rst/network/user_guide/platform_dellos10.rst:80
#: ../../rst/network/user_guide/platform_dellos6.rst:79
#: ../../rst/network/user_guide/platform_dellos9.rst:79
#: ../../rst/network/user_guide/platform_enos.rst:80
#: ../../rst/network/user_guide/platform_eos.rst:140
#: ../../rst/network/user_guide/platform_eric_eccli.rst:73
#: ../../rst/network/user_guide/platform_exos.rst:108
#: ../../rst/network/user_guide/platform_frr.rst:73
#: ../../rst/network/user_guide/platform_icx.rst:77
#: ../../rst/network/user_guide/platform_ios.rst:79
#: ../../rst/network/user_guide/platform_iosxr.rst:130
#: ../../rst/network/user_guide/platform_ironware.rst:80
#: ../../rst/network/user_guide/platform_junos.rst:129
#: ../../rst/network/user_guide/platform_meraki.rst:44
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:133
#: ../../rst/network/user_guide/platform_netvisor.rst:78
#: ../../rst/network/user_guide/platform_nos.rst:76
#: ../../rst/network/user_guide/platform_nxos.rst:166
#: ../../rst/network/user_guide/platform_routeros.rst:80
#: ../../rst/network/user_guide/platform_slxos.rst:77
#: ../../rst/network/user_guide/platform_voss.rst:78
#: ../../rst/network/user_guide/platform_vyos.rst:74
msgid ":ref:`timeout_options`"
msgstr ":ref:`timeout_options`"

#: ../../rst/network/user_guide/platform_cnos.rst:5
msgid "CNOS Platform Options"
msgstr "CNOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_cnos.rst:7
msgid "CNOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on CNOS in Ansible."
msgstr "CNOS は、`community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の CNOS で Enable Mode を有効にする方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_cnos.rst:29
#: ../../rst/network/user_guide/platform_dellos10.rst:29
#: ../../rst/network/user_guide/platform_dellos6.rst:29
#: ../../rst/network/user_guide/platform_dellos9.rst:29
#: ../../rst/network/user_guide/platform_enos.rst:29
#: ../../rst/network/user_guide/platform_eric_eccli.rst:29
#: ../../rst/network/user_guide/platform_frr.rst:29
#: ../../rst/network/user_guide/platform_icx.rst:29
#: ../../rst/network/user_guide/platform_ios.rst:29
#: ../../rst/network/user_guide/platform_ironware.rst:29
#: ../../rst/network/user_guide/platform_netvisor.rst:30
#: ../../rst/network/user_guide/platform_slxos.rst:30
#: ../../rst/network/user_guide/platform_voss.rst:30
#: ../../rst/network/user_guide/platform_vyos.rst:29
msgid "``ansible_connection: ansible.netcommon.network_cli``"
msgstr "``ansible_connection: ansible.netcommon.network_cli``"

#: ../../rst/network/user_guide/platform_cnos.rst:31
#: ../../rst/network/user_guide/platform_dellos10.rst:31
#: ../../rst/network/user_guide/platform_dellos6.rst:31
#: ../../rst/network/user_guide/platform_dellos9.rst:31
#: ../../rst/network/user_guide/platform_enos.rst:31
#: ../../rst/network/user_guide/platform_icx.rst:31
#: ../../rst/network/user_guide/platform_ios.rst:31
#: ../../rst/network/user_guide/platform_ironware.rst:31
#: ../../rst/network/user_guide/platform_nxos.rst:32
msgid "supported: use ``ansible_become: yes`` with ``ansible_become_method: enable`` and ``ansible_become_password:``"
msgstr "サポート対象: ``ansible_become: yes`` を、``ansible_become_method: enable`` および ``ansible_become_password:`` と併用します。"

#: ../../rst/network/user_guide/platform_cnos.rst:35
#: ../../rst/network/user_guide/platform_dellos10.rst:35
#: ../../rst/network/user_guide/platform_dellos6.rst:35
#: ../../rst/network/user_guide/platform_dellos9.rst:35
#: ../../rst/network/user_guide/platform_enos.rst:35
#: ../../rst/network/user_guide/platform_eos.rst:39
#: ../../rst/network/user_guide/platform_eric_eccli.rst:33
#: ../../rst/network/user_guide/platform_exos.rst:35
#: ../../rst/network/user_guide/platform_frr.rst:33
#: ../../rst/network/user_guide/platform_icx.rst:34
#: ../../rst/network/user_guide/platform_ios.rst:34
#: ../../rst/network/user_guide/platform_ironware.rst:35
#: ../../rst/network/user_guide/platform_junos.rst:37
#: ../../rst/network/user_guide/platform_netvisor.rst:34
#: ../../rst/network/user_guide/platform_nos.rst:34
#: ../../rst/network/user_guide/platform_nxos.rst:36
#: ../../rst/network/user_guide/platform_routeros.rst:34
#: ../../rst/network/user_guide/platform_slxos.rst:34
#: ../../rst/network/user_guide/platform_voss.rst:35
msgid "``stdout[0].``"
msgstr "``stdout[0].``"

#: ../../rst/network/user_guide/platform_cnos.rst:40
#: ../../rst/network/user_guide/platform_dellos10.rst:40
#: ../../rst/network/user_guide/platform_dellos6.rst:40
#: ../../rst/network/user_guide/platform_dellos9.rst:40
#: ../../rst/network/user_guide/platform_enos.rst:42
#: ../../rst/network/user_guide/platform_ios.rst:40
#: ../../rst/network/user_guide/platform_ironware.rst:41
#: ../../rst/network/user_guide/platform_vyos.rst:39
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.network_cli`` instead."
msgstr "``ansible_connection: local`` は非推奨になりました。代わりに ``ansible_connection: ansible.netcommon.network_cli`` を使用してください。"

#: ../../rst/network/user_guide/platform_cnos.rst:46
msgid "Example CLI ``group_vars/cnos.yml``"
msgstr "CLI の例 ``group_vars/cnos.yml``"

#: ../../rst/network/user_guide/platform_dellos10.rst:5
msgid "Dell OS10 Platform Options"
msgstr "Dell OS10 プラットフォームオプション"

#: ../../rst/network/user_guide/platform_dellos10.rst:7
msgid "The `dellemc.os10 <https://galaxy.ansible.com/dellemc_networking/os10>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on OS10 in Ansible."
msgstr "`dellemc.os10 <https://galaxy.ansible.com/dellemc_networking/os10>`_ コレクションは Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の OS10 で Enable Mode を使用する方法に関する詳細が記載されています。"

#: ../../rst/network/user_guide/platform_dellos10.rst:47
msgid "Example CLI ``group_vars/dellos10.yml``"
msgstr "CLI の例 ``group_vars/dellos10.yml``"

#: ../../rst/network/user_guide/platform_dellos6.rst:5
msgid "Dell OS6 Platform Options"
msgstr "Dell OS6 プラットフォームオプション"

#: ../../rst/network/user_guide/platform_dellos6.rst:7
msgid "The `dellemc.os6 <https://github.com/ansible-collections/dellemc.os6>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on OS6 in Ansible."
msgstr "`dellemc.os6 <https://github.com/ansible-collections/dellemc.os6>`_ コレクションは Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の OS6 で Enable Mode の使用方法に関する詳細が記載されています。"

#: ../../rst/network/user_guide/platform_dellos6.rst:46
msgid "Example CLI ``group_vars/dellos6.yml``"
msgstr "CLI の例 ``group_vars/dellos6.yml``"

#: ../../rst/network/user_guide/platform_dellos9.rst:5
msgid "Dell OS9 Platform Options"
msgstr "Dell OS9 プラットフォームオプション"

#: ../../rst/network/user_guide/platform_dellos9.rst:7
msgid "The `dellemc.os9 <https://github.com/ansible-collections/dellemc.os9>`_ collection  supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on OS9 in Ansible."
msgstr "`dellemc.os9 <https://github.com/ansible-collections/dellemc.os9>`_ コレクションは Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の OS9 で Enable Mode の使用方法に関する詳細が記載されています。"

#: ../../rst/network/user_guide/platform_dellos9.rst:46
msgid "Example CLI ``group_vars/dellos9.yml``"
msgstr "CLI の例 ``group_vars/dellos9.yml``"

#: ../../rst/network/user_guide/platform_enos.rst:5
msgid "ENOS Platform Options"
msgstr "ENOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_enos.rst:7
msgid "ENOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on ENOS in Ansible."
msgstr "ENOS は、`community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の ENOS で Enable Mode を有効にする方法を説明します。"

#: ../../rst/network/user_guide/platform_enos.rst:48
msgid "Example CLI ``group_vars/enos.yml``"
msgstr "CLI の例 ``group_vars/enos.yml``"

#: ../../rst/network/user_guide/platform_eos.rst:5
msgid "EOS Platform Options"
msgstr "EOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_eos.rst:7
msgid "The `Arista EOS <https://galaxy.ansible.com/arista/eos>`_ collection supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr "`Arista EOS <https://galaxy.ansible.com/arista/eos>`_ コレクションは複数の接続をサポートします。このページでは、各接続がどのように Ansible でどのように機能するかと、その使用方法を説明します。"

#: ../../rst/network/user_guide/platform_eos.rst:19
msgid "eAPI"
msgstr "eAPI"

#: ../../rst/network/user_guide/platform_eos.rst:21
#: ../../rst/network/user_guide/platform_exos.rst:22
#: ../../rst/network/user_guide/platform_meraki.rst:21
#: ../../rst/network/user_guide/platform_nxos.rst:21
msgid "HTTP(S)"
msgstr "HTTP(S)"

#: ../../rst/network/user_guide/platform_eos.rst:23
#: ../../rst/network/user_guide/platform_exos.rst:24
#: ../../rst/network/user_guide/platform_nxos.rst:23
msgid "uses HTTPS certificates if present"
msgstr "HTTPS 証明書が存在する場合は使用します。"

#: ../../rst/network/user_guide/platform_eos.rst:27
#: ../../rst/network/user_guide/platform_exos.rst:28
#: ../../rst/network/user_guide/platform_nxos.rst:27
msgid "via a web proxy"
msgstr "Web プロキシー経由"

#: ../../rst/network/user_guide/platform_eos.rst:29
msgid "``ansible_connection:`` ``ansible.netcommon.network_cli``"
msgstr "``ansible_connection:`` ``ansible.netcommon.network_cli``"

#: ../../rst/network/user_guide/platform_eos.rst:29
msgid "``ansible_connection:`` ``ansible.netcommon.httpapi``"
msgstr "``ansible_connection:`` ``ansible.netcommon.httpapi``"

#: ../../rst/network/user_guide/platform_eos.rst:33
msgid "supported: |br|"
msgstr "サポート対象: |br|"

#: ../../rst/network/user_guide/platform_eos.rst:35
msgid "use ``ansible_become: yes`` with ``ansible_become_method: enable``"
msgstr "``ansible_become: yes`` を ``ansible_become_method: enable`` と併用します。"

#: ../../rst/network/user_guide/platform_eos.rst:35
msgid "``httpapi`` uses ``ansible_become: yes`` with ``ansible_become_method: enable``"
msgstr "``httpapi`` は、``ansible_become: yes`` を ``ansible_become_method: enable`` と併用します。"

#: ../../rst/network/user_guide/platform_eos.rst:39
#: ../../rst/network/user_guide/platform_exos.rst:35
#: ../../rst/network/user_guide/platform_nxos.rst:36
msgid "``stdout[0].messages[0].``"
msgstr "``stdout[0].messages[0].``"

#: ../../rst/network/user_guide/platform_eos.rst:45
#: ../../rst/network/user_guide/platform_nxos.rst:42
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.network_cli`` or ``ansible_connection: ansible.netcommon.httpapi`` instead."
msgstr "``ansible_connection: local`` は非推奨になりました。代わりに ``ansible_connection: ansible.netcommon.network_cli`` または ``ansible_connection: ansible.netcommon.httpapi`` を使用してください。"

#: ../../rst/network/user_guide/platform_eos.rst:51
msgid "Example CLI ``group_vars/eos.yml``"
msgstr "CLI の例 ``group_vars/eos.yml``"

#: ../../rst/network/user_guide/platform_eos.rst:83
msgid "Using eAPI in Ansible"
msgstr "Ansible での eAPI の使用"

#: ../../rst/network/user_guide/platform_eos.rst:86
msgid "Enabling eAPI"
msgstr "EAPI の有効化"

#: ../../rst/network/user_guide/platform_eos.rst:88
msgid "Before you can use eAPI to connect to a switch, you must enable eAPI. To enable eAPI on a new switch with Ansible, use the ``arista.eos.eos_eapi`` module through the CLI connection. Set up ``group_vars/eos.yml`` just like in the CLI example above, then run a playbook task like this:"
msgstr "eAPI を使用してスイッチに接続する前に、eAPI を有効にする必要があります。Ansible を使用する新しいスイッチで eAPI を有効にするには、CLI 接続を介して ``arista.eos.eos_eapi`` モジュールを使用します。上記の CLI の例のように ``group_vars/eos.yml`` を設定し、次のように Playbook タスクを実行します。"

#: ../../rst/network/user_guide/platform_eos.rst:100
msgid "You can find more options for enabling HTTP/HTTPS connections in the :ref:`arista.eos.eos_eapi <ansible_collections.arista.eos.eos_eapi_module>` module documentation."
msgstr "HTTP/HTTPS 接続を有効にするオプションの詳細は、:ref:`arista.eos.eos_eapi <ansible_collections.arista.eos.eos_eapi_module>` モジュールのドキュメントを参照してください。"

#: ../../rst/network/user_guide/platform_eos.rst:102
msgid "Once eAPI is enabled, change your ``group_vars/eos.yml`` to use the eAPI connection."
msgstr "eAPI を有効にしたら、``group_vars/eos.yml`` を変更して eAPI 接続を使用します。"

#: ../../rst/network/user_guide/platform_eos.rst:105
msgid "Example eAPI ``group_vars/eos.yml``"
msgstr "eAPI の例 ``group_vars/eos.yml``"

#: ../../rst/network/user_guide/platform_eos.rst:118
#: ../../rst/network/user_guide/platform_exos.rst:88
#: ../../rst/network/user_guide/platform_nxos.rst:111
msgid "If you are accessing your host directly (not through a web proxy) you can remove the ``proxy_env`` configuration."
msgstr "(Web プロキシーを経由せず) ホストに直接アクセスしている場合は、``proxy_env`` 設定を削除できます。"

#: ../../rst/network/user_guide/platform_eos.rst:119
#: ../../rst/network/user_guide/platform_exos.rst:89
#: ../../rst/network/user_guide/platform_nxos.rst:112
msgid "If you are accessing your host through a web proxy using ``https``, change ``http_proxy`` to ``https_proxy``."
msgstr "``https`` を使用して Web プロキシー経由でホストにアクセスする場合は、``http_proxy`` を ``https_proxy`` に変更します。"

#: ../../rst/network/user_guide/platform_eos.rst:123
msgid "Example eAPI task"
msgstr "eAPI タスクの例"

#: ../../rst/network/user_guide/platform_eos.rst:134
msgid "In this example the ``proxy_env`` variable defined in ``group_vars`` gets passed to the ``environment`` option of the module in the task."
msgstr "この例では、``group_vars`` で定義された ``proxy_env`` 変数が、タスクで使用されるモジュールの ``environment`` オプションに渡されます。"

#: ../../rst/network/user_guide/platform_eric_eccli.rst:5
msgid "ERIC_ECCLI Platform Options"
msgstr "ERIC_ECCLI プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_eric_eccli.rst:7
msgid "Extreme ERIC_ECCLI is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. This page offers details on how to use ``ansible.netcommon.network_cli`` on ERIC_ECCLI in Ansible."
msgstr "Extreme ERIC_ECCLI は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、現在は CLI 接続のみに対応しています。このページでは、Ansible の ERIC_ECCLI で ``ansible.netcommon.network_cli`` を使用する方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_eric_eccli.rst:31
msgid "not supported by ERIC_ECCLI"
msgstr "ERIC_ECCLI ではサポートされません。"

#: ../../rst/network/user_guide/platform_eric_eccli.rst:38
msgid "ERIC_ECCLI does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr "ERIC_ECCLI は、``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_eric_eccli.rst:44
msgid "Example CLI ``group_vars/eric_eccli.yml``"
msgstr "CLI の例 ``group_vars/eric_eccli.yml``"

#: ../../rst/network/user_guide/platform_exos.rst:5
msgid "EXOS Platform Options"
msgstr "EXOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_exos.rst:7
msgid "Extreme EXOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr "Extreme EXOS は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、複数の接続をサポートします。このページでは、Ansible での各接続がどのように機能し、どのように使用されるかを詳細に説明します。"

#: ../../rst/network/user_guide/platform_exos.rst:20
msgid "EXOS-API"
msgstr "EXOS-API"

#: ../../rst/network/user_guide/platform_exos.rst:31
#: ../../rst/network/user_guide/platform_nxos.rst:30
msgid "``ansible.netcommon.httpapi``"
msgstr "``ansible.netcommon.httpapi``"

#: ../../rst/network/user_guide/platform_exos.rst:33
msgid "not supported by EXOS"
msgstr "EXOS ではサポートされません"

#: ../../rst/network/user_guide/platform_exos.rst:40
msgid "EXOS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli`` or ``ansible_connection: ansible.netcommon.httpapi``."
msgstr "EXOS は、``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` または ``ansible_connection: ansible.netcommon.httpapi`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_exos.rst:46
msgid "Example CLI ``group_vars/exos.yml``"
msgstr "CLI の例 ``group_vars/exos.yml``"

#: ../../rst/network/user_guide/platform_exos.rst:74
msgid "Using EXOS-API in Ansible"
msgstr "Ansible での EXOS-API の使用"

#: ../../rst/network/user_guide/platform_exos.rst:77
msgid "Example EXOS-API ``group_vars/exos.yml``"
msgstr "EXOS-API の例 ``group_vars/exos.yml``"

#: ../../rst/network/user_guide/platform_exos.rst:93
msgid "Example EXOS-API task"
msgstr "EXOS-API タスクの例"

#: ../../rst/network/user_guide/platform_exos.rst:102
#: ../../rst/network/user_guide/platform_nxos.rst:127
msgid "In this example the ``proxy_env`` variable defined in ``group_vars`` gets passed to the ``environment`` option of the module used in the task."
msgstr "この例では、``proxy_env`` で定義された ``group_vars`` 変数は、タスクで使用されるモジュールの ``environment`` オプションに渡されます。"

#: ../../rst/network/user_guide/platform_frr.rst:5
msgid "FRR Platform Options"
msgstr "FRR プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_frr.rst:7
msgid "The `FRR <https://galaxy.ansible.com/frr/frr>`_ collection supports the ``ansible.netcommon.network_cli`` connection. This section provides details on how to use this connection for Free Range Routing (FRR)."
msgstr "`FRR <https://galaxy.ansible.com/frr/frr>`_ コレクションは、``ansible.netcommon.network_cli`` 接続をサポートします。本セクションでは、この接続を Free Range Routing (FRR) に使用する方法を説明します。"

#: ../../rst/network/user_guide/platform_frr.rst:31
#: ../../rst/network/user_guide/platform_iosxr.rst:36
#: ../../rst/network/user_guide/platform_vyos.rst:31
msgid "not supported"
msgstr "サポート対象外"

#: ../../rst/network/user_guide/platform_frr.rst:43
msgid "Example CLI ``group_vars/frr.yml``"
msgstr "CLI の例 ``group_vars/frr.yml``"

#: ../../rst/network/user_guide/platform_frr.rst:53
msgid "The ``ansible_user`` should be a part of the ``frrvty`` group and should have the default shell set to ``/bin/vtysh``."
msgstr "``ansible_user`` は ``frrvty`` グループに含まれるはずです。デフォルトのシェルは ``/bin/vtysh`` に設定する必要があります。"

#: ../../rst/network/user_guide/platform_icx.rst:5
msgid "ICX Platform Options"
msgstr "ICX プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_icx.rst:7
msgid "ICX is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on ICX in Ansible."
msgstr "ICX は、`community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の ICX で Enable Mode を有効にする方法を説明します。"

#: ../../rst/network/user_guide/platform_icx.rst:44
msgid "Example CLI ``group_vars/icx.yml``"
msgstr "CLI の例 ``group_vars/icx.yml``"

#: ../../rst/network/user_guide/platform_index.rst:5
#: ../../rst/network/user_guide/platform_index.rst:9
msgid "Platform Options"
msgstr "プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_index.rst:7
msgid "Some Ansible Network platforms support multiple connection types, privilege escalation (``enable`` mode), or other options. The pages in this section offer standardized guides to understanding available options on each network platform. We welcome contributions from community-maintained platforms to this section."
msgstr "一部の Ansible Network プラットフォームは、複数の接続タイプ、権限エスカレーション (``enable`` モード) 、またはその他のオプションをサポートしています。本セクションのページでは、各ネットワークプラットフォームで利用可能なオプションを理解する標準ガイドが紹介されています。コミュニティーが管理するプラットフォームから、このセクションへの貢献を歓迎いたします。"

#: ../../rst/network/user_guide/platform_index.rst:41
msgid "Settings by Platform"
msgstr "プラットフォーム別の設定"

#: ../../rst/network/user_guide/platform_index.rst:58
msgid "``ansible_connection:`` settings available"
msgstr "``ansible_connection:`` 設定が利用可能"

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "Network OS"
msgstr "ネットワーク OS"

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "``ansible_network_os:``"
msgstr "``ansible_network_os:``"

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "network_cli"
msgstr "network_cli"

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "netconf"
msgstr "netconf"

#: ../../rst/network/user_guide/platform_index.rst:60
msgid "httpapi"
msgstr "httpapi"

#: ../../rst/network/user_guide/platform_index.rst:62
msgid "`Arista EOS`_ `[†]`_"
msgstr "`Arista EOS`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:62
msgid "``arista.eos.eos``"
msgstr "``arista.eos.eos``"

#: ../../rst/network/user_guide/platform_index.rst:62
#: ../../rst/network/user_guide/platform_index.rst:63
#: ../../rst/network/user_guide/platform_index.rst:64
#: ../../rst/network/user_guide/platform_index.rst:65
#: ../../rst/network/user_guide/platform_index.rst:66
#: ../../rst/network/user_guide/platform_index.rst:67
#: ../../rst/network/user_guide/platform_index.rst:68
#: ../../rst/network/user_guide/platform_index.rst:69
#: ../../rst/network/user_guide/platform_index.rst:70
#: ../../rst/network/user_guide/platform_index.rst:71
#: ../../rst/network/user_guide/platform_index.rst:72
#: ../../rst/network/user_guide/platform_index.rst:73
#: ../../rst/network/user_guide/platform_index.rst:74
#: ../../rst/network/user_guide/platform_index.rst:75
#: ../../rst/network/user_guide/platform_index.rst:76
#: ../../rst/network/user_guide/platform_index.rst:77
#: ../../rst/network/user_guide/platform_index.rst:78
#: ../../rst/network/user_guide/platform_index.rst:79
#: ../../rst/network/user_guide/platform_index.rst:80
#: ../../rst/network/user_guide/platform_index.rst:81
#: ../../rst/network/user_guide/platform_index.rst:82
#: ../../rst/network/user_guide/platform_index.rst:83
#: ../../rst/network/user_guide/platform_index.rst:84
#: ../../rst/network/user_guide/platform_index.rst:85
#: ../../rst/network/user_guide/platform_index.rst:86
#: ../../rst/network/user_guide/platform_index.rst:87
#: ../../rst/network/user_guide/platform_index.rst:88
#: ../../rst/network/user_guide/platform_index.rst:89
msgid "✓"
msgstr "✓"

#: ../../rst/network/user_guide/platform_index.rst:63
msgid "`Ciena SAOS6`_"
msgstr "`Ciena SAOS6`_"

#: ../../rst/network/user_guide/platform_index.rst:63
msgid "``ciena.saos6.saos6``"
msgstr "``ciena.saos6.saos6``"

#: ../../rst/network/user_guide/platform_index.rst:64
msgid "`Cisco ASA`_ `[†]`_"
msgstr "`Cisco ASA`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:64
msgid "``cisco.asa.asa``"
msgstr "``cisco.asa.asa``"

#: ../../rst/network/user_guide/platform_index.rst:65
msgid "`Cisco IOS`_ `[†]`_"
msgstr "`Cisco IOS`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:65
msgid "``cisco.ios.ios``"
msgstr "``cisco.ios.ios``"

#: ../../rst/network/user_guide/platform_index.rst:66
msgid "`Cisco IOS XR`_ `[†]`_"
msgstr "`Cisco IOS XR`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:66
msgid "``cisco.iosxr.iosxr``"
msgstr "``cisco.iosxr.iosxr``"

#: ../../rst/network/user_guide/platform_index.rst:67
msgid "`Cisco NX-OS`_ `[†]`_"
msgstr "`Cisco NX-OS`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:67
msgid "``cisco.nxos.nxos``"
msgstr "``cisco.nxos.nxos``"

#: ../../rst/network/user_guide/platform_index.rst:68
msgid "`Cloudengine OS`_"
msgstr "`Cloudengine OS`_"

#: ../../rst/network/user_guide/platform_index.rst:68
msgid "``community.network.ce``"
msgstr "``community.network.ce``"

#: ../../rst/network/user_guide/platform_index.rst:69
msgid "`Dell OS6`_"
msgstr "`Dell OS6`_"

#: ../../rst/network/user_guide/platform_index.rst:69
msgid "``dellemc.os6.os6``"
msgstr "``dellemc.os6.os6``"

#: ../../rst/network/user_guide/platform_index.rst:70
msgid "`Dell OS9`_"
msgstr "`Dell OS9`_"

#: ../../rst/network/user_guide/platform_index.rst:70
msgid "``dellemc.os9.os9``"
msgstr "``dellemc.os9.os9``"

#: ../../rst/network/user_guide/platform_index.rst:71
msgid "`Dell OS10`_"
msgstr "`Dell OS10`_"

#: ../../rst/network/user_guide/platform_index.rst:71
msgid "``dellemc.os10.os10``"
msgstr "``dellemc.os10.os10``"

#: ../../rst/network/user_guide/platform_index.rst:72
msgid "`Ericsson ECCLI`_"
msgstr "`Ericsson ECCLI`_"

#: ../../rst/network/user_guide/platform_index.rst:72
msgid "``community.network.eric_eccli``"
msgstr "``community.network.eric_eccli``"

#: ../../rst/network/user_guide/platform_index.rst:73
msgid "`Extreme EXOS`_"
msgstr "`Extreme EXOS`_"

#: ../../rst/network/user_guide/platform_index.rst:73
msgid "``community.network.exos``"
msgstr "``community.network.exos``"

#: ../../rst/network/user_guide/platform_index.rst:74
msgid "`Extreme IronWare`_"
msgstr "`Extreme IronWare`_"

#: ../../rst/network/user_guide/platform_index.rst:74
msgid "``community.network.ironware``"
msgstr "``community.network.ironware``"

#: ../../rst/network/user_guide/platform_index.rst:75
msgid "`Extreme NOS`_"
msgstr "`Extreme NOS`_"

#: ../../rst/network/user_guide/platform_index.rst:75
msgid "``community.network.nos``"
msgstr "``community.network.nos``"

#: ../../rst/network/user_guide/platform_index.rst:76
msgid "`Extreme SLX-OS`_"
msgstr "`Extreme SLX-OS`_"

#: ../../rst/network/user_guide/platform_index.rst:76
msgid "``community.network.slxos``"
msgstr "``community.network.slxos``"

#: ../../rst/network/user_guide/platform_index.rst:77
msgid "`Extreme VOSS`_"
msgstr "`Extreme VOSS`_"

#: ../../rst/network/user_guide/platform_index.rst:77
msgid "``community.network.voss``"
msgstr "``community.network.voss``"

#: ../../rst/network/user_guide/platform_index.rst:78
msgid "`F5 BIG-IP`_"
msgstr "`F5 BIG-IP`_"

#: ../../rst/network/user_guide/platform_index.rst:79
msgid "`F5 BIG-IQ`_"
msgstr "`F5 BIG-IQ`_"

#: ../../rst/network/user_guide/platform_index.rst:80
msgid "`Junos OS`_ `[†]`_"
msgstr "`Junos OS`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:80
msgid "``junipernetworks.junos.junos``"
msgstr "``junipernetworks.junos.junos``"

#: ../../rst/network/user_guide/platform_index.rst:81
msgid "`Lenovo CNOS`_"
msgstr "`Lenovo CNOS`_"

#: ../../rst/network/user_guide/platform_index.rst:81
msgid "``community.network.cnos``"
msgstr "``community.network.cnos``"

#: ../../rst/network/user_guide/platform_index.rst:82
msgid "`Lenovo ENOS`_"
msgstr "`Lenovo ENOS`_"

#: ../../rst/network/user_guide/platform_index.rst:82
msgid "``community.network.enos``"
msgstr "``community.network.enos``"

#: ../../rst/network/user_guide/platform_index.rst:83
msgid "`Meraki`_"
msgstr "`Meraki`_"

#: ../../rst/network/user_guide/platform_index.rst:84
msgid "`MikroTik RouterOS`_"
msgstr "`MikroTik RouterOS`_"

#: ../../rst/network/user_guide/platform_index.rst:84
msgid "``community.network.routeros``"
msgstr "``community.network.routeros``"

#: ../../rst/network/user_guide/platform_index.rst:85
msgid "`Nokia SR OS`_"
msgstr "`Nokia SR OS`_"

#: ../../rst/network/user_guide/platform_index.rst:86
msgid "`Pluribus Netvisor`_"
msgstr "`Pluribus Netvisor`_"

#: ../../rst/network/user_guide/platform_index.rst:86
msgid "``community.network.netvisor``"
msgstr "``community.network.netvisor``"

#: ../../rst/network/user_guide/platform_index.rst:87
msgid "`Ruckus ICX`_"
msgstr "`Ruckus ICX`_"

#: ../../rst/network/user_guide/platform_index.rst:87
msgid "``community.network.icx``"
msgstr "``community.network.icx``"

#: ../../rst/network/user_guide/platform_index.rst:88
msgid "`VyOS`_ `[†]`_"
msgstr "`VyOS`_ `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:88
msgid "``vyos.vyos.vyos``"
msgstr "``vyos.vyos.vyos``"

#: ../../rst/network/user_guide/platform_index.rst:89
msgid "OS that supports Netconf `[†]`_"
msgstr "Netconf に対応する OS `[†]`_"

#: ../../rst/network/user_guide/platform_index.rst:89
msgid "``<network-os>``"
msgstr "``<network-os>``"

#: ../../rst/network/user_guide/platform_index.rst:121
msgid "**[†]** Maintained by Ansible Network Team"
msgstr "**[†]** Ansible Network Team が管理"

#: ../../rst/network/user_guide/platform_ios.rst:5
msgid "IOS Platform Options"
msgstr "IOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_ios.rst:7
msgid "The `Cisco IOS <https://galaxy.ansible.com/cisco/ios>`_ collection supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on IOS in Ansible."
msgstr "`Cisco IOS <https://galaxy.ansible.com/cisco/ios>`_ コレクションは Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の IOS で Enable Mode を有効にする方法を説明します。"

#: ../../rst/network/user_guide/platform_ios.rst:46
msgid "Example CLI ``group_vars/ios.yml``"
msgstr "CLI の例 ``group_vars/ios.yml``"

#: ../../rst/network/user_guide/platform_iosxr.rst:5
msgid "IOS-XR Platform Options"
msgstr "IOS-XR プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_iosxr.rst:7
msgid "The `Cisco IOS-XR collection <https://galaxy.ansible.com/cisco/iosxr>`_ supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr "`Cisco IOS-XR collection <https://galaxy.ansible.com/cisco/iosxr>`_ は複数の接続をサポートします。このページでは、Ansible での各接続がどのように機能するか、およびその使用方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_iosxr.rst:21
msgid "only for modules ``iosxr_banner``, ``iosxr_interface``, ``iosxr_logging``, ``iosxr_system``, ``iosxr_user``"
msgstr "モジュールの ``iosxr_banner``、``iosxr_interface``、``iosxr_logging``、``iosxr_system``、``iosxr_user`` のみ"

#: ../../rst/network/user_guide/platform_iosxr.rst:44
#: ../../rst/network/user_guide/platform_junos.rst:45
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.network_cli`` or ``ansible_connection: ansible.netcommon.netconf`` instead."
msgstr "``ansible_connection: local`` は非推奨になりました。代わりに ``ansible_connection: ansible.netcommon.network_cli`` または ``ansible_connection: ansible.netcommon.netconf`` を使用してください。"

#: ../../rst/network/user_guide/platform_iosxr.rst:50
msgid "Example CLI inventory ``[iosxr:vars]``"
msgstr "CLI インベントリーの例 ``[iosxr:vars]``"

#: ../../rst/network/user_guide/platform_iosxr.rst:86
msgid "enable NETCONF on the Cisco IOS-XR device(s)"
msgstr "Cisco IOS-XR デバイスで NETCONF を有効にします。"

#: ../../rst/network/user_guide/platform_iosxr.rst:88
msgid "To enable NETCONF on a new switch via Ansible, use the ``cisco.iosxr.iosxr_netconf`` module through the CLI connection. Set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr "Ansible を介して新しいスイッチで NETCONF を有効にするには、CLI 接続を介して ``cisco.iosxr.iosxr_netconf`` モジュールを使用します。上記の CLI の例のようにプラットフォームレベルの変数を設定し、次のような Playbook タスクを実行します。"

#: ../../rst/network/user_guide/platform_iosxr.rst:100
msgid "Example NETCONF inventory ``[iosxr:vars]``"
msgstr "NETCONF インベントリーの例 ``[iosxr:vars]``"

#: ../../rst/network/user_guide/platform_ironware.rst:5
msgid "IronWare Platform Options"
msgstr "IronWare プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_ironware.rst:7
msgid "IronWare is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and supports Enable Mode (Privilege Escalation). This page offers details on how to use Enable Mode on IronWare in Ansible."
msgstr "IronWare は、`community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、Enable Mode (Privilege Escalation) をサポートします。このページでは、Ansible の IronWare で Enable Mode を有効にする方法を説明します。"

#: ../../rst/network/user_guide/platform_ironware.rst:47
msgid "Example CLI ``group_vars/mlx.yml``"
msgstr "CLI の例 ``group_vars/mlx.yml``"

#: ../../rst/network/user_guide/platform_junos.rst:5
msgid "Junos OS Platform Options"
msgstr "Junos OS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_junos.rst:7
msgid "The `Juniper Junos OS <https://galaxy.ansible.com/junipernetworks/junos>`_ supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr "`Juniper Junos OS <https://galaxy.ansible.com/junipernetworks/junos>`_ は複数の接続をサポートします。このページでは、Ansible での各接続がどのように機能するか、およびその使用方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_junos.rst:21
msgid "``junos_netconf`` & ``junos_command`` modules only"
msgstr "``junos_netconf`` モジュールおよび ``junos_command`` モジュールのみ"

#: ../../rst/network/user_guide/platform_junos.rst:21
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:20
msgid "all modules except ``junos_netconf``, which enables NETCONF"
msgstr "NETCONF を有効にする ``junos_netconf`` 以外のすべてのモジュール"

#: ../../rst/network/user_guide/platform_junos.rst:32
msgid "``ansible_connection: ``ansible.netcommon.network_cli``"
msgstr "``ansible_connection: ``ansible.netcommon.network_cli``"

#: ../../rst/network/user_guide/platform_junos.rst:32
msgid "``ansible_connection: ``ansible.netcommon.netconf``"
msgstr "``ansible_connection: ``ansible.netcommon.netconf``"

#: ../../rst/network/user_guide/platform_junos.rst:35
msgid "not supported by Junos OS"
msgstr "Junos OS ではサポートされません"

#: ../../rst/network/user_guide/platform_junos.rst:37
msgid "json: ``result[0]['software-information'][0]['host-name'][0]['data'] foo lo0``"
msgstr "json: ``result[0]['software-information'][0]['host-name'][0]['data'] foo lo0``"

#: ../../rst/network/user_guide/platform_junos.rst:38
msgid "text: ``result[1].interface-information[0].physical-interface[0].name[0].data foo lo0``"
msgstr "テキスト: ``result[1].interface-information[0].physical-interface[0].name[0].data foo lo0``"

#: ../../rst/network/user_guide/platform_junos.rst:39
msgid "xml: ``result[1].rpc-reply.interface-information[0].physical-interface[0].name[0].data foo lo0``"
msgstr "xml: ``result[1].rpc-reply.interface-information[0].physical-interface[0].name[0].data foo lo0``"

#: ../../rst/network/user_guide/platform_junos.rst:51
msgid "Example CLI inventory ``[junos:vars]``"
msgstr "CLI インベントリーの例 ``[junos:vars]``"

#: ../../rst/network/user_guide/platform_junos.rst:87
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:46
msgid "enable NETCONF on the Junos OS device(s)"
msgstr "Junos OS デバイスの netconf を有効にします。"

#: ../../rst/network/user_guide/platform_junos.rst:89
msgid "To enable NETCONF on a new switch via Ansible, use the ``junipernetworks.junos.junos_netconf`` module through the CLI connection. Set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr "Ansible を介して新しいスイッチで NETCONF を有効にするには、CLI 接続を介して ``junipernetworks.junos.junos_netconf`` モジュールを使用します。上記の CLI の例のようにプラットフォームレベルの変数を設定し、次のように Playbook タスクを実行します。"

#: ../../rst/network/user_guide/platform_junos.rst:101
#: ../../rst/network/user_guide/platform_netconf_enabled.rst:61
msgid "Example NETCONF inventory ``[junos:vars]``"
msgstr "NETCONF インベントリーの例 ``[junos:vars]``"

#: ../../rst/network/user_guide/platform_meraki.rst:5
msgid "Meraki Platform Options"
msgstr "Meraki プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_meraki.rst:7
msgid "The `cisco.meraki <https://galaxy.ansible.com/cisco/meraki>`_ collection only supports the ``local`` connection type at this time."
msgstr "`cisco.meraki <https://galaxy.ansible.com/cisco/meraki>`_ コレクションは、現時点では ``local`` 接続タイプのみをサポートします。"

#: ../../rst/network/user_guide/platform_meraki.rst:19
msgid "Dashboard API"
msgstr "ダッシュボード API"

#: ../../rst/network/user_guide/platform_meraki.rst:23
msgid "uses API key from Dashboard"
msgstr "Dashboard からの API キーの使用"

#: ../../rst/network/user_guide/platform_meraki.rst:25
msgid "``ansible_connection: localhost``"
msgstr "``ansible_connection: localhost``"

#: ../../rst/network/user_guide/platform_meraki.rst:27
msgid "``data.``"
msgstr "``data.``"

#: ../../rst/network/user_guide/platform_meraki.rst:32
msgid "Example Meraki task"
msgstr "Meraki タスクの例"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:5
msgid "Netconf enabled Platform Options"
msgstr "Netconf が有効なプラットフォームオプション"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:7
msgid "This page offers details on how the netconf connection works in Ansible and how to use it."
msgstr "このページには、netconf 接続が Ansible でどのように機能するか、およびその詳細な使用方法が記載されています。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:31
msgid "``ansible_connection: ansible.netcommon.netconf``"
msgstr "``ansible_connection: ansible.netcommon.netconf``"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:35
msgid "The ``ansible_connection: local`` has been deprecated. Please use ``ansible_connection: ansible.netcommon.netconf`` instead."
msgstr "``ansible_connection: local`` は非推奨になりました。代わりに ``ansible_connection: ansible.netcommon.netconf`` を使用してください。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:45
msgid "install the ``ncclient`` Python package on your control node(s) with ``pip install ncclient``"
msgstr "``pip install ncclient`` を使用して、``ncclient`` Python パッケージをコントロールノードにインストールします。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:48
msgid "To enable NETCONF on a new switch via Ansible, use the platform specific module via the CLI connection or set it manually. For example set up your platform-level variables just like in the CLI example above, then run a playbook task like this:"
msgstr "Ansible 経由で新しいスイッチの NETCONF を有効にするには、CLI 接続経由でプラットフォーム固有のモジュールを使用するか、手動で設定します。たとえば、上記の CLI の例のようにプラットフォームレベルの変数を設定し、次のような Playbook タスクを実行します。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:83
msgid "Example NETCONF task with configurable variables"
msgstr "設定可能な変数を含む NETCONF タスクの例"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:94
msgid "Note: For netconf connection plugin configurable variables see :ref:`ansible.netcommon.netconf <ansible_collections.ansible.netcommon.netconf_connection>`."
msgstr "注意: netconf 接続プラグインの設定可能な変数は、「:ref:`ansible.netcommon.netconf <ansible_collections.ansible.netcommon.netconf_connection>`」を参照してください。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:97
msgid "Bastion/Jumphost configuration"
msgstr "Bastion/Jumphost の設定"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:98
msgid "To use a jump host to connect to a NETCONF enabled device you must set the ``ANSIBLE_NETCONF_SSH_CONFIG`` environment variable."
msgstr "ジャンプホストを使用して NETCONF 対応のデバイスに接続するには、``ANSIBLE_NETCONF_SSH_CONFIG`` 環境変数を設定する必要があります。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:102
msgid "``ANSIBLE_NETCONF_SSH_CONFIG`` can be set to either:"
msgstr "``ANSIBLE_NETCONF_SSH_CONFIG`` を、次のいずれかに設定できます。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:101
msgid "1 or TRUE (to trigger the use of the default SSH config file ~/.ssh/config)"
msgstr "1 または TRUE (デフォルトの SSH 設定ファイル ~/.ssh/config の使用を開始するため)。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:102
msgid "The absolute path to a custom SSH config file."
msgstr "カスタムの SSH 設定ファイルへの絶対パス。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:104
msgid "The SSH config file should look something like:"
msgstr "SSH 設定ファイルは以下のようになります。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:112
msgid "Authentication for the jump host must use key based authentication."
msgstr "ジャンプホストの認証は、鍵ベースの認証を使用する必要があります。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:114
msgid "You can either specify the private key used in the SSH config file:"
msgstr "SSH 設定ファイルで使用する秘密鍵のいずれかを指定できます。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:120
msgid "Or you can use an ssh-agent."
msgstr "または、ssh-agent を使用できます。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:123
msgid "ansible_network_os auto-detection"
msgstr "ansible_network_os 自動検出"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:125
msgid "If ``ansible_network_os`` is not specified for a host, then Ansible will attempt to automatically detect what ``network_os`` plugin to use."
msgstr "ホストに ``ansible_network_os`` が指定されていない場合、Ansible は、使用する ``network_os`` プラグインを自動的に検出しようとします。"

#: ../../rst/network/user_guide/platform_netconf_enabled.rst:127
msgid "``ansible_network_os`` auto-detection can also be triggered by using ``auto`` as the ``ansible_network_os``. (Note: Previously ``default`` was used instead of ``auto``)."
msgstr "``ansible_network_os`` 自動検出は、``auto`` を ``ansible_network_os`` として使用することで発生させることもできます (注意: 以前は ``default`` の代わりに ``auto``が使用されていました)。"

#: ../../rst/network/user_guide/platform_netvisor.rst:5
msgid "Pluribus NETVISOR Platform Options"
msgstr "Pluribus NETVISOR プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_netvisor.rst:7
msgid "Pluribus NETVISOR Ansible is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on NETVISOR in Ansible."
msgstr "Pluribus NETVISOR Ansible は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、現在は CLI 接続のみをサポートしています。将来的に ``httpapi`` モジュールが追加される可能性があります。このページでは、Ansible の NETVISOR で ``ansible.netcommon.network_cli`` を使用する方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_netvisor.rst:32
msgid "not supported by NETVISOR"
msgstr "NETVISOR ではサポートされません"

#: ../../rst/network/user_guide/platform_netvisor.rst:39
msgid "Pluribus NETVISOR does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr "Pluribus NETVISOR は ``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_netvisor.rst:45
msgid "Example CLI ``group_vars/netvisor.yml``"
msgstr "CLI の例 ``group_vars/netvisor.yml``"

#: ../../rst/network/user_guide/platform_nos.rst:5
msgid "NOS Platform Options"
msgstr "NOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_nos.rst:7
msgid "Extreme NOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on NOS in Ansible."
msgstr "Extreme NOS は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、現在は CLI 接続のみをサポートしています。将来的に ``httpapi`` モジュールが追加される可能性があります。このページでは、Ansible の NOS で ``ansible.netcommon.network_cli`` を使用する方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_nos.rst:30
msgid "``ansible_connection: community.netcommon.network_cli``"
msgstr "``ansible_connection: community.netcommon.network_cli``"

#: ../../rst/network/user_guide/platform_nos.rst:32
msgid "not supported by NOS"
msgstr "NOS ではサポートされません"

#: ../../rst/network/user_guide/platform_nos.rst:39
msgid "NOS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr "NOS は ``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_nos.rst:45
msgid "Example CLI ``group_vars/nos.yml``"
msgstr "CLI の例 ``group_vars/nos.yml``"

#: ../../rst/network/user_guide/platform_nxos.rst:5
msgid "NXOS Platform Options"
msgstr "NXOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_nxos.rst:7
msgid "The `Cisco NXOS <https://galaxy.ansible.com/cisco/nxos>`_ supports multiple connections. This page offers details on how each connection works in Ansible and how to use it."
msgstr "`Cisco NXOS <https://galaxy.ansible.com/cisco/nxos>`_ は複数の接続をサポートします。このページでは、Ansible で各接続がどのように機能するか、およびその使用方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_nxos.rst:19
msgid "NX-API"
msgstr "NX-API"

#: ../../rst/network/user_guide/platform_nxos.rst:32
msgid "not supported by NX-API"
msgstr "NX-API ではサポートされません"

#: ../../rst/network/user_guide/platform_nxos.rst:48
msgid "Example CLI ``group_vars/nxos.yml``"
msgstr "CLI の例 ``group_vars/nxos.yml``"

#: ../../rst/network/user_guide/platform_nxos.rst:80
msgid "Using NX-API in Ansible"
msgstr "Ansible での NX-API の使用"

#: ../../rst/network/user_guide/platform_nxos.rst:83
msgid "Enabling NX-API"
msgstr "NX-API の有効化"

#: ../../rst/network/user_guide/platform_nxos.rst:85
msgid "Before you can use NX-API to connect to a switch, you must enable NX-API. To enable NX-API on a new switch via Ansible, use the ``nxos_nxapi`` module via the CLI connection. Set up group_vars/nxos.yml just like in the CLI example above, then run a playbook task like this:"
msgstr "NX-API を使用してスイッチに接続する前に、NX-API を有効にする必要があります。Ansible を介して新しいスイッチで NX-API を有効にするには、CLI 接続を介して ``nxos_nxapi`` モジュールを使用します。前述の CLI の例と同様に group_vars/nxos.yml を設定し、次のように Playbook タスクを実行します。"

#: ../../rst/network/user_guide/platform_nxos.rst:95
msgid "To find out more about the options for enabling HTTP/HTTPS and local http see the :ref:`nxos_nxapi <nxos_nxapi_module>` module documentation."
msgstr "HTTP/HTTPS およびローカル http を有効にするオプションの詳細は、:ref:`nxos_nxapi <nxos_nxapi_module>` モジュールのドキュメントを参照してください。"

#: ../../rst/network/user_guide/platform_nxos.rst:97
msgid "Once NX-API is enabled, change your ``group_vars/nxos.yml`` to use the NX-API connection."
msgstr "NX-API を有効にしたら、NX-API 接続を使用するように ``group_vars/nxos.yml`` を変更します。"

#: ../../rst/network/user_guide/platform_nxos.rst:100
msgid "Example NX-API ``group_vars/nxos.yml``"
msgstr "NX-API の例 ``group_vars/nxos.yml``"

#: ../../rst/network/user_guide/platform_nxos.rst:116
msgid "Example NX-API task"
msgstr "NX-API タスクの例"

#: ../../rst/network/user_guide/platform_nxos.rst:132
msgid "Cisco Nexus platform support matrix"
msgstr "Cisco Nexus プラットフォームのサポートマトリックス"

#: ../../rst/network/user_guide/platform_nxos.rst:134
msgid "The following platforms and software versions have been certified by Cisco to work with this version of Ansible."
msgstr "以下のプラットフォームおよびソフトウェアのバージョンは、Cisco が本バージョンの Ansible で機能することが認定されています。"

#: ../../rst/network/user_guide/platform_nxos.rst:136
msgid "Platform / Software Minimum Requirements"
msgstr "プラットフォーム/ソフトウェア最小要件"

#: ../../rst/network/user_guide/platform_nxos.rst:140
msgid "Supported Platforms"
msgstr "サポート対象のプラットフォーム"

#: ../../rst/network/user_guide/platform_nxos.rst:140
msgid "Minimum NX-OS Version"
msgstr "最小 NX-OS バージョン"

#: ../../rst/network/user_guide/platform_nxos.rst:142
msgid "Cisco Nexus N3k"
msgstr "Cisco Nexus N3k"

#: ../../rst/network/user_guide/platform_nxos.rst:142
#: ../../rst/network/user_guide/platform_nxos.rst:143
msgid "7.0(3)I2(5) and later"
msgstr "7.0(3)I2(5) 以降"

#: ../../rst/network/user_guide/platform_nxos.rst:143
msgid "Cisco Nexus N9k"
msgstr "Cisco Nexus N9k"

#: ../../rst/network/user_guide/platform_nxos.rst:144
msgid "Cisco Nexus N5k"
msgstr "Cisco Nexus N5k"

#: ../../rst/network/user_guide/platform_nxos.rst:144
#: ../../rst/network/user_guide/platform_nxos.rst:145
msgid "7.3(0)N1(1) and later"
msgstr "7.3(0)N1(1) 以降"

#: ../../rst/network/user_guide/platform_nxos.rst:145
msgid "Cisco Nexus N6k"
msgstr "Cisco Nexus N6k"

#: ../../rst/network/user_guide/platform_nxos.rst:146
msgid "Cisco Nexus N7k"
msgstr "Cisco Nexus N7k"

#: ../../rst/network/user_guide/platform_nxos.rst:146
msgid "7.3(0)D1(1) and later"
msgstr "7.3(0)D1(1) 以降"

#: ../../rst/network/user_guide/platform_nxos.rst:147
msgid "Cisco Nexus MDS"
msgstr "Cisco Nexus MDS"

#: ../../rst/network/user_guide/platform_nxos.rst:147
msgid "8.4(1) and later"
msgstr "8.4(1) 以降"

#: ../../rst/network/user_guide/platform_nxos.rst:150
msgid "Platform Models"
msgstr "プラットフォームモデル"

#: ../../rst/network/user_guide/platform_nxos.rst:154
msgid "Platform"
msgstr "プラットフォーム"

#: ../../rst/network/user_guide/platform_nxos.rst:154
msgid "Description"
msgstr "説明"

#: ../../rst/network/user_guide/platform_nxos.rst:156
msgid "N3k"
msgstr "N3k"

#: ../../rst/network/user_guide/platform_nxos.rst:156
msgid "Support includes N30xx, N31xx and N35xx models"
msgstr "サポートには、N30xx モデル、N31xx モデル、および N35xx モデルが含まれます。"

#: ../../rst/network/user_guide/platform_nxos.rst:157
msgid "N5k"
msgstr "N5k"

#: ../../rst/network/user_guide/platform_nxos.rst:157
msgid "Support includes all N5xxx models"
msgstr "サポートには、N5xxx の全モデルが含まれます。"

#: ../../rst/network/user_guide/platform_nxos.rst:158
msgid "N6k"
msgstr "N6k"

#: ../../rst/network/user_guide/platform_nxos.rst:158
msgid "Support includes all N6xxx models"
msgstr "サポートには、N6xxx の全モデルが含まれます。"

#: ../../rst/network/user_guide/platform_nxos.rst:159
msgid "N7k"
msgstr "N7k"

#: ../../rst/network/user_guide/platform_nxos.rst:159
msgid "Support includes all N7xxx models"
msgstr "サポートには、N7xxx の全モデルが含まれます。"

#: ../../rst/network/user_guide/platform_nxos.rst:160
msgid "N9k"
msgstr "N9k"

#: ../../rst/network/user_guide/platform_nxos.rst:160
msgid "Support includes all N9xxx models"
msgstr "サポートには、N9xxx の全モデルが含まれます。"

#: ../../rst/network/user_guide/platform_nxos.rst:161
msgid "MDS"
msgstr "MDS"

#: ../../rst/network/user_guide/platform_nxos.rst:161
msgid "Support includes all MDS 9xxx models"
msgstr "サポートには、MDS 9xxx モデルがすべて含まれます。"

#: ../../rst/network/user_guide/platform_routeros.rst:5
msgid "RouterOS Platform Options"
msgstr "RouterOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_routeros.rst:7
msgid "RouterOS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on RouterOS in Ansible."
msgstr "RouterOS は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、現在は CLI 接続のみをサポートしています。将来的に ``httpapi`` モジュールが追加される可能性があります。このページでは、Ansible の RouterOS で ``ansible.netcommon.network_cli`` を使用する方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_routeros.rst:30
msgid "``ansible_connection: ansible.network.network_cli``"
msgstr "``ansible_connection: ansible.network.network_cli``"

#: ../../rst/network/user_guide/platform_routeros.rst:32
msgid "not supported by RouterOS"
msgstr "RouterOS ではサポートされません"

#: ../../rst/network/user_guide/platform_routeros.rst:40
msgid "RouterOS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr "RouterOS は ``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_routeros.rst:46
msgid "Example CLI ``group_vars/routeros.yml``"
msgstr "CLI の例 ``group_vars/routeros.yml``"

#: ../../rst/network/user_guide/platform_routeros.rst:63
msgid "If you are getting timeout errors you may want to add ``+cet1024w`` suffix to your username which will disable console colors, enable \"dumb\" mode, tell RouterOS not to try detecting terminal capabilities and set terminal width to 1024 columns. See article `Console login process <https://wiki.mikrotik.com/wiki/Manual:Console_login_process>`_ in MikroTik wiki for more information."
msgstr "タイムアウトエラーが発生した場合は、ユーザー名に ``+cet1024w`` 接頭辞を追加することでコンソールの色を無効にし、「dumb」モードを有効にし、端末機能を検出しないように RouterOS に指示し、端末の幅を 1024 カラムに設定することができます。詳細は、MikroTik Wikiの記事「`Console login process <https://wiki.mikrotik.com/wiki/Manual:Console_login_process>`_」を参照してください。"

#: ../../rst/network/user_guide/platform_slxos.rst:5
msgid "SLX-OS Platform Options"
msgstr "SLX-OS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_slxos.rst:7
msgid "Extreme SLX-OS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. ``httpapi`` modules may be added in future. This page offers details on how to use ``ansible.netcommon.network_cli`` on SLX-OS in Ansible."
msgstr "Extreme SLX-OS は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、現在は CLI 接続のみをサポートしています。将来的に ``httpapi`` モジュールが追加される可能性があります。このページでは、Ansible の SLX-OS で ``ansible.netcommon.network_cli`` を使用する方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_slxos.rst:32
msgid "not supported by SLX-OS"
msgstr "SLX-OS ではサポートされません"

#: ../../rst/network/user_guide/platform_slxos.rst:40
msgid "SLX-OS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr "SLX-OS は ``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_slxos.rst:46
msgid "Example CLI ``group_vars/slxos.yml``"
msgstr "CLI の例 ``group_vars/slxos.yml``"

#: ../../rst/network/user_guide/platform_voss.rst:5
msgid "VOSS Platform Options"
msgstr "VOSS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_voss.rst:7
msgid "Extreme VOSS is part of the `community.network <https://galaxy.ansible.com/community/network>`_ collection and only supports CLI connections today. This page offers details on how to use ``ansible.netcommon.network_cli`` on VOSS in Ansible."
msgstr "Extreme VOSS は `community.network <https://galaxy.ansible.com/community/network>`_ コレクションの一部で、現在は CLI 接続のみをサポートしています。このページでは、Ansible の VOSS で ``ansible.netcommon.network_cli`` を使用する方法を詳細に説明します。"

#: ../../rst/network/user_guide/platform_voss.rst:32
msgid "supported: use ``ansible_become: yes`` with ``ansible_become_method: enable``"
msgstr "サポート対象: ``ansible_become: yes`` を ``ansible_become_method: enable`` と併用してください。"

#: ../../rst/network/user_guide/platform_voss.rst:41
msgid "VOSS does not support ``ansible_connection: local``. You must use ``ansible_connection: ansible.netcommon.network_cli``."
msgstr "VOSS は ``ansible_connection: local`` をサポートしません。``ansible_connection: ansible.netcommon.network_cli`` を使用する必要があります。"

#: ../../rst/network/user_guide/platform_voss.rst:47
msgid "Example CLI ``group_vars/voss.yml``"
msgstr "CLI の例 ``group_vars/voss.yml``"

#: ../../rst/network/user_guide/platform_vyos.rst:5
msgid "VyOS Platform Options"
msgstr "VyOS プラットフォームのオプション"

#: ../../rst/network/user_guide/platform_vyos.rst:7
msgid "The `VyOS <https://galaxy.ansible.com/vyos/vyos>`_ collection supports the ``ansible.netcommon.network_cli`` connection type. This page offers details on connection options to manage VyOS using Ansible."
msgstr "`VyOS <https://galaxy.ansible.com/vyos/vyos>`_ コレクションは、``ansible.netcommon.network_cli`` 接続タイプをサポートします。このページでは、Ansible を使用して VyOS を管理する接続オプションの詳細を提供します。"

#: ../../rst/network/user_guide/platform_vyos.rst:45
msgid "Example CLI ``group_vars/vyos.yml``"
msgstr "CLI の例 ``group_vars/vyos.yml``"

#~ msgid "The units of action in Ansible. You can execute a single task once with an ad-hoc command."
#~ msgstr ""

#~ msgid "Unlike most Ansible modules, network modules do not run on the managed nodes. From a user's point of view, network modules work like any other modules. They work with ad-hoc commands, playbooks, and roles. Behind the scenes, however, network modules use a different methodology than the other (Linux/Unix and Windows) modules use. Ansible is written and executed in Python. Because the majority of network devices can not run Python, the Ansible network modules are executed on the Ansible control node, where ``ansible`` or ``ansible-playbook`` runs."
#~ msgstr ""

#~ msgid "Although Ansible contains a number of plugins that can convert XML to Ansible native data structures, the``cli_parse`` module runs the command on devices that return XML and returns the converted data in a single task."
#~ msgstr ""

#~ msgid "The following is an example TTP template stored as ``templates/nxos_show_interfaces.ttp``:"
#~ msgstr ""

#~ msgid "Using an ad-hoc ``ansible`` command"
#~ msgstr ""

#~ msgid "`ad-hoc` refers to running Ansible to perform some quick command using ``/usr/bin/ansible``, rather than the orchestration language, which is ``/usr/bin/ansible-playbook``. In this case we can ensure connectivity by attempting to execute a single command on the remote device::"
#~ msgstr ""

